# Path: build/mpy-cross
# Arch: x86_64
# Object files:
[  0] linker synthesized
[  1] build/py/mpstate.o
[  2] build/py/nlr.o
[  3] build/py/nlrx64.o
[  4] build/py/malloc.o
[  5] build/py/gc.o
[  6] build/py/qstr.o
[  7] build/py/vstr.o
[  8] build/py/mpprint.o
[  9] build/py/unicode.o
[ 10] build/py/mpz.o
[ 11] build/py/reader.o
[ 12] build/py/lexer.o
[ 13] build/py/parse.o
[ 14] build/py/scope.o
[ 15] build/py/compile.o
[ 16] build/py/emitcommon.o
[ 17] build/py/emitbc.o
[ 18] build/py/asmbase.o
[ 19] build/py/asmx64.o
[ 20] build/py/emitnx64.o
[ 21] build/py/asmx86.o
[ 22] build/py/emitnx86.o
[ 23] build/py/asmthumb.o
[ 24] build/py/emitnthumb.o
[ 25] build/py/emitinlinethumb.o
[ 26] build/py/asmarm.o
[ 27] build/py/emitnarm.o
[ 28] build/py/asmxtensa.o
[ 29] build/py/emitnxtensa.o
[ 30] build/py/emitinlinextensa.o
[ 31] build/py/emitnxtensawin.o
[ 32] build/py/formatfloat.o
[ 33] build/py/parsenumbase.o
[ 34] build/py/parsenum.o
[ 35] build/py/emitglue.o
[ 36] build/py/persistentcode.o
[ 37] build/py/runtime.o
[ 38] build/py/runtime_utils.o
[ 39] build/py/scheduler.o
[ 40] build/py/nativeglue.o
[ 41] build/py/pairheap.o
[ 42] build/py/ringbuf.o
[ 43] build/py/stackctrl.o
[ 44] build/py/argcheck.o
[ 45] build/py/warning.o
[ 46] build/py/map.o
[ 47] build/py/obj.o
[ 48] build/py/objarray.o
[ 49] build/py/objbool.o
[ 50] build/py/objboundmeth.o
[ 51] build/py/objcell.o
[ 52] build/py/objclosure.o
[ 53] build/py/objcomplex.o
[ 54] build/py/objdict.o
[ 55] build/py/objenumerate.o
[ 56] build/py/objexcept.o
[ 57] build/py/objfilter.o
[ 58] build/py/objfloat.o
[ 59] build/py/objfun.o
[ 60] build/py/objgenerator.o
[ 61] build/py/objgetitemiter.o
[ 62] build/py/objint.o
[ 63] build/py/objint_mpz.o
[ 64] build/py/objlist.o
[ 65] build/py/objmap.o
[ 66] build/py/objmodule.o
[ 67] build/py/objobject.o
[ 68] build/py/objpolyiter.o
[ 69] build/py/objproperty.o
[ 70] build/py/objnone.o
[ 71] build/py/objrange.o
[ 72] build/py/objreversed.o
[ 73] build/py/objset.o
[ 74] build/py/objsingleton.o
[ 75] build/py/objslice.o
[ 76] build/py/objstr.o
[ 77] build/py/objstrunicode.o
[ 78] build/py/objtuple.o
[ 79] build/py/objtype.o
[ 80] build/py/objzip.o
[ 81] build/py/opmethods.o
[ 82] build/py/sequence.o
[ 83] build/py/stream.o
[ 84] build/py/binary.o
[ 85] build/py/builtinimport.o
[ 86] build/py/builtinevex.o
[ 87] build/py/builtinhelp.o
[ 88] build/py/modbuiltins.o
[ 89] build/py/modmicropython.o
[ 90] build/py/modstruct.o
[ 91] build/py/vm.o
[ 92] build/py/bc.o
[ 93] build/py/smallint.o
[ 94] build/main.o
[ 95] build/gccollect.o
[ 96] build/shared/runtime/gchelper_generic.o
[ 97] /Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/lib/libm.tbd
# Sections:
# Address	Size    	Segment	Section
0x1000029A0	0x0004306A	__TEXT	__text
0x100045A0A	0x000000BA	__TEXT	__stubs
0x100045AC4	0x00000146	__TEXT	__stub_helper
0x100045C10	0x00001305	__TEXT	__const
0x100046F15	0x0000509A	__TEXT	__cstring
0x10004BFB0	0x00000048	__TEXT	__unwind_info
0x10004C000	0x000000D8	__DATA_CONST	__got
0x10004C0E0	0x00003BD0	__DATA_CONST	__const
0x100050000	0x000000F8	__DATA	__la_symbol_ptr
0x1000500F8	0x00000010	__DATA	__data
0x100050108	0x00000330	__DATA	__common
0x100050438	0x00000004	__DATA	__bss
# Symbols:
# Address	Size    	File  Name
0x1000029A0	0x0000001A	[  2] _nlr_push_tail
0x1000029BA	0x00000018	[  2] _nlr_pop
0x1000029D2	0x00000032	[  3] _nlr_push
0x100002A04	0x00000053	[  3] _nlr_jump
0x100002A57	0x00000029	[  4] _m_malloc
0x100002A80	0x0000000C	[  4] _m_malloc_maybe
0x100002A8C	0x0000000A	[  4] _m_malloc0
0x100002A96	0x0000002C	[  4] _m_realloc
0x100002AC2	0x0000000A	[  4] _m_realloc_maybe
0x100002ACC	0x0000000A	[  4] _m_free
0x100002AE0	0x00000090	[  5] _gc_init
0x100002B70	0x00000020	[  5] _gc_is_locked
0x100002B90	0x00000040	[  5] _gc_collect_start
0x100002BD0	0x000001D0	[  5] _gc_collect_root
0x100002DA0	0x00000290	[  5] _gc_collect_end
0x100003030	0x00000210	[  5] _gc_alloc
0x100003240	0x00000120	[  5] _gc_free
0x100003360	0x000003B0	[  5] _gc_realloc
0x100003710	0x00000040	[  6] _qstr_compute_hash
0x100003750	0x00000023	[  6] _qstr_init
0x100003773	0x000000E3	[  6] _qstr_find_strn
0x100003856	0x0000001F	[  6] _qstr_from_str
0x100003875	0x00000264	[  6] _qstr_from_strn
0x100003AD9	0x00000027	[  6] _qstr_hash
0x100003B00	0x00000048	[  6] _find_qstr
0x100003B48	0x00000027	[  6] _qstr_len
0x100003B6F	0x00000024	[  6] _qstr_str
0x100003B93	0x00000039	[  6] _qstr_data
0x100003BCC	0x00000034	[  7] _vstr_init
0x100003C00	0x0000003D	[  7] _vstr_init_len
0x100003C3D	0x00000044	[  7] _vstr_init_print
0x100003C81	0x0000003D	[  7] _vstr_add_strn
0x100003CBE	0x00000027	[  7] _vstr_clear
0x100003CE5	0x00000049	[  7] _vstr_extend
0x100003D2E	0x0000004C	[  7] _vstr_ensure_extra
0x100003D7A	0x00000036	[  7] _vstr_null_terminated_str
0x100003DB0	0x00000030	[  7] _vstr_add_byte
0x100003DE0	0x00000150	[  7] _vstr_add_char
0x100003F30	0x00000048	[  7] _vstr_add_str
0x100003F78	0x00000017	[  7] _vstr_cut_tail_bytes
0x100003F92	0x0000003A	[  8] _mp_print_str
0x100003FCC	0x00000120	[  8] _mp_print_strn
0x1000040EC	0x00000478	[  8] _mp_print_mp_int
0x100004564	0x000000F6	[  8] _mp_print_float
0x10000465A	0x0000009A	[  8] _mp_printf
0x1000046F4	0x000005E4	[  8] _mp_vprintf
0x100004CD8	0x0000017F	[  8] _mp_print_int
0x100004E57	0x0000005D	[  9] _utf8_get_char
0x100004EB4	0x00000017	[  9] _utf8_next_char
0x100004ECB	0x00000023	[  9] _utf8_ptr_to_index
0x100004EEE	0x0000002C	[  9] _utf8_charlen
0x100004F1A	0x0000001E	[  9] _unichar_isspace
0x100004F38	0x0000001F	[  9] _unichar_isalpha
0x100004F57	0x0000001E	[  9] _unichar_isdigit
0x100004F75	0x0000001F	[  9] _unichar_isxdigit
0x100004F94	0x0000001E	[  9] _unichar_isupper
0x100004FB2	0x0000001E	[  9] _unichar_islower
0x100004FD0	0x0000001F	[  9] _unichar_tolower
0x100004FEF	0x0000001F	[  9] _unichar_toupper
0x10000500E	0x00000019	[  9] _unichar_xdigit_value
0x100005027	0x00000055	[  9] _utf8_check
0x10000507C	0x00000014	[ 10] _mpz_init_zero
0x100005090	0x00000063	[ 10] _mpz_set_from_int
0x1000050F3	0x00000024	[ 10] _mpz_init_fixed_from_int
0x100005117	0x0000001A	[ 10] _mpz_deinit
0x100005131	0x0000004A	[ 10] _mpz_set
0x10000517B	0x00000075	[ 10] _mpz_need_dig
0x1000051F0	0x0000006E	[ 10] _mpz_set_from_ll
0x10000525E	0x0000017A	[ 10] _mpz_set_from_float
0x1000053D8	0x00000136	[ 10] _mpz_set_from_str
0x10000550E	0x000000DA	[ 10] _mpz_set_from_bytes
0x1000055E8	0x00000079	[ 10] _mpz_cmp
0x100005661	0x00000020	[ 10] _mpz_abs_inpl
0x100005681	0x00000027	[ 10] _mpz_neg_inpl
0x1000056A8	0x000000AC	[ 10] _mpz_not_inpl
0x100005754	0x00000091	[ 10] _mpn_sub
0x1000057E5	0x00000088	[ 10] _mpn_add
0x10000586D	0x00000118	[ 10] _mpz_shl_inpl
0x100005985	0x00000139	[ 10] _mpz_shr_inpl
0x100005ABE	0x00000065	[ 10] _mpn_shr
0x100005B23	0x000000ED	[ 10] _mpz_add_inpl
0x100005C10	0x00000103	[ 10] _mpz_sub_inpl
0x100005D13	0x00000177	[ 10] _mpz_and_inpl
0x100005E8A	0x0000018D	[ 10] _mpz_or_inpl
0x100006017	0x0000014A	[ 10] _mpz_xor_inpl
0x100006161	0x00000179	[ 10] _mpz_mul_inpl
0x1000062DA	0x00000088	[ 10] _mpz_clone
0x100006362	0x00000026	[ 10] _mpz_free
0x100006388	0x00000136	[ 10] _mpz_pow_inpl
0x1000064BE	0x0000042E	[ 10] _mpz_divmod_inpl
0x1000068EC	0x0000003D	[ 10] _mpz_hash
0x100006929	0x0000004E	[ 10] _mpz_as_int_checked
0x100006977	0x000000D5	[ 10] _mpz_as_bytes
0x100006A4C	0x00000052	[ 10] _mpz_as_float
0x100006A9E	0x00000220	[ 10] _mpz_as_str_inpl
0x100006CBE	0x0000008A	[ 11] _mp_reader_new_file_from_fd
0x100006D48	0x00000060	[ 11] _mp_reader_posix_readbyte
0x100006DA8	0x00000024	[ 11] _mp_reader_posix_close
0x100006DCC	0x0000003F	[ 11] _mp_reader_new_file
0x100006E0C	0x00000AE8	[ 12] _mp_lexer_to_next
0x1000078F4	0x0000008D	[ 12] _skip_whitespace
0x100007981	0x00000050	[ 12] _indent_push
0x1000079D1	0x0000006B	[ 12] _is_string_or_bytes
0x100007A3C	0x000000EC	[ 12] _next_char
0x100007B28	0x000000C5	[ 12] _mp_lexer_new
0x100007BF0	0x00000047	[ 12] _mp_lexer_new_from_file
0x100007C3A	0x00000045	[ 12] _mp_lexer_free
0x100007C80	0x00000019	[ 13] _mp_parse_node_is_const_false
0x100007C99	0x0000001B	[ 13] _mp_parse_node_is_const_true
0x100007CB4	0x00000052	[ 13] _mp_parse_node_get_int_maybe
0x100007D06	0x00000040	[ 13] _mp_parse_node_extract_list
0x100007D46	0x00000A72	[ 13] _mp_parse
0x1000087B8	0x0000007F	[ 13] _push_rule
0x100008837	0x00000191	[ 13] _push_result_token
0x1000089C8	0x00000048	[ 13] _push_rule_from_arg
0x100008A10	0x0000004F	[ 13] _push_result_node
0x100008A5F	0x0000003F	[ 13] _pop_result
0x100008A9E	0x00000A22	[ 13] _push_result_rule
0x1000094C0	0x00000027	[ 13] _mp_parse_tree_clear
0x1000094E7	0x00000060	[ 13] _make_node_const_object_optimised
0x100009547	0x000000B3	[ 13] _parser_alloc
0x1000095FA	0x00000057	[ 13] _mp_parse_node_is_const
0x100009651	0x00000193	[ 13] _mp_parse_node_convert_to_obj
0x1000097E4	0x00000041	[ 13] _peek_rule
0x100009825	0x0000012B	[ 13] _build_tuple_from_stack
0x100009950	0x000000AD	[ 14] _scope_new
0x1000099FD	0x00000020	[ 14] _scope_free
0x100009A1D	0x00000099	[ 14] _scope_find_or_add_id
0x100009AB6	0x00000024	[ 14] _scope_find
0x100009ADA	0x00000030	[ 14] _scope_find_global
0x100009B0A	0x000000E0	[ 14] _scope_check_to_close_over
0x100009BEC	0x0000079E	[ 15] _mp_compile_to_raw_code
0x10000A38A	0x00000516	[ 15] _compile_scope_inline_asm
0x10000A8A0	0x00000697	[ 15] _compile_scope
0x10000AF3A	0x00000044	[ 15] _compile_syntax_error
0x10000AF7E	0x000000D0	[ 15] _compile_node
0x10000B04E	0x00000084	[ 15] _apply_to_single_or_list
0x10000B0D2	0x00000076	[ 15] _compile_viper_type_annotation
0x10000B148	0x00000038	[ 15] _compile_load_id
0x10000B180	0x00000171	[ 15] _compile_scope_comp_iter
0x10000B2F1	0x00000033	[ 15] _compile_store_id
0x10000B324	0x00000069	[ 15] _compile_generic_all_nodes
0x10000B38D	0x00000333	[ 15] _compile_decorated
0x10000B6C0	0x00000027	[ 15] _compile_funcdef
0x10000B6E7	0x0000038B	[ 15] _compile_expr_stmt
0x10000BA72	0x00000071	[ 15] _compile_generic_tuple
0x10000BAE3	0x0000001A	[ 15] _compile_del_stmt
0x10000BAFD	0x00000078	[ 15] _compile_break_cont_stmt
0x10000BB75	0x000000CE	[ 15] _compile_return_stmt
0x10000BC43	0x00000026	[ 15] _compile_yield_stmt
0x10000BC69	0x0000006B	[ 15] _compile_raise_stmt
0x10000BCD4	0x0000001A	[ 15] _compile_import_name
0x10000BCEE	0x000002B6	[ 15] _compile_import_from
0x10000BFA4	0x0000012D	[ 15] _compile_global_nonlocal_stmt
0x10000C0D1	0x000000B3	[ 15] _compile_assert_stmt
0x10000C184	0x000003A8	[ 15] _compile_async_stmt
0x10000C52C	0x000001A9	[ 15] _compile_if_stmt
0x10000C6D5	0x0000010F	[ 15] _compile_while_stmt
0x10000C7E4	0x00000269	[ 15] _compile_for_stmt
0x10000CA4D	0x000000F7	[ 15] _compile_try_stmt
0x10000CB44	0x00000063	[ 15] _compile_with_stmt
0x10000CBA7	0x00000015	[ 15] _compile_namedexpr
0x10000CBBC	0x000000E1	[ 15] _compile_test_if_expr
0x10000CC9D	0x0000007C	[ 15] _compile_lambdef
0x10000CD19	0x000000AF	[ 15] _compile_or_and_test
0x10000CDC8	0x0000002E	[ 15] _compile_not_test_2
0x10000CDF6	0x0000020B	[ 15] _compile_comparison
0x10000D001	0x00000011	[ 15] _compile_star_expr
0x10000D012	0x00000070	[ 15] _compile_binary_op
0x10000D082	0x0000006A	[ 15] _compile_term
0x10000D0EC	0x0000006B	[ 15] _compile_factor_2
0x10000D157	0x0000002A	[ 15] _compile_power
0x10000D181	0x00000044	[ 15] _compile_atom_expr_await
0x10000D1C5	0x000001DC	[ 15] _compile_atom_expr_normal
0x10000D3A1	0x00000088	[ 15] _compile_atom_paren
0x10000D429	0x000000B8	[ 15] _compile_atom_bracket
0x10000D4E1	0x0000029F	[ 15] _compile_atom_brace
0x10000D780	0x00000012	[ 15] _compile_trailer_paren
0x10000D792	0x0000002B	[ 15] _compile_trailer_bracket
0x10000D7BD	0x00000023	[ 15] _compile_trailer_period
0x10000D7E0	0x0000017F	[ 15] _compile_subscript
0x10000D95F	0x00000026	[ 15] _compile_dictorsetmaker_item
0x10000D985	0x00000027	[ 15] _compile_classdef
0x10000D9AC	0x0000009C	[ 15] _compile_yield_expr
0x10000DA48	0x0000001D	[ 15] _compile_const_object
0x10000DA65	0x00000087	[ 15] _compile_funcdef_helper
0x10000DAEC	0x000000CB	[ 15] _compile_classdef_helper
0x10000DBB7	0x000000B1	[ 15] _compile_funcdef_lambdef
0x10000DC68	0x0000019C	[ 15] _compile_funcdef_lambdef_param
0x10000DE04	0x0000014D	[ 15] _close_over_variables_etc
0x10000DF51	0x0000022D	[ 15] _compile_trailer_paren_helper
0x10000E17E	0x0000007E	[ 15] _compile_namedexpr_helper
0x10000E1FC	0x0000012F	[ 15] _compile_comprehension
0x10000E32B	0x000003AD	[ 15] _c_assign
0x10000E6D8	0x00000100	[ 15] _c_assign_tuple
0x10000E7D8	0x0000027B	[ 15] _c_del_stmt
0x10000EA53	0x00000033	[ 15] _compile_delete_id
0x10000EA86	0x00000203	[ 15] _c_if_cond
0x10000EC89	0x00000054	[ 15] _compile_dotted_as_name
0x10000ECDD	0x00000231	[ 15] _do_import_name
0x10000EF0E	0x0000005A	[ 15] _compile_decrease_except_level
0x10000EF68	0x00000052	[ 15] _compile_yield_from
0x10000EFBA	0x0000040C	[ 15] _compile_async_with_stmt_helper
0x10000F3C6	0x000002A2	[ 15] _compile_for_stmt_optimised_range
0x10000F668	0x0000010A	[ 15] _compile_try_finally
0x10000F772	0x0000030D	[ 15] _compile_try_except
0x10000FA7F	0x0000013A	[ 15] _compile_with_stmt_helper
0x10000FBB9	0x000001E2	[ 15] _compile_scope_func_lambda_param
0x10000FD9C	0x00000048	[ 16] _mp_emit_common_use_qstr
0x10000FDE4	0x00000057	[ 16] _mp_emit_common_use_const_obj
0x10000FE3B	0x0000009E	[ 16] _strictly_equal
0x10000FED9	0x0000002C	[ 16] _mp_emit_common_get_id_for_modification
0x10000FF05	0x000000F3	[ 16] _mp_emit_common_id_op
0x10000FFF8	0x0000001E	[ 17] _emit_bc_new
0x100010016	0x00000025	[ 17] _emit_bc_set_max_num_labels
0x10001003B	0x00000020	[ 17] _emit_bc_free
0x10001005B	0x00000267	[ 17] _mp_emit_bc_start_pass
0x1000102C2	0x000001CD	[ 17] _mp_emit_bc_end_pass
0x10001048F	0x00000047	[ 17] _mp_emit_bc_adjust_stack_size
0x1000104D6	0x0000013A	[ 17] _mp_emit_bc_set_source_line
0x100010610	0x0000007E	[ 17] _mp_emit_bc_label_assign
0x10001068E	0x00000070	[ 17] _mp_emit_bc_import
0x1000106FE	0x0000005E	[ 17] _mp_emit_bc_load_const_tok
0x10001075C	0x00000135	[ 17] _mp_emit_bc_load_const_small_int
0x100010891	0x0000002D	[ 17] _mp_emit_bc_load_const_str
0x1000108BE	0x0000002D	[ 17] _mp_emit_bc_load_const_obj
0x1000108EB	0x0000002A	[ 17] _mp_emit_bc_load_null
0x100010915	0x00000055	[ 17] _mp_emit_bc_load_local
0x10001096A	0x00000047	[ 17] _emit_write_bytecode_byte_uint
0x1000109B1	0x0000002F	[ 17] _mp_emit_bc_load_global
0x1000109E0	0x00000043	[ 17] _mp_emit_bc_load_method
0x100010A23	0x0000002A	[ 17] _mp_emit_bc_load_build_class
0x100010A4D	0x0000007D	[ 17] _mp_emit_bc_subscr
0x100010ACA	0x00000027	[ 17] _mp_emit_bc_rot_three
0x100010AF1	0x0000008D	[ 17] _mp_emit_bc_attr
0x100010B7E	0x00000027	[ 17] _mp_emit_bc_rot_two
0x100010BA5	0x00000057	[ 17] _mp_emit_bc_store_local
0x100010BFC	0x0000002F	[ 17] _mp_emit_bc_store_global
0x100010C2B	0x00000018	[ 17] _mp_emit_bc_delete_local
0x100010C43	0x0000002C	[ 17] _mp_emit_bc_delete_global
0x100010C6F	0x0000002A	[ 17] _mp_emit_bc_dup_top
0x100010C99	0x0000002A	[ 17] _mp_emit_bc_dup_top_two
0x100010CC3	0x0000002C	[ 17] _mp_emit_bc_pop_top
0x100010CEF	0x00000023	[ 17] _mp_emit_bc_jump
0x100010D12	0x00000135	[ 17] _emit_write_bytecode_byte_label
0x100010E47	0x00000019	[ 17] _mp_emit_bc_pop_jump_if
0x100010E60	0x00000019	[ 17] _mp_emit_bc_jump_if_or_pop
0x100010E79	0x000000AB	[ 17] _mp_emit_bc_unwind_jump
0x100010F24	0x0000001D	[ 17] _mp_emit_bc_setup_block
0x100010F41	0x00000062	[ 17] _mp_emit_bc_with_cleanup
0x100010FA3	0x0000002C	[ 17] _mp_emit_bc_end_finally
0x100010FCF	0x0000002E	[ 17] _mp_emit_bc_get_iter
0x100010FFD	0x00000017	[ 17] _mp_emit_bc_for_iter
0x100011014	0x00000011	[ 17] _mp_emit_bc_for_iter_end
0x100011025	0x00000023	[ 17] _mp_emit_bc_pop_except_jump
0x100011048	0x0000002A	[ 17] _mp_emit_bc_unary_op
0x100011072	0x00000070	[ 17] _mp_emit_bc_binary_op
0x1000110E2	0x00000025	[ 17] _mp_emit_bc_build
0x100011107	0x0000002C	[ 17] _mp_emit_bc_store_map
0x100011133	0x0000003D	[ 17] _mp_emit_bc_store_comp
0x100011170	0x00000014	[ 17] _mp_emit_bc_unpack_sequence
0x100011184	0x0000001E	[ 17] _mp_emit_bc_unpack_ex
0x1000111A2	0x0000002D	[ 17] _mp_emit_bc_make_function
0x1000111CF	0x0000003B	[ 17] _emit_write_bytecode_byte_child
0x10001120A	0x0000007C	[ 17] _mp_emit_bc_make_closure
0x100011286	0x0000001A	[ 17] _mp_emit_bc_call_function
0x1000112A0	0x0000003C	[ 17] _emit_bc_call_function_method_helper
0x1000112DC	0x0000001D	[ 17] _mp_emit_bc_call_method
0x1000112F9	0x00000030	[ 17] _mp_emit_bc_return_value
0x100011329	0x0000005C	[ 17] _mp_emit_bc_raise_varargs
0x100011385	0x00000038	[ 17] _mp_emit_bc_yield
0x1000113BD	0x0000000F	[ 17] _mp_emit_bc_start_except_handler
0x1000113CC	0x00000011	[ 17] _mp_emit_bc_end_except_handler
0x1000113DD	0x00000046	[ 17] _emit_get_cur_to_write_code_info
0x100011423	0x00000056	[ 17] _emit_get_cur_to_write_bytecode
0x100011479	0x00000025	[ 18] _mp_asm_base_init
0x10001149E	0x00000025	[ 18] _mp_asm_base_deinit
0x1000114C3	0x00000077	[ 18] _mp_asm_base_start_pass
0x10001153A	0x0000004D	[ 18] _mp_asm_base_get_cur_to_write_bytes
0x100011587	0x00000090	[ 18] _mp_asm_base_label_assign
0x100011617	0x00000015	[ 18] _mp_asm_base_align
0x10001162C	0x00000041	[ 18] _mp_asm_base_data
0x10001166D	0x0000000F	[ 19] _asm_x64_mov_r64_r64
0x10001167C	0x00000054	[ 19] _asm_x64_generic_r64_r64
0x1000116D0	0x0000007C	[ 19] _asm_x64_mov_r8_to_mem8
0x10001174C	0x000000D8	[ 19] _asm_x64_write_r64_disp
0x100011824	0x00000087	[ 19] _asm_x64_mov_r16_to_mem16
0x1000118AB	0x0000007C	[ 19] _asm_x64_mov_r32_to_mem32
0x100011927	0x0000005B	[ 19] _asm_x64_mov_r64_to_mem64
0x100011982	0x00000087	[ 19] _asm_x64_mov_mem8_to_r64zx
0x100011A09	0x00000087	[ 19] _asm_x64_mov_mem16_to_r64zx
0x100011A90	0x0000007C	[ 19] _asm_x64_mov_mem32_to_r64zx
0x100011B0C	0x0000005B	[ 19] _asm_x64_mov_mem64_to_r64
0x100011B67	0x00000075	[ 19] _asm_x64_mov_i32_to_r64
0x100011BDC	0x0000005A	[ 19] _asm_x64_mov_i64_to_r64
0x100011C36	0x00000019	[ 19] _asm_x64_mov_i64_to_r64_optimised
0x100011C4F	0x0000000F	[ 19] _asm_x64_and_r64_r64
0x100011C5E	0x0000000F	[ 19] _asm_x64_or_r64_r64
0x100011C6D	0x0000000F	[ 19] _asm_x64_xor_r64_r64
0x100011C7C	0x00000038	[ 19] _asm_x64_shl_r64_cl
0x100011CB4	0x00000038	[ 19] _asm_x64_shr_r64_cl
0x100011CEC	0x00000035	[ 19] _asm_x64_sar_r64_cl
0x100011D21	0x0000000F	[ 19] _asm_x64_add_r64_r64
0x100011D30	0x0000000F	[ 19] _asm_x64_sub_r64_r64
0x100011D3F	0x0000006A	[ 19] _asm_x64_mul_r64_r64
0x100011DA9	0x00000015	[ 19] _asm_x64_cmp_r64_with_r64
0x100011DBE	0x00000078	[ 19] _asm_x64_test_r8_with_r8
0x100011E36	0x00000015	[ 19] _asm_x64_test_r64_with_r64
0x100011E4B	0x00000058	[ 19] _asm_x64_setcc_r8
0x100011EA3	0x0000004E	[ 19] _asm_x64_jmp_reg
0x100011EF1	0x000000B5	[ 19] _asm_x64_jmp_label
0x100011FA6	0x000000C3	[ 19] _asm_x64_jcc_label
0x100012069	0x000000A2	[ 19] _asm_x64_entry
0x10001210B	0x00000076	[ 19] _asm_x64_sub_r64_i32
0x100012181	0x0000008A	[ 19] _asm_x64_exit
0x10001220B	0x00000018	[ 19] _asm_x64_mov_local_to_r64
0x100012223	0x00000016	[ 19] _asm_x64_mov_r64_to_local
0x100012239	0x00000094	[ 19] _asm_x64_mov_local_addr_to_r64
0x1000122CD	0x00000091	[ 19] _asm_x64_mov_reg_pcrel
0x10001235E	0x00000065	[ 19] _asm_x64_call_ind
0x1000123C4	0x0000008A	[ 20] _emit_native_x64_new
0x10001244E	0x0000004C	[ 20] _emit_native_x64_free
0x10001249A	0x0000084F	[ 20] _emit_native_start_pass
0x100012CE9	0x00000510	[ 20] _emit_native_end_pass
0x1000131F9	0x00000060	[ 20] _emit_native_adjust_stack_size
0x100013259	0x00000006	[ 20] _emit_native_set_source_line
0x10001325F	0x0000009A	[ 20] _emit_native_load_local
0x1000132F9	0x0000006D	[ 20] _emit_native_load_global
0x100013366	0x000000D2	[ 20] _emit_native_store_local
0x100013438	0x00000128	[ 20] _emit_native_store_global
0x100013560	0x0000003C	[ 20] _emit_native_delete_local
0x10001359C	0x00000018	[ 20] _emit_native_delete_global
0x1000135B4	0x000000AF	[ 20] _emit_native_label_assign
0x100013663	0x0000018E	[ 20] _emit_native_import
0x1000137F1	0x00000039	[ 20] _emit_native_load_const_tok
0x10001382A	0x00000012	[ 20] _emit_native_load_const_small_int
0x10001383C	0x00000036	[ 20] _emit_native_load_const_str
0x100013872	0x00000031	[ 20] _emit_native_load_const_obj
0x1000138A3	0x0000000E	[ 20] _emit_native_load_null
0x1000138B1	0x000000C8	[ 20] _emit_native_load_method
0x100013979	0x00000033	[ 20] _emit_native_load_build_class
0x1000139AC	0x00000A88	[ 20] _emit_native_subscr
0x100014434	0x000001ED	[ 20] _emit_native_attr
0x100014621	0x00000063	[ 20] _emit_native_dup_top
0x100014684	0x00000072	[ 20] _emit_native_dup_top_two
0x1000146F6	0x00000011	[ 20] _emit_native_pop_top
0x100014707	0x00000052	[ 20] _emit_native_rot_two
0x100014759	0x0000007B	[ 20] _emit_native_rot_three
0x1000147D4	0x00000031	[ 20] _emit_native_jump
0x100014805	0x0000000F	[ 20] _emit_native_pop_jump_if
0x100014814	0x0000000C	[ 20] _emit_native_jump_if_or_pop
0x100014820	0x0000014F	[ 20] _emit_native_unwind_jump
0x10001496F	0x000001C1	[ 20] _emit_native_setup_block
0x100014B30	0x00000228	[ 20] _emit_native_with_cleanup
0x100014D58	0x00000159	[ 20] _emit_native_end_finally
0x100014EB1	0x000000DE	[ 20] _emit_native_get_iter
0x100014F8F	0x00000078	[ 20] _emit_native_for_iter
0x100015007	0x00000011	[ 20] _emit_native_for_iter_end
0x100015018	0x00000067	[ 20] _emit_native_pop_except_jump
0x10001507F	0x000000A8	[ 20] _emit_native_unary_op
0x100015127	0x00000471	[ 20] _emit_native_binary_op
0x100015598	0x000001E1	[ 20] _emit_native_build
0x100015779	0x000000D2	[ 20] _emit_native_store_map
0x10001584B	0x000001A1	[ 20] _emit_native_store_comp
0x1000159EC	0x00000089	[ 20] _emit_native_unpack_sequence
0x100015A75	0x0000009F	[ 20] _emit_native_unpack_ex
0x100015B14	0x000000AF	[ 20] _emit_native_make_function
0x100015BC3	0x00000127	[ 20] _emit_native_make_closure
0x100015CEA	0x00000216	[ 20] _emit_native_call_function
0x100015F00	0x00000081	[ 20] _emit_native_call_method
0x100015F81	0x00000207	[ 20] _emit_native_return_value
0x100016188	0x000000A9	[ 20] _emit_native_raise_varargs
0x100016231	0x00000293	[ 20] _emit_native_yield
0x1000164C4	0x00000038	[ 20] _emit_native_start_except_handler
0x1000164FC	0x00000011	[ 20] _emit_native_end_except_handler
0x10001650D	0x00000047	[ 20] _emit_call_with_imm_arg
0x100016554	0x00000034	[ 20] _emit_native_mov_state_reg
0x100016588	0x0000039F	[ 20] _emit_native_global_exc_entry
0x100016927	0x0000005F	[ 20] _need_reg_all
0x100016986	0x00000032	[ 20] _emit_native_mov_reg_state
0x1000169B8	0x0000003C	[ 20] _ensure_extra_stack
0x1000169F4	0x0000006F	[ 20] _adjust_stack
0x100016A63	0x000000A4	[ 20] _emit_native_load_fast
0x100016B07	0x00000051	[ 20] _emit_post_push_reg
0x100016B58	0x0000007C	[ 20] _need_reg_single
0x100016BD4	0x00000077	[ 20] _emit_pre_pop_reg_flexible
0x100016C4B	0x000000A6	[ 20] _emit_access_stack
0x100016CF1	0x000000BD	[ 20] _load_reg_stack_imm
0x100016DAE	0x00000051	[ 20] _emit_post_push_imm
0x100016DFF	0x00000065	[ 20] _emit_call_with_qstr_arg
0x100016E64	0x00000107	[ 20] _emit_native_store_fast
0x100016F6B	0x0000007D	[ 20] _need_stack_settled
0x100016FE8	0x000000A2	[ 20] _emit_native_leave_exc_stack
0x10001708A	0x0000005D	[ 20] _emit_pre_pop_reg_reg
0x1000170E7	0x00000074	[ 20] _emit_load_reg_with_object
0x10001715B	0x00000179	[ 20] _emit_get_stack_pointer_to_reg_for_pop
0x1000172D4	0x0000007D	[ 20] _emit_get_stack_pointer_to_reg_for_push
0x100017351	0x00000055	[ 20] _emit_native_mov_reg_state_addr
0x1000173A6	0x0000008E	[ 20] _emit_pre_pop_reg_reg_reg
0x100017434	0x0000019A	[ 20] _emit_native_jump_helper
0x1000175CE	0x0000009A	[ 20] _emit_native_push_exc_stack
0x100017668	0x0000005D	[ 20] _emit_call_with_2_imm_args
0x1000176C5	0x00000073	[ 20] _emit_load_reg_with_child
0x100017738	0x0000006D	[ 20] _emit_fold_stack_top
0x1000177A5	0x0000002F	[ 21] _asm_x86_mov_r32_r32
0x1000177D4	0x00000042	[ 21] _asm_x86_mov_r8_to_mem8
0x100017816	0x000000D4	[ 21] _asm_x86_write_r32_disp
0x1000178EA	0x00000044	[ 21] _asm_x86_mov_r16_to_mem16
0x10001792E	0x00000042	[ 21] _asm_x86_mov_r32_to_mem32
0x100017970	0x00000044	[ 21] _asm_x86_mov_mem8_to_r32zx
0x1000179B4	0x00000044	[ 21] _asm_x86_mov_mem16_to_r32zx
0x1000179F8	0x00000042	[ 21] _asm_x86_mov_mem32_to_r32
0x100017A3A	0x00000050	[ 21] _asm_x86_mov_i32_to_r32
0x100017A8A	0x0000002F	[ 21] _asm_x86_and_r32_r32
0x100017AB9	0x0000002F	[ 21] _asm_x86_or_r32_r32
0x100017AE8	0x0000002F	[ 21] _asm_x86_xor_r32_r32
0x100017B17	0x00000027	[ 21] _asm_x86_shl_r32_cl
0x100017B3E	0x00000027	[ 21] _asm_x86_shr_r32_cl
0x100017B65	0x00000027	[ 21] _asm_x86_sar_r32_cl
0x100017B8C	0x0000002F	[ 21] _asm_x86_add_r32_r32
0x100017BBB	0x0000002F	[ 21] _asm_x86_sub_r32_r32
0x100017BEA	0x00000031	[ 21] _asm_x86_mul_r32_r32
0x100017C1B	0x0000002F	[ 21] _asm_x86_cmp_r32_with_r32
0x100017C4A	0x0000002F	[ 21] _asm_x86_test_r8_with_r8
0x100017C79	0x0000002F	[ 21] _asm_x86_test_r32_with_r32
0x100017CA8	0x00000032	[ 21] _asm_x86_setcc_r8
0x100017CDA	0x00000027	[ 21] _asm_x86_jmp_reg
0x100017D01	0x000000B5	[ 21] _asm_x86_jmp_label
0x100017DB6	0x000000C3	[ 21] _asm_x86_jcc_label
0x100017E79	0x0000009E	[ 21] _asm_x86_entry
0x100017F17	0x0000006E	[ 21] _asm_x86_sub_r32_i32
0x100017F85	0x00000086	[ 21] _asm_x86_exit
0x10001800B	0x0000001B	[ 21] _asm_x86_mov_arg_to_r32
0x100018026	0x00000018	[ 21] _asm_x86_mov_local_to_r32
0x10001803E	0x00000016	[ 21] _asm_x86_mov_r32_to_local
0x100018054	0x00000072	[ 21] _asm_x86_mov_local_addr_to_r32
0x1000180C6	0x000000C5	[ 21] _asm_x86_mov_reg_pcrel
0x10001818B	0x0000017D	[ 21] _asm_x86_call_ind
0x100018308	0x0000008A	[ 22] _emit_native_x86_new
0x100018392	0x0000004C	[ 22] _emit_native_x86_free
0x1000183DE	0x0000089A	[ 22] _emit_native_start_pass
0x100018C78	0x0000050E	[ 22] _emit_native_end_pass
0x100019186	0x00000060	[ 22] _emit_native_adjust_stack_size
0x1000191E6	0x00000006	[ 22] _emit_native_set_source_line
0x1000191EC	0x0000009A	[ 22] _emit_native_load_local
0x100019286	0x0000006A	[ 22] _emit_native_load_global
0x1000192F0	0x000000D2	[ 22] _emit_native_store_local
0x1000193C2	0x00000122	[ 22] _emit_native_store_global
0x1000194E4	0x0000003C	[ 22] _emit_native_delete_local
0x100019520	0x00000015	[ 22] _emit_native_delete_global
0x100019535	0x000000AF	[ 22] _emit_native_label_assign
0x1000195E4	0x0000018A	[ 22] _emit_native_import
0x10001976E	0x00000039	[ 22] _emit_native_load_const_tok
0x1000197A7	0x00000012	[ 22] _emit_native_load_const_small_int
0x1000197B9	0x00000036	[ 22] _emit_native_load_const_str
0x1000197EF	0x00000031	[ 22] _emit_native_load_const_obj
0x100019820	0x0000000E	[ 22] _emit_native_load_null
0x10001982E	0x000000C2	[ 22] _emit_native_load_method
0x1000198F0	0x00000035	[ 22] _emit_native_load_build_class
0x100019925	0x00000A33	[ 22] _emit_native_subscr
0x10001A358	0x000001DE	[ 22] _emit_native_attr
0x10001A536	0x00000063	[ 22] _emit_native_dup_top
0x10001A599	0x00000072	[ 22] _emit_native_dup_top_two
0x10001A60B	0x00000011	[ 22] _emit_native_pop_top
0x10001A61C	0x00000052	[ 22] _emit_native_rot_two
0x10001A66E	0x0000007B	[ 22] _emit_native_rot_three
0x10001A6E9	0x00000031	[ 22] _emit_native_jump
0x10001A71A	0x0000000F	[ 22] _emit_native_pop_jump_if
0x10001A729	0x0000000C	[ 22] _emit_native_jump_if_or_pop
0x10001A735	0x0000014F	[ 22] _emit_native_unwind_jump
0x10001A884	0x000001BB	[ 22] _emit_native_setup_block
0x10001AA3F	0x0000020B	[ 22] _emit_native_with_cleanup
0x10001AC4A	0x0000015B	[ 22] _emit_native_end_finally
0x10001ADA5	0x000000E5	[ 22] _emit_native_get_iter
0x10001AE8A	0x0000007A	[ 22] _emit_native_for_iter
0x10001AF04	0x00000011	[ 22] _emit_native_for_iter_end
0x10001AF15	0x00000067	[ 22] _emit_native_pop_except_jump
0x10001AF7C	0x000000A5	[ 22] _emit_native_unary_op
0x10001B021	0x0000046B	[ 22] _emit_native_binary_op
0x10001B48C	0x000001E0	[ 22] _emit_native_build
0x10001B66C	0x000000D7	[ 22] _emit_native_store_map
0x10001B743	0x000001A3	[ 22] _emit_native_store_comp
0x10001B8E6	0x00000086	[ 22] _emit_native_unpack_sequence
0x10001B96C	0x0000009C	[ 22] _emit_native_unpack_ex
0x10001BA08	0x000000B4	[ 22] _emit_native_make_function
0x10001BABC	0x0000011E	[ 22] _emit_native_make_closure
0x10001BBDA	0x00000210	[ 22] _emit_native_call_function
0x10001BDEA	0x00000081	[ 22] _emit_native_call_method
0x10001BE6B	0x000001F7	[ 22] _emit_native_return_value
0x10001C062	0x000000AB	[ 22] _emit_native_raise_varargs
0x10001C10D	0x00000297	[ 22] _emit_native_yield
0x10001C3A4	0x00000038	[ 22] _emit_native_start_except_handler
0x10001C3DC	0x00000011	[ 22] _emit_native_end_except_handler
0x10001C3ED	0x00000052	[ 22] _emit_call_with_imm_arg
0x10001C43F	0x00000034	[ 22] _emit_native_mov_state_reg
0x10001C473	0x0000039E	[ 22] _emit_native_global_exc_entry
0x10001C811	0x0000005F	[ 22] _need_reg_all
0x10001C870	0x00000032	[ 22] _emit_native_mov_reg_state
0x10001C8A2	0x0000003C	[ 22] _ensure_extra_stack
0x10001C8DE	0x0000006F	[ 22] _adjust_stack
0x10001C94D	0x000000A4	[ 22] _emit_native_load_fast
0x10001C9F1	0x00000051	[ 22] _emit_post_push_reg
0x10001CA42	0x0000007C	[ 22] _need_reg_single
0x10001CABE	0x00000077	[ 22] _emit_pre_pop_reg_flexible
0x10001CB35	0x000000A6	[ 22] _emit_access_stack
0x10001CBDB	0x000000B8	[ 22] _load_reg_stack_imm
0x10001CC93	0x00000051	[ 22] _emit_post_push_imm
0x10001CCE4	0x00000070	[ 22] _emit_call_with_qstr_arg
0x10001CD54	0x00000107	[ 22] _emit_native_store_fast
0x10001CE5B	0x0000007D	[ 22] _need_stack_settled
0x10001CED8	0x000000A2	[ 22] _emit_native_leave_exc_stack
0x10001CF7A	0x0000005D	[ 22] _emit_pre_pop_reg_reg
0x10001CFD7	0x00000074	[ 22] _emit_load_reg_with_object
0x10001D04B	0x00000176	[ 22] _emit_get_stack_pointer_to_reg_for_pop
0x10001D1C1	0x0000007D	[ 22] _emit_get_stack_pointer_to_reg_for_push
0x10001D23E	0x00000054	[ 22] _emit_native_mov_reg_state_addr
0x10001D292	0x0000008E	[ 22] _emit_pre_pop_reg_reg_reg
0x10001D320	0x0000019C	[ 22] _emit_native_jump_helper
0x10001D4BC	0x0000009A	[ 22] _emit_native_push_exc_stack
0x10001D556	0x00000065	[ 22] _emit_call_with_2_imm_args
0x10001D5BB	0x00000070	[ 22] _emit_load_reg_with_child
0x10001D62B	0x0000006A	[ 22] _emit_fold_stack_top
0x10001D695	0x000001D3	[ 23] _asm_thumb_entry
0x10001D868	0x0000002E	[ 23] _asm_thumb_op32
0x10001D896	0x00000021	[ 23] _asm_thumb_op16
0x10001D8B7	0x000000C3	[ 23] _asm_thumb_exit
0x10001D97A	0x00000081	[ 23] _asm_thumb_format_4
0x10001D9FB	0x00000052	[ 23] _asm_thumb_mov_reg_reg
0x10001DA4D	0x00000087	[ 23] _asm_thumb_mov_reg_i16
0x10001DAD4	0x0000008E	[ 23] _asm_thumb_b_n_label
0x10001DB62	0x00000126	[ 23] _asm_thumb_bcc_nw_label
0x10001DC88	0x000000A5	[ 23] _asm_thumb_bl_label
0x10001DD2D	0x0000014A	[ 23] _asm_thumb_mov_reg_i32
0x10001DE77	0x000001B7	[ 23] _asm_thumb_mov_reg_i32_optimised
0x10001E02E	0x000000A1	[ 23] _asm_thumb_mov_rlo_i16
0x10001E0CF	0x00000064	[ 23] _asm_thumb_mov_local_reg
0x10001E133	0x00000042	[ 23] _asm_thumb_mov_local_check
0x10001E175	0x00000066	[ 23] _asm_thumb_mov_reg_local
0x10001E1DB	0x00000075	[ 23] _asm_thumb_mov_reg_local_addr
0x10001E250	0x000000F0	[ 23] _asm_thumb_mov_reg_pcrel
0x10001E340	0x000000F3	[ 23] _asm_thumb_ldr_reg_reg_i12_optimised
0x10001E433	0x000001F3	[ 23] _asm_thumb_add_reg_reg_offset
0x10001E626	0x000000F2	[ 23] _asm_thumb_ldrh_reg_reg_i12_optimised
0x10001E718	0x0000012A	[ 23] _asm_thumb_b_label
0x10001E842	0x0000014D	[ 23] _asm_thumb_bcc_label
0x10001E98F	0x0000005E	[ 23] _asm_thumb_bcc_rel9
0x10001E9ED	0x00000062	[ 23] _asm_thumb_b_rel12
0x10001EA4F	0x0000003D	[ 23] _asm_thumb_bl_ind
0x10001EA8C	0x0000008A	[ 24] _emit_native_thumb_new
0x10001EB16	0x0000004C	[ 24] _emit_native_thumb_free
0x10001EB62	0x000007EA	[ 24] _emit_native_start_pass
0x10001F34C	0x0000050B	[ 24] _emit_native_end_pass
0x10001F857	0x00000060	[ 24] _emit_native_adjust_stack_size
0x10001F8B7	0x00000006	[ 24] _emit_native_set_source_line
0x10001F8BD	0x0000009A	[ 24] _emit_native_load_local
0x10001F957	0x0000006A	[ 24] _emit_native_load_global
0x10001F9C1	0x000000DA	[ 24] _emit_native_store_local
0x10001FA9B	0x00000122	[ 24] _emit_native_store_global
0x10001FBBD	0x0000003C	[ 24] _emit_native_delete_local
0x10001FBF9	0x00000015	[ 24] _emit_native_delete_global
0x10001FC0E	0x000000AF	[ 24] _emit_native_label_assign
0x10001FCBD	0x00000188	[ 24] _emit_native_import
0x10001FE45	0x00000039	[ 24] _emit_native_load_const_tok
0x10001FE7E	0x00000012	[ 24] _emit_native_load_const_small_int
0x10001FE90	0x00000036	[ 24] _emit_native_load_const_str
0x10001FEC6	0x00000031	[ 24] _emit_native_load_const_obj
0x10001FEF7	0x0000000E	[ 24] _emit_native_load_null
0x10001FF05	0x000000C2	[ 24] _emit_native_load_method
0x10001FFC7	0x00000036	[ 24] _emit_native_load_build_class
0x10001FFFD	0x00000B37	[ 24] _emit_native_subscr
0x100020B34	0x000001E3	[ 24] _emit_native_attr
0x100020D17	0x00000063	[ 24] _emit_native_dup_top
0x100020D7A	0x00000072	[ 24] _emit_native_dup_top_two
0x100020DEC	0x00000011	[ 24] _emit_native_pop_top
0x100020DFD	0x00000052	[ 24] _emit_native_rot_two
0x100020E4F	0x0000007B	[ 24] _emit_native_rot_three
0x100020ECA	0x00000031	[ 24] _emit_native_jump
0x100020EFB	0x0000000F	[ 24] _emit_native_pop_jump_if
0x100020F0A	0x0000000C	[ 24] _emit_native_jump_if_or_pop
0x100020F16	0x00000153	[ 24] _emit_native_unwind_jump
0x100021069	0x000001BB	[ 24] _emit_native_setup_block
0x100021224	0x00000205	[ 24] _emit_native_with_cleanup
0x100021429	0x0000015B	[ 24] _emit_native_end_finally
0x100021584	0x000000E1	[ 24] _emit_native_get_iter
0x100021665	0x00000076	[ 24] _emit_native_for_iter
0x1000216DB	0x00000011	[ 24] _emit_native_for_iter_end
0x1000216EC	0x00000067	[ 24] _emit_native_pop_except_jump
0x100021753	0x000000A5	[ 24] _emit_native_unary_op
0x1000217F8	0x000004B8	[ 24] _emit_native_binary_op
0x100021CB0	0x000001DE	[ 24] _emit_native_build
0x100021E8E	0x000000D5	[ 24] _emit_native_store_map
0x100021F63	0x000001A1	[ 24] _emit_native_store_comp
0x100022104	0x00000086	[ 24] _emit_native_unpack_sequence
0x10002218A	0x0000009C	[ 24] _emit_native_unpack_ex
0x100022226	0x000000B2	[ 24] _emit_native_make_function
0x1000222D8	0x0000011A	[ 24] _emit_native_make_closure
0x1000223F2	0x00000210	[ 24] _emit_native_call_function
0x100022602	0x00000081	[ 24] _emit_native_call_method
0x100022683	0x000001F5	[ 24] _emit_native_return_value
0x100022878	0x000000A9	[ 24] _emit_native_raise_varargs
0x100022921	0x00000294	[ 24] _emit_native_yield
0x100022BB5	0x00000038	[ 24] _emit_native_start_except_handler
0x100022BED	0x00000011	[ 24] _emit_native_end_except_handler
0x100022BFE	0x0000004A	[ 24] _emit_call_with_imm_arg
0x100022C48	0x00000032	[ 24] _emit_native_mov_state_reg
0x100022C7A	0x00000390	[ 24] _emit_native_global_exc_entry
0x10002300A	0x0000005F	[ 24] _need_reg_all
0x100023069	0x0000002D	[ 24] _emit_native_mov_reg_state
0x100023096	0x0000003C	[ 24] _ensure_extra_stack
0x1000230D2	0x0000006F	[ 24] _adjust_stack
0x100023141	0x000000A4	[ 24] _emit_native_load_fast
0x1000231E5	0x00000051	[ 24] _emit_post_push_reg
0x100023236	0x0000007C	[ 24] _need_reg_single
0x1000232B2	0x00000077	[ 24] _emit_pre_pop_reg_flexible
0x100023329	0x000000A6	[ 24] _emit_access_stack
0x1000233CF	0x000000A9	[ 24] _load_reg_stack_imm
0x100023478	0x00000051	[ 24] _emit_post_push_imm
0x1000234C9	0x00000066	[ 24] _emit_call_with_qstr_arg
0x10002352F	0x00000107	[ 24] _emit_native_store_fast
0x100023636	0x0000007D	[ 24] _need_stack_settled
0x1000236B3	0x000000A7	[ 24] _emit_native_leave_exc_stack
0x10002375A	0x0000005D	[ 24] _emit_pre_pop_reg_reg
0x1000237B7	0x00000070	[ 24] _emit_load_reg_with_object
0x100023827	0x00000176	[ 24] _emit_get_stack_pointer_to_reg_for_pop
0x10002399D	0x0000007D	[ 24] _emit_get_stack_pointer_to_reg_for_push
0x100023A1A	0x00000059	[ 24] _emit_native_mov_reg_state_addr
0x100023A73	0x0000008E	[ 24] _emit_pre_pop_reg_reg_reg
0x100023B01	0x00000196	[ 24] _emit_native_jump_helper
0x100023C97	0x0000009B	[ 24] _emit_native_push_exc_stack
0x100023D32	0x0000005D	[ 24] _emit_call_with_2_imm_args
0x100023D8F	0x0000006C	[ 24] _emit_load_reg_with_child
0x100023DFB	0x0000006A	[ 24] _emit_fold_stack_top
0x100023E68	0x00000054	[ 25] _emit_inline_thumb_new
0x100023EBC	0x0000002A	[ 25] _emit_inline_thumb_free
0x100023EE6	0x00000050	[ 25] _emit_inline_thumb_start_pass
0x100023F36	0x0000000A	[ 25] _emit_inline_thumb_end_pass
0x100023F40	0x000000BB	[ 25] _emit_inline_thumb_count_params
0x100023FFB	0x00000057	[ 25] _emit_inline_thumb_label
0x100024052	0x00001116	[ 25] _emit_inline_thumb_op
0x100025168	0x000000AD	[ 25] _get_arg_vfpreg
0x100025215	0x000000C6	[ 25] _get_arg_reg
0x1000252DB	0x00000078	[ 25] _get_arg_addr
0x100025353	0x0000007E	[ 25] _get_arg_i
0x1000253D1	0x0000007B	[ 25] _get_arg_label
0x10002544C	0x00000196	[ 25] _get_arg_reglist
0x1000255E2	0x000000A7	[ 25] _get_arg_special_reg
0x100025689	0x00000094	[ 26] _asm_arm_entry
0x10002571D	0x00000063	[ 26] _asm_arm_exit
0x100025780	0x0000002E	[ 26] _asm_arm_mov_reg_reg
0x1000257AE	0x0000006B	[ 26] _asm_arm_mov_reg_i32
0x100025819	0x00000071	[ 26] _asm_arm_mov_reg_i32_optimised
0x10002588A	0x00000032	[ 26] _asm_arm_mov_local_reg
0x1000258BC	0x00000032	[ 26] _asm_arm_mov_reg_local
0x1000258EE	0x00000031	[ 26] _asm_arm_cmp_reg_i8
0x10002591F	0x0000002E	[ 26] _asm_arm_cmp_reg_reg
0x10002594D	0x00000060	[ 26] _asm_arm_setcc_reg
0x1000259AD	0x00000041	[ 26] _asm_arm_add_reg_reg_reg
0x1000259EE	0x00000041	[ 26] _asm_arm_sub_reg_reg_reg
0x100025A2F	0x00000064	[ 26] _asm_arm_mul_reg_reg_reg
0x100025A93	0x00000041	[ 26] _asm_arm_and_reg_reg_reg
0x100025AD4	0x00000041	[ 26] _asm_arm_eor_reg_reg_reg
0x100025B15	0x00000041	[ 26] _asm_arm_orr_reg_reg_reg
0x100025B56	0x00000033	[ 26] _asm_arm_mov_reg_local_addr
0x100025B89	0x000000C6	[ 26] _asm_arm_mov_reg_pcrel
0x100025C4F	0x00000036	[ 26] _asm_arm_lsl_reg_reg
0x100025C85	0x00000036	[ 26] _asm_arm_lsr_reg_reg
0x100025CBB	0x00000036	[ 26] _asm_arm_asr_reg_reg
0x100025CF1	0x00000041	[ 26] _asm_arm_ldr_reg_reg
0x100025D32	0x00000032	[ 26] _asm_arm_ldrh_reg_reg
0x100025D64	0x00000052	[ 26] _asm_arm_ldrh_reg_reg_offset
0x100025DB6	0x00000032	[ 26] _asm_arm_ldrb_reg_reg
0x100025DE8	0x00000041	[ 26] _asm_arm_str_reg_reg
0x100025E29	0x00000032	[ 26] _asm_arm_strh_reg_reg
0x100025E5B	0x00000032	[ 26] _asm_arm_strb_reg_reg
0x100025E8D	0x00000041	[ 26] _asm_arm_str_reg_reg_reg
0x100025ECE	0x0000005C	[ 26] _asm_arm_strh_reg_reg_reg
0x100025F2A	0x00000041	[ 26] _asm_arm_strb_reg_reg_reg
0x100025F6B	0x0000009A	[ 26] _asm_arm_bcc_label
0x100026005	0x00000011	[ 26] _asm_arm_b_label
0x100026016	0x0000006A	[ 26] _asm_arm_bl_ind
0x100026080	0x00000026	[ 26] _asm_arm_bx_reg
0x1000260A8	0x0000008A	[ 27] _emit_native_arm_new
0x100026132	0x0000004C	[ 27] _emit_native_arm_free
0x10002617E	0x00000810	[ 27] _emit_native_start_pass
0x10002698E	0x0000050A	[ 27] _emit_native_end_pass
0x100026E98	0x00000060	[ 27] _emit_native_adjust_stack_size
0x100026EF8	0x00000006	[ 27] _emit_native_set_source_line
0x100026EFE	0x0000009A	[ 27] _emit_native_load_local
0x100026F98	0x0000006A	[ 27] _emit_native_load_global
0x100027002	0x000000D2	[ 27] _emit_native_store_local
0x1000270D4	0x00000122	[ 27] _emit_native_store_global
0x1000271F6	0x0000003C	[ 27] _emit_native_delete_local
0x100027232	0x00000015	[ 27] _emit_native_delete_global
0x100027247	0x000000AF	[ 27] _emit_native_label_assign
0x1000272F6	0x00000188	[ 27] _emit_native_import
0x10002747E	0x00000039	[ 27] _emit_native_load_const_tok
0x1000274B7	0x00000012	[ 27] _emit_native_load_const_small_int
0x1000274C9	0x00000036	[ 27] _emit_native_load_const_str
0x1000274FF	0x00000031	[ 27] _emit_native_load_const_obj
0x100027530	0x0000000E	[ 27] _emit_native_load_null
0x10002753E	0x000000C2	[ 27] _emit_native_load_method
0x100027600	0x00000036	[ 27] _emit_native_load_build_class
0x100027636	0x00000996	[ 27] _emit_native_subscr
0x100027FCC	0x000001E3	[ 27] _emit_native_attr
0x1000281AF	0x00000063	[ 27] _emit_native_dup_top
0x100028212	0x00000072	[ 27] _emit_native_dup_top_two
0x100028284	0x00000011	[ 27] _emit_native_pop_top
0x100028295	0x00000052	[ 27] _emit_native_rot_two
0x1000282E7	0x0000007B	[ 27] _emit_native_rot_three
0x100028362	0x00000031	[ 27] _emit_native_jump
0x100028393	0x0000000F	[ 27] _emit_native_pop_jump_if
0x1000283A2	0x0000000C	[ 27] _emit_native_jump_if_or_pop
0x1000283AE	0x00000150	[ 27] _emit_native_unwind_jump
0x1000284FE	0x000001BB	[ 27] _emit_native_setup_block
0x1000286B9	0x00000203	[ 27] _emit_native_with_cleanup
0x1000288BC	0x00000157	[ 27] _emit_native_end_finally
0x100028A13	0x000000E1	[ 27] _emit_native_get_iter
0x100028AF4	0x00000075	[ 27] _emit_native_for_iter
0x100028B69	0x00000011	[ 27] _emit_native_for_iter_end
0x100028B7A	0x00000067	[ 27] _emit_native_pop_except_jump
0x100028BE1	0x000000A5	[ 27] _emit_native_unary_op
0x100028C86	0x00000452	[ 27] _emit_native_binary_op
0x1000290D8	0x000001DE	[ 27] _emit_native_build
0x1000292B6	0x000000D5	[ 27] _emit_native_store_map
0x10002938B	0x000001A1	[ 27] _emit_native_store_comp
0x10002952C	0x00000086	[ 27] _emit_native_unpack_sequence
0x1000295B2	0x0000009C	[ 27] _emit_native_unpack_ex
0x10002964E	0x000000B2	[ 27] _emit_native_make_function
0x100029700	0x0000011A	[ 27] _emit_native_make_closure
0x10002981A	0x00000210	[ 27] _emit_native_call_function
0x100029A2A	0x00000081	[ 27] _emit_native_call_method
0x100029AAB	0x000001F5	[ 27] _emit_native_return_value
0x100029CA0	0x000000A9	[ 27] _emit_native_raise_varargs
0x100029D49	0x00000293	[ 27] _emit_native_yield
0x100029FDC	0x00000038	[ 27] _emit_native_start_except_handler
0x10002A014	0x00000011	[ 27] _emit_native_end_except_handler
0x10002A025	0x0000004A	[ 27] _emit_call_with_imm_arg
0x10002A06F	0x00000032	[ 27] _emit_native_mov_state_reg
0x10002A0A1	0x0000038D	[ 27] _emit_native_global_exc_entry
0x10002A42E	0x0000005F	[ 27] _need_reg_all
0x10002A48D	0x00000030	[ 27] _emit_native_mov_reg_state
0x10002A4BD	0x0000003C	[ 27] _ensure_extra_stack
0x10002A4F9	0x0000006F	[ 27] _adjust_stack
0x10002A568	0x000000A4	[ 27] _emit_native_load_fast
0x10002A60C	0x00000051	[ 27] _emit_post_push_reg
0x10002A65D	0x0000007C	[ 27] _need_reg_single
0x10002A6D9	0x00000077	[ 27] _emit_pre_pop_reg_flexible
0x10002A750	0x000000A6	[ 27] _emit_access_stack
0x10002A7F6	0x000000AE	[ 27] _load_reg_stack_imm
0x10002A8A4	0x00000051	[ 27] _emit_post_push_imm
0x10002A8F5	0x00000068	[ 27] _emit_call_with_qstr_arg
0x10002A95D	0x00000107	[ 27] _emit_native_store_fast
0x10002AA64	0x0000007D	[ 27] _need_stack_settled
0x10002AAE1	0x000000A4	[ 27] _emit_native_leave_exc_stack
0x10002AB85	0x0000005D	[ 27] _emit_pre_pop_reg_reg
0x10002ABE2	0x00000074	[ 27] _emit_load_reg_with_object
0x10002AC56	0x00000176	[ 27] _emit_get_stack_pointer_to_reg_for_pop
0x10002ADCC	0x0000007D	[ 27] _emit_get_stack_pointer_to_reg_for_push
0x10002AE49	0x00000053	[ 27] _emit_native_mov_reg_state_addr
0x10002AE9C	0x0000008E	[ 27] _emit_pre_pop_reg_reg_reg
0x10002AF2A	0x0000019A	[ 27] _emit_native_jump_helper
0x10002B0C4	0x0000009B	[ 27] _emit_native_push_exc_stack
0x10002B15F	0x0000005D	[ 27] _emit_call_with_2_imm_args
0x10002B1BC	0x00000070	[ 27] _emit_load_reg_with_child
0x10002B22C	0x0000006A	[ 27] _emit_fold_stack_top
0x10002B296	0x00000013	[ 28] _asm_xtensa_end_pass
0x10002B2A9	0x00000129	[ 28] _asm_xtensa_entry
0x10002B3D2	0x000000E7	[ 28] _asm_xtensa_exit
0x10002B4B9	0x000000AD	[ 28] _asm_xtensa_entry_win
0x10002B566	0x0000003B	[ 28] _asm_xtensa_exit_win
0x10002B5A1	0x00000021	[ 28] _asm_xtensa_op16
0x10002B5C2	0x00000029	[ 28] _asm_xtensa_op24
0x10002B5EB	0x00000066	[ 28] _asm_xtensa_j_label
0x10002B651	0x000000AC	[ 28] _asm_xtensa_bccz_reg_label
0x10002B6FD	0x000000BE	[ 28] _asm_xtensa_bcc_reg_reg_label
0x10002B7BB	0x00000095	[ 28] _asm_xtensa_setcc_reg_reg_reg
0x10002B850	0x0000008D	[ 28] _asm_xtensa_mov_reg_i32
0x10002B8DD	0x00000065	[ 28] _asm_xtensa_mov_reg_i32_optimised
0x10002B942	0x0000003F	[ 28] _asm_xtensa_mov_local_reg
0x10002B981	0x0000003F	[ 28] _asm_xtensa_mov_reg_local
0x10002B9C0	0x000000B9	[ 28] _asm_xtensa_mov_reg_local_addr
0x10002BA79	0x000000EF	[ 28] _asm_xtensa_mov_reg_pcrel
0x10002BB68	0x0000009E	[ 28] _asm_xtensa_l32i_optimised
0x10002BC06	0x0000009E	[ 28] _asm_xtensa_s32i_optimised
0x10002BCA4	0x00000039	[ 28] _asm_xtensa_call_ind
0x10002BCDD	0x0000003C	[ 28] _asm_xtensa_call_ind_win
0x10002BD1C	0x0000008A	[ 29] _emit_native_xtensa_new
0x10002BDA6	0x0000004C	[ 29] _emit_native_xtensa_free
0x10002BDF2	0x0000080D	[ 29] _emit_native_start_pass
0x10002C5FF	0x00000500	[ 29] _emit_native_end_pass
0x10002CAFF	0x00000060	[ 29] _emit_native_adjust_stack_size
0x10002CB5F	0x00000006	[ 29] _emit_native_set_source_line
0x10002CB65	0x000000A3	[ 29] _emit_native_load_local
0x10002CC08	0x00000070	[ 29] _emit_native_load_global
0x10002CC78	0x000000D5	[ 29] _emit_native_store_local
0x10002CD4D	0x00000126	[ 29] _emit_native_store_global
0x10002CE73	0x0000003C	[ 29] _emit_native_delete_local
0x10002CEAF	0x00000018	[ 29] _emit_native_delete_global
0x10002CEC7	0x000000B5	[ 29] _emit_native_label_assign
0x10002CF7C	0x0000018F	[ 29] _emit_native_import
0x10002D10B	0x00000039	[ 29] _emit_native_load_const_tok
0x10002D144	0x00000012	[ 29] _emit_native_load_const_small_int
0x10002D156	0x0000003C	[ 29] _emit_native_load_const_str
0x10002D192	0x00000037	[ 29] _emit_native_load_const_obj
0x10002D1C9	0x0000000E	[ 29] _emit_native_load_null
0x10002D1D7	0x000000C8	[ 29] _emit_native_load_method
0x10002D29F	0x00000034	[ 29] _emit_native_load_build_class
0x10002D2D3	0x00000AA1	[ 29] _emit_native_subscr
0x10002DD74	0x000001E9	[ 29] _emit_native_attr
0x10002DF5D	0x00000063	[ 29] _emit_native_dup_top
0x10002DFC0	0x0000007B	[ 29] _emit_native_dup_top_two
0x10002E03B	0x00000011	[ 29] _emit_native_pop_top
0x10002E04C	0x00000058	[ 29] _emit_native_rot_two
0x10002E0A4	0x00000081	[ 29] _emit_native_rot_three
0x10002E125	0x00000031	[ 29] _emit_native_jump
0x10002E156	0x0000000F	[ 29] _emit_native_pop_jump_if
0x10002E165	0x0000000C	[ 29] _emit_native_jump_if_or_pop
0x10002E171	0x00000161	[ 29] _emit_native_unwind_jump
0x10002E2D2	0x000001C4	[ 29] _emit_native_setup_block
0x10002E496	0x000001F7	[ 29] _emit_native_with_cleanup
0x10002E68D	0x00000150	[ 29] _emit_native_end_finally
0x10002E7DD	0x000000D9	[ 29] _emit_native_get_iter
0x10002E8B6	0x0000006B	[ 29] _emit_native_for_iter
0x10002E921	0x00000011	[ 29] _emit_native_for_iter_end
0x10002E932	0x0000006D	[ 29] _emit_native_pop_except_jump
0x10002E99F	0x000000AB	[ 29] _emit_native_unary_op
0x10002EA4A	0x00000496	[ 29] _emit_native_binary_op
0x10002EEE0	0x000001E2	[ 29] _emit_native_build
0x10002F0C2	0x000000D3	[ 29] _emit_native_store_map
0x10002F195	0x0000019F	[ 29] _emit_native_store_comp
0x10002F334	0x00000089	[ 29] _emit_native_unpack_sequence
0x10002F3BD	0x0000009F	[ 29] _emit_native_unpack_ex
0x10002F45C	0x000000B0	[ 29] _emit_native_make_function
0x10002F50C	0x00000113	[ 29] _emit_native_make_closure
0x10002F61F	0x0000021C	[ 29] _emit_native_call_function
0x10002F83B	0x00000084	[ 29] _emit_native_call_method
0x10002F8BF	0x0000020A	[ 29] _emit_native_return_value
0x10002FAC9	0x000000A7	[ 29] _emit_native_raise_varargs
0x10002FB70	0x0000029C	[ 29] _emit_native_yield
0x10002FE0C	0x0000003E	[ 29] _emit_native_start_except_handler
0x10002FE4A	0x00000011	[ 29] _emit_native_end_except_handler
0x10002FE5B	0x00000045	[ 29] _emit_call_with_imm_arg
0x10002FEA0	0x00000032	[ 29] _emit_native_mov_state_reg
0x10002FED2	0x00000377	[ 29] _emit_native_global_exc_entry
0x100030249	0x0000005F	[ 29] _need_reg_all
0x1000302A8	0x00000030	[ 29] _emit_native_mov_reg_state
0x1000302D8	0x0000003C	[ 29] _ensure_extra_stack
0x100030314	0x0000006F	[ 29] _adjust_stack
0x100030383	0x000000AD	[ 29] _emit_native_load_fast
0x100030430	0x00000051	[ 29] _emit_post_push_reg
0x100030481	0x0000007C	[ 29] _need_reg_single
0x1000304FD	0x00000077	[ 29] _emit_pre_pop_reg_flexible
0x100030574	0x000000B5	[ 29] _emit_access_stack
0x100030629	0x000000A9	[ 29] _load_reg_stack_imm
0x1000306D2	0x00000051	[ 29] _emit_post_push_imm
0x100030723	0x00000068	[ 29] _emit_call_with_qstr_arg
0x10003078B	0x0000010D	[ 29] _emit_native_store_fast
0x100030898	0x0000007D	[ 29] _need_stack_settled
0x100030915	0x000000A9	[ 29] _emit_native_leave_exc_stack
0x1000309BE	0x0000005D	[ 29] _emit_pre_pop_reg_reg
0x100030A1B	0x00000085	[ 29] _emit_load_reg_with_object
0x100030AA0	0x0000017C	[ 29] _emit_get_stack_pointer_to_reg_for_pop
0x100030C1C	0x0000007D	[ 29] _emit_get_stack_pointer_to_reg_for_push
0x100030C99	0x0000005B	[ 29] _emit_native_mov_reg_state_addr
0x100030CF4	0x0000008E	[ 29] _emit_pre_pop_reg_reg_reg
0x100030D82	0x00000183	[ 29] _emit_native_jump_helper
0x100030F05	0x000000A1	[ 29] _emit_native_push_exc_stack
0x100030FA6	0x0000005B	[ 29] _emit_call_with_2_imm_args
0x100031001	0x0000007B	[ 29] _emit_load_reg_with_child
0x10003107C	0x0000006D	[ 29] _emit_fold_stack_top
0x1000310EC	0x00000058	[ 30] _emit_inline_xtensa_new
0x100031144	0x0000002A	[ 30] _emit_inline_xtensa_free
0x10003116E	0x00000050	[ 30] _emit_inline_xtensa_start_pass
0x1000311BE	0x0000001C	[ 30] _emit_inline_xtensa_end_pass
0x1000311DA	0x000000BB	[ 30] _emit_inline_xtensa_count_params
0x100031295	0x00000057	[ 30] _emit_inline_xtensa_label
0x1000312EC	0x000003A4	[ 30] _emit_inline_xtensa_op
0x100031690	0x000000A7	[ 30] _get_arg_reg
0x100031737	0x0000007B	[ 30] _get_arg_label
0x1000317B2	0x00000091	[ 30] _get_arg_i
0x100031844	0x0000008A	[ 31] _emit_native_xtensawin_new
0x1000318CE	0x0000004C	[ 31] _emit_native_xtensawin_free
0x10003191A	0x0000083A	[ 31] _emit_native_start_pass
0x100032154	0x00000500	[ 31] _emit_native_end_pass
0x100032654	0x00000060	[ 31] _emit_native_adjust_stack_size
0x1000326B4	0x00000006	[ 31] _emit_native_set_source_line
0x1000326BA	0x000000A3	[ 31] _emit_native_load_local
0x10003275D	0x00000070	[ 31] _emit_native_load_global
0x1000327CD	0x000000D5	[ 31] _emit_native_store_local
0x1000328A2	0x00000126	[ 31] _emit_native_store_global
0x1000329C8	0x0000003C	[ 31] _emit_native_delete_local
0x100032A04	0x00000018	[ 31] _emit_native_delete_global
0x100032A1C	0x000000B5	[ 31] _emit_native_label_assign
0x100032AD1	0x0000018F	[ 31] _emit_native_import
0x100032C60	0x00000039	[ 31] _emit_native_load_const_tok
0x100032C99	0x00000012	[ 31] _emit_native_load_const_small_int
0x100032CAB	0x0000003C	[ 31] _emit_native_load_const_str
0x100032CE7	0x00000037	[ 31] _emit_native_load_const_obj
0x100032D1E	0x0000000E	[ 31] _emit_native_load_null
0x100032D2C	0x000000C8	[ 31] _emit_native_load_method
0x100032DF4	0x00000034	[ 31] _emit_native_load_build_class
0x100032E28	0x00000AA8	[ 31] _emit_native_subscr
0x1000338D0	0x000001E9	[ 31] _emit_native_attr
0x100033AB9	0x00000063	[ 31] _emit_native_dup_top
0x100033B1C	0x0000007B	[ 31] _emit_native_dup_top_two
0x100033B97	0x00000011	[ 31] _emit_native_pop_top
0x100033BA8	0x00000058	[ 31] _emit_native_rot_two
0x100033C00	0x00000081	[ 31] _emit_native_rot_three
0x100033C81	0x00000031	[ 31] _emit_native_jump
0x100033CB2	0x0000000F	[ 31] _emit_native_pop_jump_if
0x100033CC1	0x0000000C	[ 31] _emit_native_jump_if_or_pop
0x100033CCD	0x00000161	[ 31] _emit_native_unwind_jump
0x100033E2E	0x000001C4	[ 31] _emit_native_setup_block
0x100033FF2	0x000001F7	[ 31] _emit_native_with_cleanup
0x1000341E9	0x00000150	[ 31] _emit_native_end_finally
0x100034339	0x000000D9	[ 31] _emit_native_get_iter
0x100034412	0x0000006B	[ 31] _emit_native_for_iter
0x10003447D	0x00000011	[ 31] _emit_native_for_iter_end
0x10003448E	0x0000006D	[ 31] _emit_native_pop_except_jump
0x1000344FB	0x000000AB	[ 31] _emit_native_unary_op
0x1000345A6	0x00000496	[ 31] _emit_native_binary_op
0x100034A3C	0x000001E2	[ 31] _emit_native_build
0x100034C1E	0x000000D3	[ 31] _emit_native_store_map
0x100034CF1	0x0000019F	[ 31] _emit_native_store_comp
0x100034E90	0x00000089	[ 31] _emit_native_unpack_sequence
0x100034F19	0x0000009F	[ 31] _emit_native_unpack_ex
0x100034FB8	0x000000B0	[ 31] _emit_native_make_function
0x100035068	0x00000113	[ 31] _emit_native_make_closure
0x10003517B	0x0000021C	[ 31] _emit_native_call_function
0x100035397	0x00000084	[ 31] _emit_native_call_method
0x10003541B	0x00000236	[ 31] _emit_native_return_value
0x100035651	0x000000A7	[ 31] _emit_native_raise_varargs
0x1000356F8	0x0000029C	[ 31] _emit_native_yield
0x100035994	0x0000003E	[ 31] _emit_native_start_except_handler
0x1000359D2	0x00000011	[ 31] _emit_native_end_except_handler
0x1000359E3	0x00000045	[ 31] _emit_call_with_imm_arg
0x100035A28	0x00000031	[ 31] _emit_native_mov_state_reg
0x100035A59	0x000003D8	[ 31] _emit_native_global_exc_entry
0x100035E31	0x0000005F	[ 31] _need_reg_all
0x100035E90	0x0000002F	[ 31] _emit_native_mov_reg_state
0x100035EBF	0x0000003C	[ 31] _ensure_extra_stack
0x100035EFB	0x0000006F	[ 31] _adjust_stack
0x100035F6A	0x000000AD	[ 31] _emit_native_load_fast
0x100036017	0x00000051	[ 31] _emit_post_push_reg
0x100036068	0x0000007C	[ 31] _need_reg_single
0x1000360E4	0x00000077	[ 31] _emit_pre_pop_reg_flexible
0x10003615B	0x000000B5	[ 31] _emit_access_stack
0x100036210	0x000000A9	[ 31] _load_reg_stack_imm
0x1000362B9	0x00000051	[ 31] _emit_post_push_imm
0x10003630A	0x00000068	[ 31] _emit_call_with_qstr_arg
0x100036372	0x0000010D	[ 31] _emit_native_store_fast
0x10003647F	0x0000007D	[ 31] _need_stack_settled
0x1000364FC	0x000000A9	[ 31] _emit_native_leave_exc_stack
0x1000365A5	0x0000005D	[ 31] _emit_pre_pop_reg_reg
0x100036602	0x00000085	[ 31] _emit_load_reg_with_object
0x100036687	0x0000017C	[ 31] _emit_get_stack_pointer_to_reg_for_pop
0x100036803	0x0000007D	[ 31] _emit_get_stack_pointer_to_reg_for_push
0x100036880	0x00000057	[ 31] _emit_native_mov_reg_state_addr
0x1000368D7	0x0000008E	[ 31] _emit_pre_pop_reg_reg_reg
0x100036965	0x00000183	[ 31] _emit_native_jump_helper
0x100036AE8	0x000000A1	[ 31] _emit_native_push_exc_stack
0x100036B89	0x0000005B	[ 31] _emit_call_with_2_imm_args
0x100036BE4	0x0000007B	[ 31] _emit_load_reg_with_child
0x100036C5F	0x0000006D	[ 31] _emit_fold_stack_top
0x100036CCC	0x0000063E	[ 32] _mp_format_float
0x10003730A	0x000000B7	[ 33] _mp_parse_num_base
0x1000373C1	0x000001CB	[ 34] _mp_parse_num_integer
0x10003758C	0x0000005C	[ 34] _mp_obj_new_exception_arg1
0x1000375E8	0x00000034	[ 34] _raise_exc
0x10003761C	0x000004B7	[ 34] _mp_parse_num_decimal
0x100037AD3	0x0000001A	[ 35] _mp_emit_glue_new_raw_code
0x100037AED	0x0000002A	[ 35] _mp_emit_glue_assign_bytecode
0x100037B17	0x00000084	[ 35] _mp_emit_glue_assign_native
0x100037B9B	0x00000230	[ 36] _mp_raw_code_save
0x100037DCB	0x0000007A	[ 36] _mp_print_uint
0x100037E45	0x000002DC	[ 36] _save_obj
0x100038121	0x00000234	[ 36] _save_raw_code
0x100038355	0x0000004F	[ 36] _mp_raw_code_save_file
0x1000383A4	0x0000000A	[ 36] _fd_print_strn
0x1000383B0	0x0000007A	[ 37] _mp_init
0x10003842A	0x00000006	[ 37] _mp_deinit
0x100038432	0x00000076	[ 37] _mp_raise_msg_varg
0x1000384AB	0x00000219	[ 37] _mp_unary_op
0x1000386C4	0x00000590	[ 37] _mp_binary_op
0x100038C54	0x00000013	[ 37] _mp_raise_ValueError
0x100038C67	0x00000119	[ 37] _mp_getiter
0x100038D80	0x00000137	[ 37] _mp_iternext
0x100038EB7	0x00000023	[ 37] _mp_raise_msg
0x100038EDA	0x00000058	[ 37] _mp_call_function_n_kw
0x100038F32	0x00000021	[ 37] _mp_call_function_1
0x100038F53	0x00000032	[ 37] _mp_call_method_n_kw
0x100038F85	0x000000AE	[ 37] _mp_convert_member_lookup
0x100039033	0x000000E4	[ 37] _mp_load_method_maybe
0x100039117	0x000000D5	[ 37] _mp_iternext_allow_raise
0x1000391EC	0x00000035	[ 37] _m_malloc_fail
0x100039221	0x00000013	[ 37] _mp_raise_TypeError
0x100039234	0x00000013	[ 37] _mp_raise_NotImplementedError
0x100039247	0x00000011	[ 37] _mp_raise_type_arg
0x100039258	0x0000004E	[ 37] _mp_obj_new_exception_arg1
0x1000392A6	0x00000026	[ 37] _mp_raise_StopIteration
0x1000392CC	0x0000001A	[ 37] _mp_raise_OSError
0x1000392E6	0x00000015	[ 37] _mp_raise_recursion_depth
0x1000392FB	0x00000066	[ 37] _checked_fun_call
0x100039364	0x0000008C	[ 40] _mp_native_type_from_qstr
0x1000393F0	0x00000014	[ 43] _mp_stack_ctrl_init
0x100039404	0x00000011	[ 43] _mp_stack_set_limit
0x100039415	0x0000002A	[ 43] _mp_stack_check
0x10003943F	0x0000007D	[ 44] _mp_arg_check_num_sig
0x1000394BC	0x00000156	[ 44] _mp_arg_parse_all
0x100039612	0x00000054	[ 44] _mp_arg_parse_all_kw_array
0x100039666	0x00000010	[ 44] _mp_arg_error_unimpl_kw
0x100039676	0x0000003C	[ 46] _mp_map_init
0x1000396B2	0x00000019	[ 46] _mp_map_init_fixed_table
0x1000396CB	0x00000031	[ 46] _mp_map_deinit
0x1000396FC	0x00000034	[ 46] _mp_map_clear
0x100039730	0x0000025F	[ 46] _mp_map_lookup
0x10003998F	0x000000C0	[ 46] _mp_map_rehash
0x100039A4F	0x00000018	[ 47] _mp_obj_malloc_helper
0x100039A67	0x00000021	[ 47] _mp_obj_get_type
0x100039A88	0x00000029	[ 47] _mp_obj_get_type_str
0x100039AB1	0x0000008D	[ 47] _mp_obj_print_helper
0x100039B3E	0x0000014D	[ 47] _mp_obj_print_exception
0x100039C8B	0x0000007E	[ 47] _mp_obj_is_true
0x100039D09	0x0000006D	[ 47] _mp_obj_len_maybe
0x100039D76	0x000001A6	[ 47] _mp_obj_equal_not_equal
0x100039F1C	0x0000001D	[ 47] _mp_obj_equal
0x100039F39	0x0000004D	[ 47] _mp_obj_get_int
0x100039F86	0x00000027	[ 47] _mp_obj_get_int_truncated
0x100039FAD	0x00000055	[ 47] _mp_obj_get_int_maybe
0x10003A002	0x000000A0	[ 47] _mp_obj_get_float_maybe
0x10003A0A2	0x00000042	[ 47] _mp_obj_get_float
0x10003A0E4	0x00000082	[ 47] _mp_obj_get_complex_maybe
0x10003A166	0x00000039	[ 47] _mp_obj_get_complex
0x10003A19F	0x00000048	[ 47] _mp_obj_get_array
0x10003A1E7	0x000000B4	[ 47] _mp_get_index
0x10003A29B	0x00000097	[ 47] _mp_obj_subscr
0x10003A332	0x00000009	[ 47] _mp_identity_getiter
0x10003A33B	0x00000035	[ 47] _mp_get_buffer
0x10003A370	0x0000003C	[ 47] _mp_get_buffer_raise
0x10003A3AC	0x00000014	[ 47] _mp_generic_unary_op
0x10003A3C0	0x000000E8	[ 48] _array_append
0x10003A4A8	0x000000EA	[ 48] _array_extend
0x10003A592	0x000000DA	[ 48] _array_print
0x10003A66C	0x0000017C	[ 48] _bytearray_make_new
0x10003A7E8	0x0000002E	[ 48] _array_unary_op
0x10003A816	0x00000263	[ 48] _array_binary_op
0x10003AA79	0x00000117	[ 48] _array_subscr
0x10003AB90	0x0000001E	[ 48] _array_iterator_new
0x10003ABAE	0x0000003C	[ 48] _array_get_buffer
0x10003ABEA	0x0000003D	[ 48] _mp_obj_new_bytearray
0x10003AC27	0x00000062	[ 48] _array_new
0x10003AC89	0x00000033	[ 48] _mp_obj_new_bytearray_by_ref
0x10003ACBC	0x00000032	[ 48] _array_it_iternext
0x10003ACEE	0x00000020	[ 49] _bool_print
0x10003AD0E	0x00000041	[ 49] _bool_make_new
0x10003AD4F	0x00000023	[ 49] _bool_unary_op
0x10003AD72	0x0000001A	[ 49] _bool_binary_op
0x10003AD8C	0x000000E9	[ 50] _mp_call_method_self_n_kw
0x10003AE78	0x000000F5	[ 53] _complex_print
0x10003AF6D	0x000001A1	[ 53] _complex_make_new
0x10003B10E	0x000000E2	[ 53] _complex_unary_op
0x10003B1F0	0x00000017	[ 53] _complex_binary_op
0x10003B207	0x00000041	[ 53] _complex_attr
0x10003B248	0x0000003D	[ 53] _mp_obj_new_complex
0x10003B285	0x00000049	[ 53] _mp_obj_complex_get
0x10003B2CE	0x0000032A	[ 53] _mp_obj_complex_binary_op
0x10003B5F8	0x000000B3	[ 54] _mp_obj_dict_make_new
0x10003B6AB	0x000001B7	[ 54] _dict_update
0x10003B862	0x00000033	[ 54] _mp_obj_dict_get
0x10003B895	0x00000096	[ 54] _mp_obj_dict_copy
0x10003B92B	0x000000BA	[ 54] _dict_print
0x10003B9E5	0x00000030	[ 54] _dict_unary_op
0x10003BA15	0x000000D2	[ 54] _dict_binary_op
0x10003BAE7	0x00000092	[ 54] _dict_subscr
0x10003BB79	0x00000026	[ 54] _dict_getiter
0x10003BB9F	0x00000018	[ 54] _mp_obj_dict_init
0x10003BBB7	0x00000034	[ 54] _mp_obj_dict_store
0x10003BBEB	0x0000008D	[ 54] _dict_get_helper
0x10003BC78	0x00000091	[ 54] _dict_iter_next
0x10003BD09	0x00000055	[ 54] _dict_view_it_iternext
0x10003BD5E	0x00000021	[ 54] _dict_clear
0x10003BD7F	0x000000A6	[ 54] _dict_fromkeys
0x10003BE25	0x0000000C	[ 54] _dict_get
0x10003BE31	0x0000002C	[ 54] _dict_items
0x10003BE5D	0x000000C4	[ 54] _dict_view_print
0x10003BF21	0x00000038	[ 54] _dict_view_binary_op
0x10003BF59	0x00000029	[ 54] _dict_view_getiter
0x10003BF82	0x0000002C	[ 54] _dict_keys
0x10003BFAE	0x0000000F	[ 54] _dict_pop
0x10003BFBD	0x00000097	[ 54] _dict_popitem
0x10003C054	0x0000000F	[ 54] _dict_setdefault
0x10003C063	0x0000002C	[ 54] _dict_values
0x10003C08F	0x000000BA	[ 56] _mp_obj_exception_print
0x10003C149	0x000000AE	[ 56] _mp_obj_exception_make_new
0x10003C1F7	0x00000021	[ 56] _mp_obj_exception_get_value
0x10003C218	0x0000005C	[ 56] _get_native_exception
0x10003C274	0x0000006D	[ 56] _mp_obj_exception_attr
0x10003C2E1	0x0000007C	[ 56] _mp_obj_new_exception
0x10003C35D	0x000000E1	[ 56] _mp_obj_new_exception_msg
0x10003C43E	0x0000009A	[ 56] _mp_obj_new_exception_msg_varg
0x10003C4D8	0x0000018D	[ 56] _mp_obj_new_exception_msg_vlist
0x10003C665	0x00000091	[ 56] _exc_add_strn
0x10003C6F6	0x00000034	[ 56] _mp_obj_is_exception_type
0x10003C72A	0x00000012	[ 56] _mp_obj_is_exception_instance
0x10003C73C	0x00000038	[ 56] _mp_obj_exception_match
0x10003C774	0x000000C2	[ 56] _mp_obj_exception_add_traceback
0x10003C836	0x0000002D	[ 56] _mp_obj_exception_get_traceback
0x10003C864	0x000000B2	[ 58] _float_print
0x10003C916	0x000000B6	[ 58] _float_make_new
0x10003C9CC	0x000000C8	[ 58] _float_unary_op
0x10003CA94	0x00000047	[ 58] _float_binary_op
0x10003CADB	0x00000031	[ 58] _mp_obj_new_float
0x10003CB0C	0x0000003C	[ 58] _mp_obj_float_get
0x10003CB48	0x000003A0	[ 58] _mp_obj_float_binary_op
0x10003CEE8	0x000000C0	[ 58] _mp_obj_float_divmod
0x10003CFAB	0x0000005B	[ 59] _fun_builtin_1_call
0x10003D006	0x0000005E	[ 59] _fun_builtin_2_call
0x10003D064	0x00000062	[ 59] _fun_builtin_3_call
0x10003D0C6	0x000000A9	[ 59] _fun_builtin_var_call
0x10003D16F	0x0000002A	[ 61] _mp_obj_new_getitem_iter
0x10003D199	0x00000070	[ 61] _it_iternext
0x10003D209	0x000000AD	[ 62] _mp_obj_new_int_from_float
0x10003D2B6	0x0000008C	[ 62] _mp_obj_int_print
0x10003D342	0x000001F2	[ 62] _mp_obj_int_formatted
0x10003D534	0x0000008A	[ 62] _mp_int_format_size
0x10003D5BE	0x0000006F	[ 62] _mp_obj_int_binary_op_extra_cases
0x10003D62D	0x000000FD	[ 62] _mp_obj_int_make_new
0x10003D72A	0x000000A4	[ 62] _int_from_bytes
0x10003D7CE	0x000000BC	[ 62] _int_to_bytes
0x10003D88C	0x0000002D	[ 63] _mp_obj_int_new_mpz
0x10003D8B9	0x000000D2	[ 63] _mp_obj_int_formatted_impl
0x10003D98B	0x0000005A	[ 63] _mp_obj_int_from_bytes_impl
0x10003D9E5	0x00000043	[ 63] _mp_obj_int_to_bytes_impl
0x10003DA28	0x00000039	[ 63] _mp_obj_int_sign
0x10003DA61	0x00000123	[ 63] _mp_obj_int_unary_op
0x10003DB84	0x00000474	[ 63] _mp_obj_int_binary_op
0x10003DFF8	0x00000044	[ 63] _mp_obj_int_get_checked
0x10003E03C	0x0000001C	[ 63] _mp_obj_new_int
0x10003E058	0x0000004B	[ 63] _mp_obj_new_int_from_ll
0x10003E0A3	0x00000048	[ 63] _mp_obj_new_int_from_ull
0x10003E0EB	0x0000001C	[ 63] _mp_obj_new_int_from_uint
0x10003E107	0x00000066	[ 63] _mp_obj_new_int_from_str_len
0x10003E16D	0x0000001C	[ 63] _mp_obj_int_get_truncated
0x10003E18A	0x0000003F	[ 63] _mp_obj_int_as_float_impl
0x10003E1C9	0x0000006F	[ 64] _mp_obj_list_append
0x10003E238	0x0000006E	[ 64] _mp_obj_list_sort
0x10003E2A6	0x0000016D	[ 64] _mp_quicksort
0x10003E413	0x00000069	[ 64] _mp_obj_list_remove
0x10003E47C	0x0000001B	[ 64] _list_index
0x10003E497	0x000000B8	[ 64] _list_pop
0x10003E54F	0x00000075	[ 64] _list_print
0x10003E5C4	0x00000055	[ 64] _list_make_new
0x10003E619	0x0000002E	[ 64] _list_unary_op
0x10003E647	0x00000180	[ 64] _list_binary_op
0x10003E7C7	0x000002E3	[ 64] _list_subscr
0x10003EAAA	0x0000002A	[ 64] _list_getiter
0x10003EAD4	0x00000052	[ 64] _mp_obj_list_init
0x10003EB26	0x00000056	[ 64] _mp_obj_new_list
0x10003EB7C	0x00000014	[ 64] _mp_obj_list_get
0x10003EB90	0x0000003C	[ 64] _list_extend_from_iter
0x10003EBCC	0x000000A2	[ 64] _list_extend
0x10003EC6E	0x00000027	[ 64] _list_it_iternext
0x10003EC95	0x00000041	[ 64] _list_clear
0x10003ECD6	0x00000015	[ 64] _list_copy
0x10003ECEB	0x00000015	[ 64] _list_count
0x10003ED00	0x0000006E	[ 64] _list_insert
0x10003ED6E	0x0000004A	[ 64] _list_reverse
0x10003EDB8	0x00000029	[ 67] _object_make_new
0x10003EDE1	0x0000000B	[ 67] _object___init__
0x10003EDEC	0x00000042	[ 67] _object___new__
0x10003EE2E	0x00000008	[ 68] _polymorph_it_iternext
0x10003EE36	0x00000082	[ 69] _property_make_new
0x10003EEB8	0x0000000A	[ 69] _mp_obj_property_get
0x10003EEC2	0x0000002E	[ 69] _property_getter
0x10003EEF0	0x0000002E	[ 69] _property_setter
0x10003EF1E	0x0000002E	[ 69] _property_deleter
0x10003EF4C	0x00000011	[ 70] _none_print
0x10003EF5D	0x00000017	[ 74] _singleton_print
0x10003EF74	0x00000085	[ 75] _slice_print
0x10003EFF9	0x00000133	[ 75] _mp_obj_slice_indices
0x10003F12C	0x00000147	[ 76] _mp_str_print_quoted
0x10003F273	0x00000174	[ 76] _mp_obj_str_make_new
0x10003F3E7	0x000000CA	[ 76] _mp_obj_new_str_type_from_vstr
0x10003F4B1	0x0000006A	[ 76] _mp_obj_new_str_copy
0x10003F51B	0x00000057	[ 76] _mp_obj_new_str
0x10003F572	0x00000086	[ 76] _find_subbytes
0x10003F5F8	0x00000A18	[ 76] _mp_obj_str_binary_op
0x100040010	0x00000036	[ 76] _bad_implicit_conversion
0x100040046	0x000001D1	[ 76] _str_join
0x100040217	0x00000254	[ 76] _mp_obj_str_split
0x10004046B	0x00000038	[ 76] _mp_obj_new_str_of_type
0x1000404A3	0x00000043	[ 76] _str_check_arg_type
0x1000404E6	0x0000005F	[ 76] _mp_obj_str_get_data
0x100040545	0x000001E9	[ 76] _str_rsplit
0x10004072E	0x00000011	[ 76] _str_find
0x10004073F	0x00000011	[ 76] _str_rfind
0x100040750	0x00000014	[ 76] _str_index
0x100040764	0x00000014	[ 76] _str_rindex
0x100040778	0x000000C3	[ 76] _str_startswith
0x10004083B	0x0000009A	[ 76] _str_endswith
0x1000408D5	0x00000015	[ 76] _str_strip
0x1000408EA	0x00000012	[ 76] _str_lstrip
0x1000408FC	0x00000015	[ 76] _str_rstrip
0x100040911	0x0000008D	[ 76] _mp_obj_str_format
0x10004099E	0x00000B06	[ 76] _mp_obj_str_format_helper
0x1000414A4	0x0000036B	[ 76] _str_replace
0x10004180F	0x0000015B	[ 76] _str_count
0x10004196A	0x00000014	[ 76] _str_lower
0x10004197E	0x00000014	[ 76] _str_upper
0x100041992	0x00000070	[ 76] _str_isspace
0x100041A02	0x00000070	[ 76] _str_isalpha
0x100041A72	0x00000070	[ 76] _str_isdigit
0x100041AE2	0x00000095	[ 76] _str_isupper
0x100041B77	0x00000095	[ 76] _str_islower
0x100041C0C	0x00000064	[ 76] _bytes_decode
0x100041C70	0x0000005F	[ 76] _str_encode
0x100041CCF	0x0000005C	[ 76] _mp_obj_str_get_buffer
0x100041D2B	0x00000083	[ 76] _str_print
0x100041DAE	0x00000241	[ 76] _bytes_make_new
0x100041FEF	0x000000D0	[ 76] _bytes_subscr
0x1000420BF	0x0000002A	[ 76] _mp_obj_new_bytes_iterator
0x1000420E9	0x00000017	[ 76] _mp_obj_new_bytes
0x100042100	0x00000013	[ 76] _mp_obj_new_str_via_qstr
0x100042114	0x00000014	[ 76] _mp_obj_new_str_from_utf8_vstr
0x100042128	0x00000014	[ 76] _mp_obj_new_bytes_from_vstr
0x10004213C	0x000000F7	[ 76] _mp_obj_str_equal
0x100042233	0x0000003C	[ 76] _mp_obj_str_get_qstr
0x100042271	0x00000164	[ 76] _str_finder
0x1000423D5	0x00000204	[ 76] _str_uni_strip
0x1000425D9	0x00000099	[ 76] _str_caseconv
0x100042672	0x00000064	[ 76] _bytes_it_iternext
0x1000426D6	0x0000010A	[ 77] _str_index_to_ptr
0x1000427E0	0x000001AE	[ 77] _uni_print
0x10004298E	0x0000006A	[ 77] _uni_unary_op
0x1000429F8	0x00000185	[ 77] _str_subscr
0x100042B7D	0x0000002A	[ 77] _mp_obj_new_str_iterator
0x100042BA7	0x0000007E	[ 77] _str_it_iternext
0x100042C25	0x00000089	[ 78] _mp_obj_tuple_print
0x100042CAE	0x00000089	[ 78] _mp_obj_tuple_unary_op
0x100042D37	0x000001BF	[ 78] _mp_obj_tuple_binary_op
0x100042EF6	0x00000050	[ 78] _mp_obj_new_tuple
0x100042F46	0x000000CB	[ 78] _mp_obj_tuple_subscr
0x100043011	0x000000E6	[ 78] _mp_obj_tuple_make_new
0x1000430F7	0x0000002A	[ 78] _mp_obj_tuple_getiter
0x100043121	0x0000005D	[ 78] _mp_obj_tuple_get
0x10004317E	0x00000024	[ 78] _tuple_it_iternext
0x1000431A2	0x00000015	[ 78] _tuple_count
0x1000431B7	0x0000001B	[ 78] _tuple_index
0x1000431D2	0x0000006E	[ 79] _mp_obj_new_instance
0x100043240	0x000000CA	[ 79] _instance_count_native_bases
0x10004330A	0x00000253	[ 79] _mp_obj_instance_make_new
0x10004355D	0x00000274	[ 79] _mp_obj_class_lookup
0x1000437D1	0x000000D2	[ 79] _mp_obj_instance_call
0x1000438A3	0x000000BE	[ 79] _mp_obj_instance_getiter
0x100043961	0x00000017	[ 79] _type_print
0x100043978	0x0000005D	[ 79] _type_make_new
0x1000439D5	0x00000029	[ 79] _type_call
0x1000439FE	0x00000207	[ 79] _type_attr
0x100043C05	0x000002A6	[ 79] _mp_obj_new_type
0x100043EAB	0x0000013A	[ 79] _instance_print
0x100043FE5	0x00000102	[ 79] _instance_unary_op
0x1000440E7	0x000000FC	[ 79] _instance_binary_op
0x1000441E3	0x000002AA	[ 79] _mp_obj_instance_attr
0x10004448D	0x000000F3	[ 79] _instance_subscr
0x100044580	0x00000098	[ 79] _instance_get_buffer
0x100044618	0x0000006D	[ 79] _static_class_method_make_new
0x100044685	0x00000089	[ 79] _mp_obj_is_subclass_fast
0x10004470E	0x00000036	[ 79] _mp_obj_cast_to_native_base
0x100044744	0x0000005B	[ 79] _native_base_init_wrapper
0x10004479F	0x00000027	[ 81] _op_getitem
0x1000447C6	0x00000031	[ 81] _op_setitem
0x1000447F7	0x00000024	[ 81] _op_delitem
0x10004481B	0x0000003F	[ 82] _mp_seq_multiply
0x10004485A	0x00000056	[ 82] _mp_seq_get_fast_slice_indexes
0x1000448B0	0x00000069	[ 82] _mp_seq_extract_slice
0x100044919	0x0000008E	[ 82] _mp_seq_cmp_bytes
0x1000449A7	0x000000D8	[ 82] _mp_seq_cmp_objs
0x100044A7F	0x000000B3	[ 82] _mp_seq_index_obj
0x100044B32	0x0000005B	[ 82] _mp_seq_count_obj
0x100044B90	0x0000020C	[ 84] _mp_binary_get_size
0x100044D9C	0x00000128	[ 84] _mp_binary_get_val_array
0x100044EC5	0x0000003D	[ 84] _mp_binary_set_int
0x100044F05	0x000000B8	[ 84] _mp_binary_set_val_array
0x100044FBD	0x000000DB	[ 84] _mp_binary_set_val_array_from_int
0x100045098	0x00000020	[ 88] _mp_builtin_next
0x1000450B8	0x0000008E	[ 92] _mp_encode_uint
0x100045146	0x00000080	[ 93] _mp_small_int_mul_overflow
0x1000451C6	0x00000028	[ 93] _mp_small_int_modulo
0x1000451EE	0x0000002E	[ 93] _mp_small_int_floor_divide
0x10004521C	0x000006D8	[ 94] _main_
0x1000458F4	0x00000037	[ 94] _usage
0x10004592B	0x0000001F	[ 94] _main
0x10004594A	0x00000029	[ 94] _nlr_jump_fail
0x100045973	0x0000000F	[ 94] _stderr_print_strn
0x100045982	0x00000014	[ 95] _gc_collect
0x100045996	0x00000074	[ 96] _gc_helper_collect_regs_and_stack
0x100045A0A	0x00000006	[ 97] ___assert_rtn
0x100045A10	0x00000006	[ 97] ___bzero
0x100045A16	0x00000006	[ 97] ___error
0x100045A1C	0x00000006	[ 97] ___exp10
0x100045A22	0x00000006	[ 97] ___sincos_stret
0x100045A28	0x00000006	[ 97] ___stack_chk_fail
0x100045A2E	0x00000006	[ 97] _atan2
0x100045A34	0x00000006	[ 97] _close
0x100045A3A	0x00000006	[ 97] _exit
0x100045A40	0x00000006	[ 97] _exp
0x100045A46	0x00000006	[ 97] _fmod
0x100045A4C	0x00000006	[ 97] _fprintf
0x100045A52	0x00000006	[ 97] _log
0x100045A58	0x00000006	[ 97] _malloc
0x100045A5E	0x00000006	[ 97] _memchr
0x100045A64	0x00000006	[ 97] _memcmp
0x100045A6A	0x00000006	[ 97] _memcpy
0x100045A70	0x00000006	[ 97] _memmove
0x100045A76	0x00000006	[ 97] _memset
0x100045A7C	0x00000006	[ 97] _nan
0x100045A82	0x00000006	[ 97] _open
0x100045A88	0x00000006	[ 97] _pow
0x100045A8E	0x00000006	[ 97] _printf
0x100045A94	0x00000006	[ 97] _puts
0x100045A9A	0x00000006	[ 97] _read
0x100045AA0	0x00000006	[ 97] _strchr
0x100045AA6	0x00000006	[ 97] _strcmp
0x100045AAC	0x00000006	[ 97] _strlen
0x100045AB2	0x00000006	[ 97] _strncmp
0x100045AB8	0x00000006	[ 97] _strtol
0x100045ABE	0x00000006	[ 97] _write
0x100045AC4	0x00000010	[  0] helper helper
0x100045AD4	0x0000000A	[ 97] ___assert_rtn
0x100045ADE	0x0000000A	[ 97] ___bzero
0x100045AE8	0x0000000A	[ 97] ___error
0x100045AF2	0x0000000A	[ 97] ___exp10
0x100045AFC	0x0000000A	[ 97] ___sincos_stret
0x100045B06	0x0000000A	[ 97] ___stack_chk_fail
0x100045B10	0x0000000A	[ 97] _atan2
0x100045B1A	0x0000000A	[ 97] _close
0x100045B24	0x0000000A	[ 97] _exit
0x100045B2E	0x0000000A	[ 97] _exp
0x100045B38	0x0000000A	[ 97] _fmod
0x100045B42	0x0000000A	[ 97] _fprintf
0x100045B4C	0x0000000A	[ 97] _log
0x100045B56	0x0000000A	[ 97] _malloc
0x100045B60	0x0000000A	[ 97] _memchr
0x100045B6A	0x0000000A	[ 97] _memcmp
0x100045B74	0x0000000A	[ 97] _memcpy
0x100045B7E	0x0000000A	[ 97] _memmove
0x100045B88	0x0000000A	[ 97] _memset
0x100045B92	0x0000000A	[ 97] _nan
0x100045B9C	0x0000000A	[ 97] _open
0x100045BA6	0x0000000A	[ 97] _pow
0x100045BB0	0x0000000A	[ 97] _printf
0x100045BBA	0x0000000A	[ 97] _puts
0x100045BC4	0x0000000A	[ 97] _read
0x100045BCE	0x0000000A	[ 97] _strchr
0x100045BD8	0x0000000A	[ 97] _strcmp
0x100045BE2	0x0000000A	[ 97] _strlen
0x100045BEC	0x0000000A	[ 97] _strncmp
0x100045BF6	0x0000000A	[ 97] _strtol
0x100045C00	0x0000000A	[ 97] _write
0x100045C10	0x00000010	[  5] 16-byte-literal
0x100045C20	0x000002B0	[  6] _mp_qstr_const_hashes
0x100045ED0	0x00000156	[  6] _mp_qstr_const_lengths
0x100046030	0x00000020	[  8] _pad_spaces
0x100046050	0x00000011	[  8] _pad_zeroes
0x100046070	0x00000080	[  9] _attr
0x1000460F0	0x00000008	[ 10] 8-byte-literal
0x100046100	0x00000010	[ 10] 16-byte-literal
0x100046110	0x00000010	[ 12] 16-byte-literal
0x100046120	0x00000010	[ 12] 16-byte-literal
0x100046130	0x00000090	[ 12] _reltable.mp_lexer_to_next
0x1000461C0	0x0000002C	[ 12] _tok_enc_kind
0x1000461F0	0x00000010	[ 13] 16-byte-literal
0x100046200	0x00000010	[ 13] 16-byte-literal
0x100046210	0x000000B0	[ 13] _rule_act_table
0x1000462C0	0x000000B0	[ 13] _rule_arg_offset_table
0x100046370	0x00000388	[ 13] _rule_arg_combined_table
0x1000466F8	0x00000004	[ 13] _mp_constants_table
0x1000466FC	0x00000018	[ 13] l_reltable.mp_parse
0x100046714	0x00000007	[ 14] _scope_simple_name_table
0x100046720	0x00000010	[ 17] 16-byte-literal
0x100046730	0x00000002	[ 20] _reg_local_table
0x100046732	0x0000000E	[ 20] _emit_native_binary_op.ops
0x100046740	0x00000040	[ 20] l_switch.table.emit_native_store_fast.53
0x100046780	0x00000040	[ 20] l_switch.table.emit_native_jump_helper
0x1000467C0	0x00000010	[ 22] _reg_local_table
0x1000467D0	0x00000032	[ 22] _mp_f_n_args
0x100046802	0x0000000E	[ 22] _emit_native_binary_op.ops
0x100046810	0x00000040	[ 22] l_switch.table.emit_native_store_fast.53
0x100046850	0x00000040	[ 22] l_switch.table.emit_native_jump_helper
0x100046890	0x00000010	[ 23] 16-byte-literal
0x1000468A0	0x00000010	[ 24] _reg_local_table
0x1000468B0	0x00000020	[ 24] _emit_native_binary_op.ops
0x1000468D0	0x00000018	[ 24] _emit_native_binary_op.ops.33
0x1000468E8	0x00000040	[ 24] l_switch.table.emit_native_store_fast.58
0x100046928	0x00000040	[ 24] l_switch.table.emit_native_jump_helper
0x100046970	0x00000010	[ 25] _format_vfp_op_table
0x100046980	0x00000030	[ 25] _cc_name_table
0x1000469B0	0x00000040	[ 25] _format_4_op_table
0x1000469F0	0x00000020	[ 25] _format_9_10_op_table
0x100046A10	0x00000060	[ 25] _reg_name_table
0x100046A70	0x00000012	[ 25] _special_reg_name_table
0x100046A90	0x00000010	[ 27] _reg_local_table
0x100046AA0	0x00000030	[ 27] _emit_native_binary_op.ccs
0x100046AD0	0x00000040	[ 27] l_switch.table.emit_native_store_fast.53
0x100046B10	0x00000040	[ 27] l_switch.table.emit_native_jump_helper
0x100046B50	0x00000002	[ 29] _reg_local_table
0x100046B52	0x0000000E	[ 29] _emit_native_binary_op.ccs
0x100046B60	0x00000040	[ 29] l_switch.table.emit_native_store_fast.53
0x100046BA0	0x00000040	[ 29] l_switch.table.emit_native_jump_helper
0x100046BE0	0x00000070	[ 30] _opcode_table_3arg
0x100046C50	0x00000040	[ 30] _reg_name_table
0x100046C90	0x00000002	[ 31] _reg_local_table
0x100046C92	0x0000000E	[ 31] _emit_native_binary_op.ccs
0x100046CA0	0x00000040	[ 31] l_switch.table.emit_native_store_fast.53
0x100046CE0	0x00000040	[ 31] l_switch.table.emit_native_jump_helper
0x100046D20	0x00000010	[ 32] 16-byte-literal
0x100046D30	0x00000008	[ 32] 8-byte-literal
0x100046D38	0x00000008	[ 32] 8-byte-literal
0x100046D40	0x00000008	[ 32] 8-byte-literal
0x100046D48	0x00000008	[ 32] 8-byte-literal
0x100046D50	0x00000008	[ 34] 8-byte-literal
0x100046D58	0x00000008	[ 34] 8-byte-literal
0x100046D60	0x00000004	[ 40] _mp_fun_table
0x100046D70	0x00000044	[ 46] _hash_allocation_sizes
0x100046DC0	0x00000010	[ 48] 16-byte-literal
0x100046DD0	0x00000008	[ 53] 8-byte-literal
0x100046DD8	0x0000000C	[ 54] _reltable.dict_view_print
0x100046DE8	0x00000008	[ 58] 8-byte-literal
0x100046DF0	0x00000008	[ 58] 8-byte-literal
0x100046E00	0x00000010	[ 62] _log_base2_floor
0x100046E10	0x00000020	[ 64] _mp_obj_list_sort.allowed_args
0x100046E30	0x00000040	[ 69] _property_make_new.allowed_args
0x100046E70	0x00000008	[ 76] 8-byte-literal
0x100046E80	0x00000010	[ 79] 16-byte-literal
0x100046E90	0x00000010	[ 79] 16-byte-literal
0x100046EA0	0x00000010	[ 79] 16-byte-literal
0x100046EB0	0x00000010	[ 79] 16-byte-literal
0x100046EC0	0x00000010	[ 79] 16-byte-literal
0x100046ED0	0x00000010	[ 79] 16-byte-literal
0x100046EE0	0x00000010	[ 79] _mp_unary_op_method_name
0x100046EF0	0x00000025	[ 79] _mp_binary_op_method_name
0x100046F15	0x00000008	[  5] literal string: gc_free
0x100046F1D	0x00000005	[  5] literal string: gc.c
0x100046F22	0x00000010	[  5] literal string: VERIFY_PTR(ptr)
0x100046F32	0x00000025	[  5] literal string: ATB_GET_KIND(area, block) == AT_HEAD
0x100046F57	0x0000000B	[  5] literal string: gc_realloc
0x100046F62	0x00000022	[  5] literal string: ATB_GET_KIND(area, bl) == AT_FREE
0x100046F84	0x00000003	[  5] literal string: %c
0x100046F87	0x00000002	[  5] literal string: \n
0x100046F89	0x00000001	[  6] literal string: 
0x100046F8A	0x00000008	[  6] literal string: __dir__
0x100046F92	0x00000002	[  6] literal string:  
0x100046F94	0x00000002	[  6] literal string: *
0x100046F96	0x00000002	[  6] literal string: /
0x100046F98	0x00000009	[  6] literal string: <module>
0x100046FA1	0x00000002	[  6] literal string: _
0x100046FA3	0x00000009	[  6] literal string: __call__
0x100046FAC	0x0000000A	[  6] literal string: __class__
0x100046FB6	0x0000000C	[  6] literal string: __delitem__
0x100046FC2	0x0000000A	[  6] literal string: __enter__
0x100046FCC	0x00000009	[  6] literal string: __exit__
0x100046FD5	0x0000000C	[  6] literal string: __getattr__
0x100046FE1	0x0000000C	[  6] literal string: __getitem__
0x100046FED	0x00000009	[  6] literal string: __hash__
0x100046FF6	0x00000009	[  6] literal string: __init__
0x100046FFF	0x00000008	[  6] literal string: __int__
0x100047007	0x00000009	[  6] literal string: __iter__
0x100047010	0x00000008	[  6] literal string: __len__
0x100047018	0x00000009	[  6] literal string: __main__
0x100047021	0x0000000B	[  6] literal string: __module__
0x10004702C	0x00000009	[  6] literal string: __name__
0x100047035	0x00000008	[  6] literal string: __new__
0x10004703D	0x00000009	[  6] literal string: __next__
0x100047046	0x0000000D	[  6] literal string: __qualname__
0x100047053	0x00000009	[  6] literal string: __repr__
0x10004705C	0x0000000C	[  6] literal string: __setitem__
0x100047068	0x00000008	[  6] literal string: __str__
0x100047070	0x00000010	[  6] literal string: ArithmeticError
0x100047080	0x0000000F	[  6] literal string: AssertionError
0x10004708F	0x0000000F	[  6] literal string: AttributeError
0x10004709E	0x0000000E	[  6] literal string: BaseException
0x1000470AC	0x00000009	[  6] literal string: EOFError
0x1000470B5	0x00000009	[  6] literal string: Ellipsis
0x1000470BE	0x0000000A	[  6] literal string: Exception
0x1000470C8	0x0000000E	[  6] literal string: GeneratorExit
0x1000470D6	0x0000000C	[  6] literal string: ImportError
0x1000470E2	0x00000011	[  6] literal string: IndentationError
0x1000470F3	0x0000000B	[  6] literal string: IndexError
0x1000470FE	0x00000009	[  6] literal string: KeyError
0x100047107	0x00000012	[  6] literal string: KeyboardInterrupt
0x100047119	0x0000000C	[  6] literal string: LookupError
0x100047125	0x0000000C	[  6] literal string: MemoryError
0x100047131	0x0000000A	[  6] literal string: NameError
0x10004713B	0x00000009	[  6] literal string: NoneType
0x100047144	0x00000014	[  6] literal string: NotImplementedError
0x100047158	0x00000008	[  6] literal string: OSError
0x100047160	0x0000000E	[  6] literal string: OverflowError
0x10004716E	0x0000000D	[  6] literal string: RuntimeError
0x10004717B	0x0000000E	[  6] literal string: StopIteration
0x100047189	0x0000000C	[  6] literal string: SyntaxError
0x100047195	0x0000000B	[  6] literal string: SystemExit
0x1000471A0	0x0000000A	[  6] literal string: TypeError
0x1000471AA	0x0000000B	[  6] literal string: ValueError
0x1000471B5	0x00000012	[  6] literal string: ZeroDivisionError
0x1000471C7	0x00000004	[  6] literal string: abs
0x1000471CB	0x00000004	[  6] literal string: all
0x1000471CF	0x00000004	[  6] literal string: any
0x1000471D3	0x00000007	[  6] literal string: append
0x1000471DA	0x00000005	[  6] literal string: args
0x1000471DF	0x00000005	[  6] literal string: bool
0x1000471E4	0x00000009	[  6] literal string: builtins
0x1000471ED	0x0000000A	[  6] literal string: bytearray
0x1000471F7	0x00000009	[  6] literal string: bytecode
0x100047200	0x00000006	[  6] literal string: bytes
0x100047206	0x00000009	[  6] literal string: callable
0x10004720F	0x00000004	[  6] literal string: chr
0x100047213	0x0000000C	[  6] literal string: classmethod
0x10004721F	0x00000006	[  6] literal string: clear
0x100047225	0x00000006	[  6] literal string: close
0x10004722B	0x00000006	[  6] literal string: const
0x100047231	0x00000005	[  6] literal string: copy
0x100047236	0x00000006	[  6] literal string: count
0x10004723C	0x00000005	[  6] literal string: dict
0x100047241	0x00000004	[  6] literal string: dir
0x100047245	0x00000007	[  6] literal string: divmod
0x10004724C	0x00000004	[  6] literal string: end
0x100047250	0x00000009	[  6] literal string: endswith
0x100047259	0x00000005	[  6] literal string: eval
0x10004725E	0x00000005	[  6] literal string: exec
0x100047263	0x00000007	[  6] literal string: extend
0x10004726A	0x00000005	[  6] literal string: find
0x10004726F	0x00000007	[  6] literal string: format
0x100047276	0x0000000B	[  6] literal string: from_bytes
0x100047281	0x00000004	[  6] literal string: get
0x100047285	0x00000008	[  6] literal string: getattr
0x10004728D	0x00000008	[  6] literal string: globals
0x100047295	0x00000008	[  6] literal string: hasattr
0x10004729D	0x00000005	[  6] literal string: hash
0x1000472A2	0x00000003	[  6] literal string: id
0x1000472A5	0x00000006	[  6] literal string: index
0x1000472AB	0x00000007	[  6] literal string: insert
0x1000472B2	0x00000004	[  6] literal string: int
0x1000472B6	0x00000008	[  6] literal string: isalpha
0x1000472BE	0x00000008	[  6] literal string: isdigit
0x1000472C6	0x0000000B	[  6] literal string: isinstance
0x1000472D1	0x00000008	[  6] literal string: islower
0x1000472D9	0x00000008	[  6] literal string: isspace
0x1000472E1	0x0000000B	[  6] literal string: issubclass
0x1000472EC	0x00000008	[  6] literal string: isupper
0x1000472F4	0x00000006	[  6] literal string: items
0x1000472FA	0x00000005	[  6] literal string: iter
0x1000472FF	0x00000005	[  6] literal string: join
0x100047304	0x00000004	[  6] literal string: key
0x100047308	0x00000005	[  6] literal string: keys
0x10004730D	0x00000004	[  6] literal string: len
0x100047311	0x00000005	[  6] literal string: list
0x100047316	0x00000007	[  6] literal string: little
0x10004731D	0x00000007	[  6] literal string: locals
0x100047324	0x00000006	[  6] literal string: lower
0x10004732A	0x00000007	[  6] literal string: lstrip
0x100047331	0x00000005	[  6] literal string: main
0x100047336	0x00000004	[  6] literal string: map
0x10004733A	0x0000000C	[  6] literal string: micropython
0x100047346	0x00000005	[  6] literal string: next
0x10004734B	0x00000007	[  6] literal string: object
0x100047352	0x00000005	[  6] literal string: open
0x100047357	0x00000004	[  6] literal string: ord
0x10004735B	0x00000004	[  6] literal string: pop
0x10004735F	0x00000008	[  6] literal string: popitem
0x100047367	0x00000004	[  6] literal string: pow
0x10004736B	0x00000006	[  6] literal string: print
0x100047371	0x00000006	[  6] literal string: range
0x100047377	0x00000005	[  6] literal string: read
0x10004737C	0x00000009	[  6] literal string: readinto
0x100047385	0x00000009	[  6] literal string: readline
0x10004738E	0x00000007	[  6] literal string: remove
0x100047395	0x00000008	[  6] literal string: replace
0x10004739D	0x00000005	[  6] literal string: repr
0x1000473A2	0x00000008	[  6] literal string: reverse
0x1000473AA	0x00000006	[  6] literal string: rfind
0x1000473B0	0x00000007	[  6] literal string: rindex
0x1000473B7	0x00000006	[  6] literal string: round
0x1000473BD	0x00000007	[  6] literal string: rsplit
0x1000473C4	0x00000007	[  6] literal string: rstrip
0x1000473CB	0x00000005	[  6] literal string: self
0x1000473D0	0x00000005	[  6] literal string: send
0x1000473D5	0x00000004	[  6] literal string: sep
0x1000473D9	0x00000004	[  6] literal string: set
0x1000473DD	0x00000008	[  6] literal string: setattr
0x1000473E5	0x0000000B	[  6] literal string: setdefault
0x1000473F0	0x00000005	[  6] literal string: sort
0x1000473F5	0x00000007	[  6] literal string: sorted
0x1000473FC	0x00000006	[  6] literal string: split
0x100047402	0x00000006	[  6] literal string: start
0x100047408	0x0000000B	[  6] literal string: startswith
0x100047413	0x0000000D	[  6] literal string: staticmethod
0x100047420	0x00000005	[  6] literal string: step
0x100047425	0x00000005	[  6] literal string: stop
0x10004742A	0x00000004	[  6] literal string: str
0x10004742E	0x00000006	[  6] literal string: strip
0x100047434	0x00000004	[  6] literal string: sum
0x100047438	0x00000006	[  6] literal string: super
0x10004743E	0x00000006	[  6] literal string: throw
0x100047444	0x00000009	[  6] literal string: to_bytes
0x10004744D	0x00000006	[  6] literal string: tuple
0x100047453	0x00000005	[  6] literal string: type
0x100047458	0x00000007	[  6] literal string: update
0x10004745F	0x00000006	[  6] literal string: upper
0x100047465	0x00000006	[  6] literal string: utf-8
0x10004746B	0x00000006	[  6] literal string: value
0x100047471	0x00000007	[  6] literal string: values
0x100047478	0x00000006	[  6] literal string: write
0x10004747E	0x00000004	[  6] literal string: zip
0x100047482	0x00000008	[  6] literal string: __add__
0x10004748A	0x0000000B	[  6] literal string: __aenter__
0x100047495	0x0000000A	[  6] literal string: __aexit__
0x10004749F	0x0000000A	[  6] literal string: __aiter__
0x1000474A9	0x0000000A	[  6] literal string: __anext__
0x1000474B3	0x0000000A	[  6] literal string: __bases__
0x1000474BD	0x00000009	[  6] literal string: __bool__
0x1000474C6	0x00000010	[  6] literal string: __build_class__
0x1000474D6	0x0000000C	[  6] literal string: __complex__
0x1000474E2	0x0000000D	[  6] literal string: __contains__
0x1000474EF	0x00000009	[  6] literal string: __dict__
0x1000474F8	0x00000007	[  6] literal string: __eq__
0x1000474FF	0x0000000A	[  6] literal string: __float__
0x100047509	0x00000007	[  6] literal string: __ge__
0x100047510	0x00000007	[  6] literal string: __gt__
0x100047517	0x00000009	[  6] literal string: __iadd__
0x100047520	0x0000000B	[  6] literal string: __import__
0x10004752B	0x00000009	[  6] literal string: __isub__
0x100047534	0x00000007	[  6] literal string: __le__
0x10004753B	0x00000007	[  6] literal string: __lt__
0x100047542	0x00000007	[  6] literal string: __ne__
0x100047549	0x00000009	[  6] literal string: __path__
0x100047552	0x0000000F	[  6] literal string: __repl_print__
0x100047561	0x0000000D	[  6] literal string: __reversed__
0x10004756E	0x00000008	[  6] literal string: __sub__
0x100047576	0x0000000E	[  6] literal string: __traceback__
0x100047584	0x00000004	[  6] literal string: %#o
0x100047588	0x00000004	[  6] literal string: %#x
0x10004758C	0x00000006	[  6] literal string: {:#b}
0x100047592	0x00000021	[  6] literal string: maximum recursion depth exceeded
0x1000475B3	0x00000009	[  6] literal string: <lambda>
0x1000475BC	0x0000000B	[  6] literal string: <listcomp>
0x1000475C7	0x0000000B	[  6] literal string: <dictcomp>
0x1000475D2	0x0000000A	[  6] literal string: <setcomp>
0x1000475DC	0x0000000A	[  6] literal string: <genexpr>
0x1000475E6	0x00000009	[  6] literal string: <string>
0x1000475EF	0x00000008	[  6] literal string: <stdin>
0x1000475F7	0x00000005	[  6] literal string: None
0x1000475FC	0x00000013	[  6] literal string: StopAsyncIteration
0x10004760F	0x0000000D	[  6] literal string: UnicodeError
0x10004761C	0x0000000F	[  6] literal string: ViperTypeError
0x10004762B	0x00000004	[  6] literal string: add
0x10004762F	0x00000005	[  6] literal string: addi
0x100047634	0x00000006	[  6] literal string: align
0x10004763A	0x00000005	[  6] literal string: and_
0x10004763F	0x0000000A	[  6] literal string: asm_thumb
0x100047649	0x0000000B	[  6] literal string: asm_xtensa
0x100047654	0x00000004	[  6] literal string: asr
0x100047658	0x00000002	[  6] literal string: b
0x10004765A	0x00000005	[  6] literal string: ball
0x10004765F	0x00000005	[  6] literal string: bany
0x100047664	0x00000004	[  6] literal string: bbc
0x100047668	0x00000004	[  6] literal string: bbs
0x10004766C	0x00000004	[  6] literal string: beq
0x100047670	0x00000005	[  6] literal string: beqz
0x100047675	0x00000004	[  6] literal string: bge
0x100047679	0x00000005	[  6] literal string: bgeu
0x10004767E	0x00000004	[  6] literal string: bin
0x100047682	0x00000003	[  6] literal string: bl
0x100047685	0x00000004	[  6] literal string: blt
0x100047689	0x00000006	[  6] literal string: bnall
0x10004768F	0x00000004	[  6] literal string: bne
0x100047693	0x00000005	[  6] literal string: bnez
0x100047698	0x00000006	[  6] literal string: bnone
0x10004769E	0x0000000D	[  6] literal string: bound_method
0x1000476AB	0x00000003	[  6] literal string: bx
0x1000476AE	0x00000009	[  6] literal string: calcsize
0x1000476B7	0x00000007	[  6] literal string: callx0
0x1000476BE	0x00000008	[  6] literal string: closure
0x1000476C6	0x00000004	[  6] literal string: clz
0x1000476CA	0x00000004	[  6] literal string: cmp
0x1000476CE	0x00000008	[  6] literal string: complex
0x1000476D6	0x00000006	[  6] literal string: cpsid
0x1000476DC	0x00000006	[  6] literal string: cpsie
0x1000476E2	0x00000005	[  6] literal string: data
0x1000476E7	0x00000007	[  6] literal string: decode
0x1000476EE	0x00000008	[  6] literal string: default
0x1000476F6	0x00000008	[  6] literal string: delattr
0x1000476FE	0x00000008	[  6] literal string: deleter
0x100047706	0x0000000A	[  6] literal string: dict_view
0x100047710	0x0000000B	[  6] literal string: difference
0x10004771B	0x00000012	[  6] literal string: difference_update
0x10004772D	0x00000008	[  6] literal string: discard
0x100047735	0x00000004	[  6] literal string: doc
0x100047739	0x00000007	[  6] literal string: encode
0x100047740	0x0000000A	[  6] literal string: enumerate
0x10004774A	0x00000006	[  6] literal string: errno
0x100047750	0x00000007	[  6] literal string: filter
0x100047757	0x00000006	[  6] literal string: float
0x10004775D	0x00000009	[  6] literal string: fromkeys
0x100047766	0x00000009	[  6] literal string: function
0x10004776F	0x0000000A	[  6] literal string: generator
0x100047779	0x00000007	[  6] literal string: getter
0x100047780	0x0000000A	[  6] literal string: heap_lock
0x10004778A	0x0000000C	[  6] literal string: heap_unlock
0x100047796	0x00000004	[  6] literal string: hex
0x10004779A	0x00000005	[  6] literal string: imag
0x10004779F	0x0000000D	[  6] literal string: intersection
0x1000477AC	0x00000014	[  6] literal string: intersection_update
0x1000477C0	0x0000000B	[  6] literal string: isdisjoint
0x1000477CB	0x00000009	[  6] literal string: issubset
0x1000477D4	0x0000000B	[  6] literal string: issuperset
0x1000477DF	0x00000009	[  6] literal string: iterable
0x1000477E8	0x00000009	[  6] literal string: iterator
0x1000477F1	0x00000002	[  6] literal string: j
0x1000477F3	0x00000003	[  6] literal string: jx
0x1000477F6	0x00000006	[  6] literal string: l16si
0x1000477FC	0x00000006	[  6] literal string: l16ui
0x100047802	0x00000005	[  6] literal string: l32i
0x100047807	0x00000005	[  6] literal string: l8ui
0x10004780C	0x00000006	[  6] literal string: label
0x100047812	0x00000004	[  6] literal string: ldr
0x100047816	0x00000005	[  6] literal string: ldrb
0x10004781B	0x00000006	[  6] literal string: ldrex
0x100047821	0x00000005	[  6] literal string: ldrh
0x100047826	0x00000004	[  6] literal string: lsl
0x10004782A	0x00000004	[  6] literal string: lsr
0x10004782E	0x00000004	[  6] literal string: max
0x100047832	0x00000004	[  6] literal string: min
0x100047836	0x00000007	[  6] literal string: module
0x10004783D	0x00000004	[  6] literal string: mov
0x100047841	0x00000006	[  6] literal string: mov_n
0x100047847	0x00000005	[  6] literal string: movi
0x10004784C	0x00000005	[  6] literal string: movt
0x100047851	0x00000005	[  6] literal string: movw
0x100047856	0x00000006	[  6] literal string: movwt
0x10004785C	0x00000004	[  6] literal string: mrs
0x100047860	0x00000005	[  6] literal string: mull
0x100047865	0x00000007	[  6] literal string: native
0x10004786C	0x00000004	[  6] literal string: nop
0x100047870	0x00000004	[  6] literal string: oct
0x100047874	0x0000000A	[  6] literal string: opt_level
0x10004787E	0x00000004	[  6] literal string: or_
0x100047882	0x00000005	[  6] literal string: pack
0x100047887	0x0000000A	[  6] literal string: pack_into
0x100047891	0x0000000B	[  6] literal string: pend_throw
0x10004789C	0x00000009	[  6] literal string: property
0x1000478A5	0x00000004	[  6] literal string: ptr
0x1000478A9	0x00000006	[  6] literal string: ptr16
0x1000478AF	0x00000006	[  6] literal string: ptr32
0x1000478B5	0x00000005	[  6] literal string: ptr8
0x1000478BA	0x00000005	[  6] literal string: push
0x1000478BF	0x00000005	[  6] literal string: rbit
0x1000478C4	0x00000005	[  6] literal string: real
0x1000478C9	0x00000006	[  6] literal string: ret_n
0x1000478CF	0x00000009	[  6] literal string: reversed
0x1000478D8	0x00000005	[  6] literal string: s16i
0x1000478DD	0x00000005	[  6] literal string: s32i
0x1000478E2	0x00000004	[  6] literal string: s8i
0x1000478E6	0x00000005	[  6] literal string: sdiv
0x1000478EB	0x00000007	[  6] literal string: setter
0x1000478F2	0x00000006	[  6] literal string: slice
0x1000478F8	0x00000005	[  6] literal string: strb
0x1000478FD	0x00000006	[  6] literal string: strex
0x100047903	0x00000005	[  6] literal string: strh
0x100047908	0x00000004	[  6] literal string: sub
0x10004790C	0x00000015	[  6] literal string: symmetric_difference
0x100047921	0x0000001C	[  6] literal string: symmetric_difference_update
0x10004793D	0x00000005	[  6] literal string: udiv
0x100047942	0x00000005	[  6] literal string: uint
0x100047947	0x00000006	[  6] literal string: union
0x10004794D	0x00000007	[  6] literal string: unpack
0x100047954	0x0000000C	[  6] literal string: unpack_from
0x100047960	0x00000008	[  6] literal string: ustruct
0x100047968	0x00000005	[  6] literal string: vcmp
0x10004796D	0x0000000D	[  6] literal string: vcvt_f32_s32
0x10004797A	0x0000000D	[  6] literal string: vcvt_s32_f32
0x100047987	0x00000006	[  6] literal string: viper
0x10004798D	0x00000005	[  6] literal string: vldr
0x100047992	0x00000005	[  6] literal string: vmov
0x100047997	0x00000005	[  6] literal string: vmrs
0x10004799C	0x00000005	[  6] literal string: vneg
0x1000479A1	0x00000006	[  6] literal string: vsqrt
0x1000479A7	0x00000005	[  6] literal string: vstr
0x1000479AC	0x00000004	[  6] literal string: wfi
0x1000479B0	0x00000004	[  6] literal string: xor
0x1000479B4	0x0000000E	[  6] literal string: name too long
0x1000479C2	0x0000000A	[  6] literal string: find_qstr
0x1000479CC	0x00000007	[  6] literal string: qstr.c
0x1000479D3	0x0000000F	[  6] literal string: *q < pool->len
0x1000479E2	0x0000000E	[  7] literal string: vstr_add_char
0x1000479F0	0x00000007	[  7] literal string: vstr.c
0x1000479F7	0x0000000D	[  7] literal string: c < 0x110000
0x100047A04	0x00000010	[  8] literal string: mp_print_mp_int
0x100047A14	0x0000000A	[  8] literal string: mpprint.c
0x100047A1E	0x00000033	[  8] literal string: base == 2 || base == 8 || base == 10 || base == 16
0x100047A51	0x00000005	[  8] literal string: true
0x100047A56	0x00000006	[  8] literal string: false
0x100047A5C	0x00000007	[  8] literal string: (null)
0x100047A63	0x0000000B	[  8] literal string: mp_vprintf
0x100047A6E	0x00000027	[  8] literal string: *fmt == '%' || !"unsupported fmt char"
0x100047A95	0x00000011	[ 10] literal string: mpz_set_from_str
0x100047AA6	0x00000006	[ 10] literal string: mpz.c
0x100047AAC	0x0000000B	[ 10] literal string: base <= 36
0x100047AB7	0x00000010	[ 10] literal string: mpz_divmod_inpl
0x100047AC7	0x00000012	[ 10] literal string: !mpz_is_zero(rhs)
0x100047AD9	0x00000010	[ 10] literal string: mpz_as_str_inpl
0x100047AE9	0x0000000C	[ 10] literal string: str != NULL
0x100047AF5	0x00000018	[ 10] literal string: 2 <= base && base <= 32
0x100047B0D	0x0000000D	[ 10] literal string: mpz_need_dig
0x100047B1A	0x0000000E	[ 10] literal string: !z->fixed_dig
0x100047B28	0x0000000B	[ 10] literal string: mpn_or_neg
0x100047B33	0x0000000C	[ 10] literal string: carryi == 0
0x100047B3F	0x0000000A	[ 10] literal string: mpz_clone
0x100047B49	0x00000010	[ 10] literal string: src->alloc != 0
0x100047B59	0x00000045	[ 12] literal string: ()[]{},;~:e=<e=c<e=>e=c>e=*e=c*e=+e=-e=e>&e=|e=/e=c/e=%e=^e=@e==e=!.
0x100047B9E	0x00000009	[ 12] literal string: .format(
0x100047BA7	0x00000015	[ 12] literal string: unicode name escapes
0x100047BBC	0x00000006	[ 12] literal string: False
0x100047BC2	0x00000005	[ 12] literal string: True
0x100047BC7	0x0000000A	[ 12] literal string: __debug__
0x100047BD1	0x00000004	[ 12] literal string: and
0x100047BD5	0x00000003	[ 12] literal string: as
0x100047BD8	0x00000007	[ 12] literal string: assert
0x100047BDF	0x00000006	[ 12] literal string: async
0x100047BE5	0x00000006	[ 12] literal string: await
0x100047BEB	0x00000006	[ 12] literal string: break
0x100047BF1	0x00000006	[ 12] literal string: class
0x100047BF7	0x00000009	[ 12] literal string: continue
0x100047C00	0x00000004	[ 12] literal string: def
0x100047C04	0x00000004	[ 12] literal string: del
0x100047C08	0x00000005	[ 12] literal string: elif
0x100047C0D	0x00000005	[ 12] literal string: else
0x100047C12	0x00000007	[ 12] literal string: except
0x100047C19	0x00000008	[ 12] literal string: finally
0x100047C21	0x00000004	[ 12] literal string: for
0x100047C25	0x00000005	[ 12] literal string: from
0x100047C2A	0x00000007	[ 12] literal string: global
0x100047C31	0x00000003	[ 12] literal string: if
0x100047C34	0x00000007	[ 12] literal string: import
0x100047C3B	0x00000003	[ 12] literal string: in
0x100047C3E	0x00000003	[ 12] literal string: is
0x100047C41	0x00000007	[ 12] literal string: lambda
0x100047C48	0x00000009	[ 12] literal string: nonlocal
0x100047C51	0x00000004	[ 12] literal string: not
0x100047C55	0x00000003	[ 12] literal string: or
0x100047C58	0x00000005	[ 12] literal string: pass
0x100047C5D	0x00000006	[ 12] literal string: raise
0x100047C63	0x00000007	[ 12] literal string: return
0x100047C6A	0x00000004	[ 12] literal string: try
0x100047C6E	0x00000006	[ 12] literal string: while
0x100047C74	0x00000005	[ 12] literal string: with
0x100047C79	0x00000006	[ 12] literal string: yield
0x100047C7F	0x00000009	[ 13] literal string: mp_parse
0x100047C88	0x00000008	[ 13] literal string: parse.c
0x100047C90	0x00000016	[ 13] literal string: kind == RULE_ARG_RULE
0x100047CA6	0x00000006	[ 13] literal string: i > 0
0x100047CAC	0x00000007	[ 13] literal string: i == n
0x100047CB3	0x00000031	[ 13] literal string: (rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST
0x100047CE4	0x0000002C	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE
0x100047D10	0x00000007	[ 13] literal string: i >= 1
0x100047D17	0x00000012	[ 13] literal string: unexpected indent
0x100047D29	0x0000002E	[ 13] literal string: unindent doesn't match any outer indent level
0x100047D57	0x00000013	[ 13] literal string: malformed f-string
0x100047D6A	0x00000020	[ 13] literal string: raw f-strings are not supported
0x100047D8A	0x0000000F	[ 13] literal string: invalid syntax
0x100047D99	0x0000001D	[ 13] literal string: parser.result_stack_top == 1
0x100047DB6	0x00000013	[ 13] literal string: push_rule_from_arg
0x100047DC9	0x0000005F	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE
0x100047E28	0x0000000C	[ 13] literal string: peek_result
0x100047E34	0x0000001F	[ 13] literal string: parser->result_stack_top > pos
0x100047E53	0x0000000B	[ 13] literal string: pop_result
0x100047E5E	0x0000001D	[ 13] literal string: parser->result_stack_top > 0
0x100047E7B	0x00000011	[ 13] literal string: push_result_rule
0x100047E8C	0x0000000E	[ 13] literal string: num_args == 2
0x100047E9A	0x0000001D	[ 13] literal string: pn == peek_result(parser, 0)
0x100047EB7	0x0000000F	[ 13] literal string: fold_constants
0x100047EC6	0x00000034	[ 13] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
0x100047EFA	0x0000000F	[ 13] literal string: not a constant
0x100047F09	0x0000001B	[ 13] literal string: elem->value == MP_OBJ_NULL
0x100047F24	0x00000024	[ 13] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
0x100047F48	0x0000001D	[ 13] literal string: mp_parse_node_convert_to_obj
0x100047F65	0x0000001B	[ 13] literal string: mp_parse_node_is_const(pn)
0x100047F80	0x00000033	[ 13] literal string: MP_PARSE_NODE_LEAF_KIND(pn) == MP_PARSE_NODE_TOKEN
0x100047FB3	0x00000019	[ 13] literal string: arg == MP_TOKEN_ELLIPSIS
0x100047FCC	0x00000032	[ 13] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_atom_paren)
0x100047FFE	0x00000040	[ 13] literal string: MP_PARSE_NODE_IS_NULL(((mp_parse_node_struct_t *)pn)->nodes[0])
0x10004803E	0x0000000C	[ 13] literal string: build_tuple
0x10004804A	0x0000002E	[ 13] literal string: peek_rule(parser, 0) == RULE_testlist_comp_3b
0x100048078	0x0000002B	[ 13] literal string: peek_rule(parser, 1) == RULE_testlist_comp
0x1000480A3	0x0000000A	[ 13] literal string: peek_rule
0x1000480AD	0x0000001B	[ 13] literal string: parser->rule_stack_top > n
0x1000480C8	0x0000000A	[ 14] literal string: scope_new
0x1000480D2	0x00000008	[ 14] literal string: scope.c
0x1000480DA	0x0000001C	[ 14] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
0x1000480F6	0x0000001C	[ 14] literal string: scope_close_over_in_parents
0x100048112	0x00000012	[ 14] literal string: s->parent != NULL
0x100048124	0x0000003F	[ 14] literal string: id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL
0x100048163	0x00000024	[ 15] literal string: inline assembler must be a function
0x100048187	0x00000019	[ 15] literal string: compile_scope_inline_asm
0x1000481A0	0x0000000A	[ 15] literal string: compile.c
0x1000481AA	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(scope->pn)
0x1000481CD	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef
0x1000481FA	0x0000000D	[ 15] literal string: unknown type
0x100048207	0x00000028	[ 15] literal string: return annotation must be an identifier
0x10004822F	0x00000022	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(nodes[i])
0x100048251	0x00000023	[ 15] literal string: expecting an assembler instruction
0x100048274	0x00000028	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns2->nodes[0])
0x10004829C	0x0000001C	[ 15] literal string: 'label' requires 1 argument
0x1000482B8	0x00000010	[ 15] literal string: label redefined
0x1000482C8	0x0000001C	[ 15] literal string: 'align' requires 1 argument
0x1000482E4	0x00000025	[ 15] literal string: 'data' requires at least 2 arguments
0x100048309	0x00000022	[ 15] literal string: 'data' requires integer arguments
0x10004832B	0x0000000E	[ 15] literal string: compile_scope
0x100048339	0x0000001C	[ 15] literal string: scope->kind == SCOPE_MODULE
0x100048355	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3
0x10004837E	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2
0x1000483A7	0x00000039	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for)
0x1000483E0	0x0000001B	[ 15] literal string: scope->kind == SCOPE_CLASS
0x1000483FB	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef
0x100048429	0x0000000B	[ 15] literal string: id != NULL
0x100048434	0x0000001C	[ 15] literal string: comp->cur_except_level == 0
0x100048450	0x0000000D	[ 15] literal string: compile_node
0x10004845D	0x00000032	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object
0x10004848F	0x00000012	[ 15] literal string: compile_decorated
0x1000484A1	0x00000035	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)
0x1000484D6	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_ID(name_nodes[j])
0x1000484F9	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns_body->nodes[0])
0x100048525	0x00000033	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef
0x100048558	0x0000001E	[ 15] literal string: invalid micropython decorator
0x100048576	0x0000000D	[ 15] literal string: invalid arch
0x100048583	0x0000001E	[ 15] literal string: compile_funcdef_lambdef_param
0x1000485A1	0x0000001F	[ 15] literal string: pn_kind == PN_varargslist_name
0x1000485C0	0x0000002E	[ 15] literal string: non-default argument follows default argument
0x1000485EE	0x0000000F	[ 15] literal string: * arg after **
0x1000485FD	0x0000000E	[ 15] literal string: too many args
0x10004860B	0x00000021	[ 15] literal string: LHS of keyword arg must be an id
0x10004862C	0x00000018	[ 15] literal string: positional arg after **
0x100048644	0x00000021	[ 15] literal string: positional arg after keyword arg
0x100048665	0x0000001B	[ 15] literal string: can't assign to expression
0x100048680	0x00000016	[ 15] literal string: compile_comprehension
0x100048696	0x00000012	[ 15] literal string: compile_expr_stmt
0x1000486A8	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0])
0x1000486CF	0x00000009	[ 15] literal string: c_assign
0x1000486D8	0x0000001B	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn)
0x1000486F3	0x0000003E	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)
0x100048731	0x00000013	[ 15] literal string: c_assign_atom_expr
0x100048744	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1])
0x100048770	0x0000001A	[ 15] literal string: multiple *x in assignment
0x10004878A	0x0000000B	[ 15] literal string: c_del_stmt
0x100048795	0x00000033	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp)
0x1000487C8	0x00000018	[ 15] literal string: can't delete expression
0x1000487E0	0x00000020	[ 15] literal string: 'break'/'continue' outside loop
0x100048800	0x00000018	[ 15] literal string: compile_break_cont_stmt
0x100048818	0x0000003C	[ 15] literal string: comp->cur_except_level >= comp->break_continue_except_level
0x100048854	0x0000001A	[ 15] literal string: 'return' outside function
0x10004886E	0x0000000A	[ 15] literal string: c_if_cond
0x100048878	0x0000000F	[ 15] literal string: do_import_name
0x100048887	0x00000031	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)
0x1000488B8	0x00000014	[ 15] literal string: compile_import_from
0x1000488CC	0x00000029	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn_import_source)
0x1000488F5	0x0000001D	[ 15] literal string: import * not at module level
0x100048912	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name)
0x10004894F	0x00000025	[ 15] literal string: can't declare nonlocal in outer code
0x100048974	0x0000001F	[ 15] literal string: identifier redefined as global
0x100048993	0x0000001E	[ 15] literal string: no binding for nonlocal found
0x1000489B1	0x00000021	[ 15] literal string: identifier redefined as nonlocal
0x1000489D2	0x00000013	[ 15] literal string: compile_async_stmt
0x1000489E5	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[0])
0x100048A0C	0x00000026	[ 15] literal string: async for/with outside async function
0x100048A32	0x00000030	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns0) == PN_with_stmt
0x100048A62	0x0000001E	[ 15] literal string: compile_decrease_except_level
0x100048A80	0x0000001B	[ 15] literal string: comp->cur_except_level > 0
0x100048A9B	0x00000018	[ 15] literal string: compile_async_with_stmt
0x100048AB3	0x00000006	[ 15] literal string: n > 0
0x100048AB9	0x00000010	[ 15] literal string: compile_if_stmt
0x100048AC9	0x0000003A	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)
0x100048B03	0x00000021	[ 15] literal string: compile_for_stmt_optimised_range
0x100048B24	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_SMALL_INT(pn_step)
0x100048B48	0x00000011	[ 15] literal string: compile_try_stmt
0x100048B59	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
0x100048B80	0x00000014	[ 15] literal string: compile_try_finally
0x100048B94	0x0000001F	[ 15] literal string: MP_PARSE_NODE_IS_NULL(pn_else)
0x100048BB3	0x00000013	[ 15] literal string: compile_try_except
0x100048BC6	0x00000040	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)
0x100048C06	0x0000001E	[ 15] literal string: default 'except' must be last
0x100048C24	0x00000012	[ 15] literal string: compile_with_stmt
0x100048C36	0x00000015	[ 15] literal string: compile_test_if_expr
0x100048C4B	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else)
0x100048C88	0x00000013	[ 15] literal string: compile_comparison
0x100048C9B	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])
0x100048CC2	0x00000016	[ 15] literal string: kind == PN_comp_op_is
0x100048CD8	0x0000001D	[ 15] literal string: *x must be assignment target
0x100048CF5	0x00000011	[ 15] literal string: compile_factor_2
0x100048D06	0x00000019	[ 15] literal string: 'await' outside function
0x100048D1F	0x00000018	[ 15] literal string: super() can't find self
0x100048D37	0x00000013	[ 15] literal string: compile_atom_paren
0x100048D4A	0x0000001A	[ 15] literal string: compile_atom_brace_helper
0x100048D64	0x0000001D	[ 15] literal string: expecting key:value for dict
0x100048D81	0x0000001F	[ 15] literal string: expecting just a value for set
0x100048DA0	0x0000002F	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for
0x100048DCF	0x00000012	[ 15] literal string: compile_subscript
0x100048DE1	0x00000031	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_subscript_3
0x100048E12	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_sliceop
0x100048E3F	0x00000019	[ 15] literal string: 'yield' outside function
0x100048E58	0x00000020	[ 15] literal string: compile_scope_func_lambda_param
0x100048E78	0x00000037	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)
0x100048EAF	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star
0x100048EDD	0x00000015	[ 15] literal string: argument name reused
0x100048EF2	0x00000012	[ 15] literal string: unknown type '%q'
0x100048F04	0x00000021	[ 15] literal string: annotation must be an identifier
0x100048F25	0x00000018	[ 15] literal string: compile_scope_comp_iter
0x100048F3D	0x0000004C	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t *)pn_iter) == PN_comp_for
0x100048F89	0x00000015	[ 15] literal string: scope_compute_things
0x100048F9E	0x00000021	[ 15] literal string: !(id2->flags & ID_FLAG_IS_PARAM)
0x100048FBF	0x00000015	[ 16] literal string: mp_emit_common_id_op
0x100048FD4	0x0000000D	[ 16] literal string: emitcommon.c
0x100048FE1	0x0000003F	[ 16] literal string: id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE
0x100049020	0x00000014	[ 17] literal string: mp_emit_bc_end_pass
0x100049034	0x00000009	[ 17] literal string: emitbc.c
0x10004903D	0x00000016	[ 17] literal string: emit->stack_size == 0
0x100049053	0x00000015	[ 17] literal string: id->local_num <= 255
0x100049068	0x0000002F	[ 17] literal string: emit->code_info_offset <= emit->code_info_size
0x100049097	0x0000002D	[ 17] literal string: emit->bytecode_offset <= emit->bytecode_size
0x1000490C4	0x00000012	[ 17] literal string: bytecode overflow
0x1000490D6	0x0000001D	[ 17] literal string: mp_emit_bc_adjust_stack_size
0x1000490F3	0x00000028	[ 17] literal string: (mp_int_t)emit->stack_size + delta >= 0
0x10004911B	0x00000018	[ 17] literal string: mp_emit_bc_label_assign
0x100049133	0x00000019	[ 17] literal string: l < emit->max_num_labels
0x10004914C	0x00000054	[ 17] literal string: emit->pass == MP_PASS_STACK_SIZE || emit->bytecode_offset <= emit->label_offsets[l]
0x1000491A0	0x00000020	[ 17] literal string: mp_emit_bc_load_const_small_int
0x1000491C0	0x00000017	[ 17] literal string: MP_SMALL_INT_FITS(arg)
0x1000491D7	0x00000018	[ 17] literal string: mp_emit_bc_make_closure
0x1000491EF	0x00000015	[ 17] literal string: n_closed_over <= 255
0x100049204	0x00000019	[ 17] literal string: mp_emit_bc_raise_varargs
0x10004921D	0x0000000C	[ 17] literal string: n_args <= 2
0x100049229	0x00000020	[ 17] literal string: emit_get_cur_to_write_code_info
0x100049249	0x00000044	[ 17] literal string: emit->code_info_offset + num_bytes_to_write <= emit->code_info_size
0x10004928D	0x00000021	[ 17] literal string: emit_write_code_info_bytes_lines
0x1000492AE	0x00000027	[ 17] literal string: bytes_to_skip > 0 || lines_to_skip > 0
0x1000492D5	0x0000001F	[ 17] literal string: emit_get_cur_to_write_bytecode
0x1000492F4	0x00000042	[ 17] literal string: emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size
0x100049336	0x0000001F	[ 17] literal string: emit_write_bytecode_byte_label
0x100049355	0x00000022	[ 17] literal string: is_signed || bytecode_offset >= 0
0x100049377	0x00000030	[ 17] literal string: 0 <= bytecode_offset && bytecode_offset <= 0x7f
0x1000493A7	0x00000017	[ 18] literal string: mp_asm_base_start_pass
0x1000493BE	0x0000000A	[ 18] literal string: asmbase.c
0x1000493C8	0x00000016	[ 18] literal string: as->code_base != NULL
0x1000493DE	0x00000023	[ 18] literal string: mp_asm_base_get_cur_to_write_bytes
0x100049401	0x00000036	[ 18] literal string: as->code_offset + num_bytes_to_write <= as->code_size
0x100049437	0x00000019	[ 18] literal string: mp_asm_base_label_assign
0x100049450	0x0000001B	[ 18] literal string: label < as->max_num_labels
0x10004946B	0x00000027	[ 18] literal string: as->label_offsets[label] == (size_t)-1
0x100049492	0x0000002C	[ 18] literal string: as->label_offsets[label] == as->code_offset
0x1000494BE	0x00000018	[ 19] literal string: asm_x64_test_r8_with_r8
0x1000494D6	0x00000009	[ 19] literal string: asmx64.c
0x1000494DF	0x0000000E	[ 19] literal string: src_r64_a < 8
0x1000494ED	0x0000000E	[ 19] literal string: src_r64_b < 8
0x1000494FB	0x00000011	[ 19] literal string: asm_x64_setcc_r8
0x10004950C	0x0000000C	[ 19] literal string: dest_r8 < 8
0x100049518	0x00000010	[ 19] literal string: asm_x64_jmp_reg
0x100049528	0x0000000C	[ 19] literal string: src_r64 < 8
0x100049534	0x0000000E	[ 19] literal string: asm_x64_entry
0x100049542	0x00000010	[ 19] literal string: num_locals >= 0
0x100049552	0x00000011	[ 19] literal string: asm_x64_call_ind
0x100049563	0x0000000D	[ 19] literal string: temp_r64 < 8
0x100049570	0x0000000F	[ 19] literal string: get_label_dest
0x10004957F	0x00000020	[ 19] literal string: label < as->base.max_num_labels
0x10004959F	0x00000017	[ 20] literal string: emit_native_start_pass
0x1000495B6	0x0000000D	[ 20] literal string: emitnative.c
0x1000495C3	0x00000028	[ 20] literal string: id->local_num < emit->local_vtype_alloc
0x1000495EB	0x00000015	[ 20] literal string: emit_native_end_pass
0x100049600	0x0000001A	[ 20] literal string: emit->exc_stack_size == 0
0x10004961A	0x0000003B	[ 20] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
0x100049655	0x0000000D	[ 20] literal string: adjust_stack
0x100049662	0x00000033	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
0x100049695	0x00000052	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
0x1000496E7	0x00000022	[ 20] literal string: local '%q' used before type known
0x100049709	0x00000015	[ 20] literal string: conversion to object
0x10004971E	0x0000002C	[ 20] literal string: local '%q' has type '%q' but source is '%q'
0x10004974A	0x00000019	[ 20] literal string: emit_native_store_global
0x100049763	0x00000015	[ 20] literal string: vtype == VTYPE_PYOBJ
0x100049778	0x0000001C	[ 20] literal string: emit_native_leave_exc_stack
0x100049794	0x00000019	[ 20] literal string: emit->exc_stack_size > 0
0x1000497AD	0x00000018	[ 20] literal string: emit_native_import_name
0x1000497C5	0x0000001E	[ 20] literal string: vtype_fromlist == VTYPE_PYOBJ
0x1000497E3	0x0000001B	[ 20] literal string: vtype_level == VTYPE_PYOBJ
0x1000497FE	0x00000018	[ 20] literal string: emit_native_import_from
0x100049816	0x0000001C	[ 20] literal string: vtype_module == VTYPE_PYOBJ
0x100049832	0x00000018	[ 20] literal string: emit_native_import_star
0x10004984A	0x00000018	[ 20] literal string: emit_native_load_method
0x100049862	0x0000001A	[ 20] literal string: vtype_base == VTYPE_PYOBJ
0x10004987C	0x00000026	[ 20] literal string: emit_get_stack_pointer_to_reg_for_pop
0x1000498A2	0x00000018	[ 20] literal string: si->kind == STACK_VALUE
0x1000498BA	0x00000015	[ 20] literal string: can't load from '%q'
0x1000498CF	0x0000001B	[ 20] literal string: can't load with '%q' index
0x1000498EA	0x00000011	[ 20] literal string: can't store '%q'
0x1000498FB	0x00000014	[ 20] literal string: can't store to '%q'
0x10004990F	0x0000001C	[ 20] literal string: can't store with '%q' index
0x10004992B	0x0000001A	[ 20] literal string: emit_native_delete_subscr
0x100049945	0x0000001B	[ 20] literal string: vtype_index == VTYPE_PYOBJ
0x100049960	0x00000016	[ 20] literal string: emit_native_load_attr
0x100049976	0x00000017	[ 20] literal string: emit_native_store_attr
0x10004998D	0x00000018	[ 20] literal string: emit_native_delete_attr
0x1000499A5	0x00000028	[ 20] literal string: can't implicitly convert '%q' to 'bool'
0x1000499CD	0x00000017	[ 20] literal string: emit_native_setup_with
0x1000499E4	0x0000001A	[ 20] literal string: emit_native_pop_exc_stack
0x1000499FE	0x00000016	[ 20] literal string: e->is_active == false
0x100049A14	0x00000015	[ 20] literal string: emit_native_get_iter
0x100049A29	0x0000001C	[ 20] literal string: unary op %q not implemented
0x100049A45	0x00000021	[ 20] literal string: div/mod not implemented for uint
0x100049A66	0x0000001B	[ 20] literal string: comparison of int and uint
0x100049A81	0x0000001D	[ 20] literal string: binary op %q not implemented
0x100049A9E	0x00000029	[ 20] literal string: can't do binary op between '%q' and '%q'
0x100049AC7	0x00000018	[ 20] literal string: emit_native_build_slice
0x100049ADF	0x0000001B	[ 20] literal string: vtype_start == VTYPE_PYOBJ
0x100049AFA	0x0000001A	[ 20] literal string: vtype_stop == VTYPE_PYOBJ
0x100049B14	0x0000000C	[ 20] literal string: n_args == 3
0x100049B20	0x0000001A	[ 20] literal string: vtype_step == VTYPE_PYOBJ
0x100049B3A	0x00000016	[ 20] literal string: emit_native_store_map
0x100049B50	0x00000019	[ 20] literal string: vtype_key == VTYPE_PYOBJ
0x100049B69	0x0000001B	[ 20] literal string: vtype_value == VTYPE_PYOBJ
0x100049B84	0x00000019	[ 20] literal string: vtype_map == VTYPE_PYOBJ
0x100049B9D	0x00000017	[ 20] literal string: emit_native_store_comp
0x100049BB4	0x0000001A	[ 20] literal string: vtype_item == VTYPE_PYOBJ
0x100049BCE	0x00000020	[ 20] literal string: vtype_collection == VTYPE_PYOBJ
0x100049BEE	0x0000001C	[ 20] literal string: emit_native_unpack_sequence
0x100049C0A	0x00000016	[ 20] literal string: emit_native_unpack_ex
0x100049C20	0x0000001A	[ 20] literal string: emit_native_call_function
0x100049C3A	0x00000024	[ 20] literal string: n_positional == 1 && n_keyword == 0
0x100049C5E	0x0000000C	[ 20] literal string: !star_flags
0x100049C6A	0x00000008	[ 20] literal string: casting
0x100049C72	0x00000019	[ 20] literal string: vtype_fun == VTYPE_PYOBJ
0x100049C8B	0x00000022	[ 20] literal string: return expected '%q' but got '%q'
0x100049CAD	0x00000019	[ 20] literal string: emit_native_return_value
0x100049CC6	0x0000001A	[ 20] literal string: emit_native_raise_varargs
0x100049CE0	0x0000000C	[ 20] literal string: n_args == 1
0x100049CEC	0x00000015	[ 20] literal string: must raise an object
0x100049D01	0x0000000D	[ 20] literal string: native yield
0x100049D0E	0x0000000E	[ 21] literal string: asm_x86_entry
0x100049D1C	0x00000009	[ 21] literal string: asmx86.c
0x100049D25	0x00000011	[ 21] literal string: asm_x86_call_ind
0x100049D36	0x0000000C	[ 21] literal string: n_args <= 4
0x100049D42	0x00000010	[ 23] literal string: asm_thumb_entry
0x100049D52	0x0000000B	[ 23] literal string: asmthumb.c
0x100049D5D	0x00000013	[ 23] literal string: asm_thumb_format_4
0x100049D70	0x0000001C	[ 23] literal string: rlo_dest < ASM_THUMB_REG_R8
0x100049D8C	0x0000001B	[ 23] literal string: rlo_src < ASM_THUMB_REG_R8
0x100049DA7	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i16
0x100049DBD	0x0000001D	[ 23] literal string: reg_dest < ASM_THUMB_REG_R15
0x100049DDA	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i32
0x100049DF0	0x0000001C	[ 23] literal string: reg_dest < ASM_THUMB_REG_R8
0x100049E0C	0x0000003D	[ 23] literal string: !as->base.code_base || !(3u & (uintptr_t)as->base.code_base)
0x100049E49	0x00000020	[ 23] literal string: asm_thumb_mov_reg_i32_optimised
0x100049E69	0x00000010	[ 23] literal string: clz + ctz <= 32
0x100049E79	0x00000018	[ 23] literal string: asm_thumb_mov_local_reg
0x100049E91	0x00000018	[ 23] literal string: asm_thumb_mov_reg_local
0x100049EA9	0x0000001D	[ 23] literal string: asm_thumb_mov_reg_local_addr
0x100049EC6	0x00000035	[ 23] literal string: as->base.pass < MP_ASM_PASS_EMIT || word_offset >= 0
0x100049EFB	0x00000016	[ 23] literal string: native method too big
0x100049F11	0x00000013	[ 23] literal string: asm_thumb_bcc_rel9
0x100049F24	0x00000011	[ 23] literal string: SIGNED_FIT9(rel)
0x100049F35	0x00000012	[ 23] literal string: asm_thumb_b_rel12
0x100049F47	0x00000012	[ 23] literal string: SIGNED_FIT12(rel)
0x100049F59	0x00000013	[ 23] literal string: asm_thumb_format_3
0x100049F6C	0x0000000B	[ 23] literal string: asmthumb.h
0x100049F77	0x00000017	[ 23] literal string: rlo < ASM_THUMB_REG_R8
0x100049F8E	0x0000001A	[ 23] literal string: asm_thumb_mov_local_check
0x100049FA8	0x00000011	[ 23] literal string: word_offset >= 0
0x100049FB9	0x00000022	[ 23] literal string: too many locals for native method
0x100049FDB	0x00000014	[ 23] literal string: asm_thumb_format_11
0x100049FEF	0x0000001D	[ 23] literal string: asm_thumb_add_reg_reg_offset
0x10004A00C	0x00000002	[ 23] literal string: 0
0x10004A00E	0x00000033	[ 25] literal string: can only have up to 4 parameters to Thumb assembly
0x10004A041	0x00000032	[ 25] literal string: parameters must be registers in sequence r0 to r3
0x10004A073	0x00000018	[ 25] literal string: emit_inline_thumb_label
0x10004A08B	0x00000012	[ 25] literal string: emitinlinethumb.c
0x10004A09D	0x00000021	[ 25] literal string: label_num < emit->max_num_labels
0x10004A0BE	0x0000000A	[ 25] literal string: APSR_nzcv
0x10004A0C8	0x00000006	[ 25] literal string: FPSCR
0x10004A0CE	0x00000035	[ 25] literal string: unsupported Thumb instruction '%s' with %d arguments
0x10004A103	0x00000014	[ 25] literal string: branch not in range
0x10004A117	0x00000019	[ 25] literal string: '%s' expects at most r%d
0x10004A130	0x0000001D	[ 25] literal string: '%s' expects an FPU register
0x10004A14D	0x00000018	[ 25] literal string: '%s' expects a register
0x10004A165	0x0000002B	[ 25] literal string: '%s' expects an address of the form [a, b]
0x10004A190	0x00000018	[ 25] literal string: '%s' expects an integer
0x10004A1A8	0x0000002B	[ 25] literal string: '%s' integer 0x%x doesn't fit in mask 0x%x
0x10004A1D3	0x00000015	[ 25] literal string: '%s' expects a label
0x10004A1E8	0x00000017	[ 25] literal string: label '%q' not defined
0x10004A1FF	0x00000010	[ 25] literal string: get_arg_reglist
0x10004A20F	0x00000029	[ 25] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 1
0x10004A238	0x0000001B	[ 25] literal string: '%s' expects {r0, r1, ...}
0x10004A253	0x00000020	[ 25] literal string: '%s' expects a special register
0x10004A273	0x00000013	[ 25] literal string: asm_thumb_format_1
0x10004A286	0x00000013	[ 25] literal string: asm_thumb_format_2
0x10004A299	0x0000000E	[ 26] literal string: asm_arm_entry
0x10004A2A7	0x00000009	[ 26] literal string: asmarm.c
0x10004A2B0	0x00000016	[ 26] literal string: asm_arm_mov_reg_pcrel
0x10004A2C6	0x00000012	[ 26] literal string: asm_arm_bcc_label
0x10004A2D8	0x0000000F	[ 26] literal string: asm_arm_bl_ind
0x10004A2E7	0x00000016	[ 26] literal string: fun_id < (0x1000 / 4)
0x10004A2FD	0x00000013	[ 26] literal string: asm_arm_op_mul_reg
0x10004A310	0x00000009	[ 26] literal string: rd != rm
0x10004A319	0x0000002C	[ 26] literal string: asm_arm_bcc: branch does not fit in 24 bits
0x10004A345	0x0000000D	[ 28] literal string: asm overflow
0x10004A352	0x0000000C	[ 28] literal string: asmxtensa.c
0x10004A35E	0x00000020	[ 28] literal string: ERROR: xtensa bccz out of range
0x10004A37E	0x0000001F	[ 28] literal string: ERROR: xtensa bcc out of range
0x10004A39D	0x00000034	[ 30] literal string: can only have up to 4 parameters to Xtensa assembly
0x10004A3D1	0x00000032	[ 30] literal string: parameters must be registers in sequence a2 to a5
0x10004A403	0x00000019	[ 30] literal string: emit_inline_xtensa_label
0x10004A41C	0x00000013	[ 30] literal string: emitinlinextensa.c
0x10004A42F	0x00000036	[ 30] literal string: unsupported Xtensa instruction '%s' with %d arguments
0x10004A465	0x0000002A	[ 30] literal string: '%s' integer %d isn't within range %d..%d
0x10004A48F	0x00000010	[ 32] literal string: mp_format_float
0x10004A49F	0x0000000E	[ 32] literal string: formatfloat.c
0x10004A4AD	0x00000022	[ 32] literal string: (size_t)(s + 1 - buf) <= buf_size
0x10004A4CF	0x00000023	[ 34] literal string: int() arg 2 must be >= 2 and <= 36
0x10004A4F2	0x0000002A	[ 34] literal string: invalid syntax for integer with base %d: 
0x10004A51C	0x0000001A	[ 34] literal string: invalid syntax for number
0x10004A536	0x0000001A	[ 34] literal string: mp_obj_new_exception_arg1
0x10004A550	0x00000006	[ 34] literal string: obj.h
0x10004A556	0x00000030	[ 34] literal string: exc_type->make_new == mp_obj_exception_make_new
0x10004A586	0x0000001B	[ 35] literal string: mp_emit_glue_assign_native
0x10004A5A1	0x0000000B	[ 35] literal string: emitglue.c
0x10004A5AC	0x00000058	[ 35] literal string: kind == MP_CODE_NATIVE_PY || kind == MP_CODE_NATIVE_VIPER || kind == MP_CODE_NATIVE_ASM
0x10004A604	0x00000009	[ 36] literal string: save_obj
0x10004A60D	0x00000011	[ 36] literal string: persistentcode.c
0x10004A61E	0x00000013	[ 36] literal string: mp_obj_is_float(o)
0x10004A631	0x0000000C	[ 37] literal string: mp_unary_op
0x10004A63D	0x0000000A	[ 37] literal string: runtime.c
0x10004A647	0x00000019	[ 37] literal string: op == MP_UNARY_OP_INVERT
0x10004A660	0x00000018	[ 37] literal string: can't convert %s to int
0x10004A678	0x0000001E	[ 37] literal string: unsupported type for %q: '%s'
0x10004A696	0x00000015	[ 37] literal string: negative shift count
0x10004A6AB	0x00000025	[ 37] literal string: unsupported types for %q: '%s', '%s'
0x10004A6D0	0x0000000F	[ 37] literal string: divide by zero
0x10004A6DF	0x0000001B	[ 37] literal string: '%s' object isn't callable
0x10004A6FA	0x00000015	[ 37] literal string: mp_load_method_maybe
0x10004A70F	0x0000002E	[ 37] literal string: type->locals_dict->base.type == &mp_type_dict
0x10004A73D	0x0000000B	[ 37] literal string: mp_getiter
0x10004A748	0x00000005	[ 37] literal string: o_in
0x10004A74D	0x0000001B	[ 37] literal string: '%s' object isn't iterable
0x10004A768	0x0000001E	[ 37] literal string: '%s' object isn't an iterator
0x10004A786	0x00000029	[ 37] literal string: memory allocation failed, heap is locked
0x10004A7AF	0x0000002E	[ 37] literal string: memory allocation failed, allocating %u bytes
0x10004A7DD	0x00000025	[ 37] literal string: argument should be a '%q' not a '%q'
0x10004A802	0x00000016	[ 37] literal string: mp_map_slot_is_filled
0x10004A818	0x00000011	[ 37] literal string: pos < map->alloc
0x10004A829	0x00000028	[ 44] literal string: function doesn't take keyword arguments
0x10004A851	0x00000039	[ 44] literal string: function takes %d positional arguments but %d were given
0x10004A88A	0x00000032	[ 44] literal string: function missing %d required positional arguments
0x10004A8BC	0x0000002F	[ 44] literal string: function expected at most %d arguments, got %d
0x10004A8EB	0x00000017	[ 44] literal string: '%q' argument required
0x10004A902	0x00000011	[ 44] literal string: mp_arg_parse_all
0x10004A913	0x0000000B	[ 44] literal string: argcheck.c
0x10004A91E	0x00000034	[ 44] literal string: (allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ
0x10004A952	0x00000021	[ 44] literal string: extra positional arguments given
0x10004A973	0x0000001E	[ 44] literal string: extra keyword arguments given
0x10004A991	0x00000042	[ 44] literal string: keyword argument(s) not yet implemented - use normal args instead
0x10004A9D3	0x00000003	[ 45] literal string: : 
0x10004A9D6	0x0000000E	[ 46] literal string: mp_map_lookup
0x10004A9E4	0x00000006	[ 46] literal string: map.c
0x10004A9EA	0x0000002F	[ 46] literal string: !map->is_fixed || lookup_kind == MP_MAP_LOOKUP
0x10004AA19	0x00000006	[ 47] literal string: (nil)
0x10004AA1F	0x00000005	[ 47] literal string: <%q>
0x10004AA24	0x00000017	[ 47] literal string: mp_obj_print_exception
0x10004AA3B	0x00000006	[ 47] literal string: obj.c
0x10004AA41	0x0000000B	[ 47] literal string: n % 3 == 0
0x10004AA4C	0x00000024	[ 47] literal string: Traceback (most recent call last):\n
0x10004AA70	0x00000015	[ 47] literal string:   File "%q", line %d
0x10004AA85	0x00000009	[ 47] literal string: , in %q\n
0x10004AA8E	0x0000001A	[ 47] literal string: can't convert %s to float
0x10004AAA8	0x0000001C	[ 47] literal string: can't convert %s to complex
0x10004AAC4	0x00000022	[ 47] literal string: object '%s' isn't a tuple or list
0x10004AAE6	0x00000024	[ 47] literal string: %q indices must be integers, not %s
0x10004AB0A	0x00000016	[ 47] literal string: %q index out of range
0x10004AB20	0x0000002A	[ 47] literal string: '%s' object doesn't support item deletion
0x10004AB4A	0x00000020	[ 47] literal string: '%s' object isn't subscriptable
0x10004AB6A	0x0000002C	[ 47] literal string: '%s' object doesn't support item assignment
0x10004AB96	0x00000025	[ 47] literal string: object with buffer protocol required
0x10004ABBB	0x0000000D	[ 48] literal string: array_append
0x10004ABC8	0x0000000B	[ 48] literal string: objarray.c
0x10004ABD3	0x00000090	[ 48] literal string: (MICROPY_PY_BUILTINS_BYTEARRAY && mp_obj_is_type(self_in, &mp_type_bytearray)) || (MICROPY_PY_ARRAY && mp_obj_is_type(self_in, &mp_type_array))
0x10004AC63	0x0000000D	[ 48] literal string: array_extend
0x10004AC70	0x0000000C	[ 48] literal string: bytearray(b
0x10004AC7C	0x0000000B	[ 48] literal string: array('%c'
0x10004AC87	0x00000004	[ 48] literal string: , [
0x10004AC8B	0x00000003	[ 48] literal string: , 
0x10004AC8E	0x00000002	[ 48] literal string: ]
0x10004AC90	0x00000002	[ 48] literal string: )
0x10004AC92	0x00000031	[ 48] literal string: only slices with step=1 (aka None) are supported
0x10004ACC3	0x0000000D	[ 48] literal string: array_subscr
0x10004ACD0	0x00000007	[ 48] literal string: sz > 0
0x10004ACD7	0x00000013	[ 53] literal string: mp_obj_complex_get
0x10004ACEA	0x0000000D	[ 53] literal string: objcomplex.c
0x10004ACF7	0x0000002A	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_complex)
0x10004AD21	0x00000027	[ 53] literal string: can't truncate-divide a complex number
0x10004AD48	0x00000017	[ 53] literal string: complex divide by zero
0x10004AD5F	0x00000017	[ 53] literal string: 0.0 to a complex power
0x10004AD76	0x00000004	[ 53] literal string: %sj
0x10004AD7A	0x00000004	[ 53] literal string: (%s
0x10004AD7E	0x00000002	[ 53] literal string: +
0x10004AD80	0x00000005	[ 53] literal string: %sj)
0x10004AD85	0x00000026	[ 54] literal string: dict update sequence has wrong length
0x10004ADAB	0x0000000F	[ 54] literal string: dict_iter_next
0x10004ADBA	0x0000000A	[ 54] literal string: objdict.c
0x10004ADC4	0x0000001B	[ 54] literal string: map->used == 0 || i == max
0x10004ADDF	0x00000002	[ 54] literal string: {
0x10004ADE1	0x00000002	[ 54] literal string: }
0x10004ADE3	0x00000003	[ 54] literal string: ([
0x10004ADE6	0x00000003	[ 54] literal string: ])
0x10004ADE9	0x0000000B	[ 54] literal string: dict_items
0x10004ADF4	0x0000000A	[ 54] literal string: dict_keys
0x10004ADFE	0x0000000C	[ 54] literal string: dict_values
0x10004AE0A	0x0000001F	[ 54] literal string: popitem(): dictionary is empty
0x10004AE29	0x0000000D	[ 54] literal string: dict_popitem
0x10004AE36	0x00000015	[ 56] literal string: mp_obj_new_exception
0x10004AE4B	0x0000000C	[ 56] literal string: objexcept.c
0x10004AE57	0x00000019	[ 56] literal string: mp_obj_new_exception_msg
0x10004AE70	0x0000001F	[ 56] literal string: mp_obj_new_exception_msg_vlist
0x10004AE8F	0x0000000C	[ 56] literal string: fmt != NULL
0x10004AE9B	0x00000015	[ 56] literal string: get_native_exception
0x10004AEB0	0x00000026	[ 56] literal string: mp_obj_is_exception_instance(self_in)
0x10004AED6	0x00000011	[ 58] literal string: mp_obj_float_get
0x10004AEE7	0x0000000B	[ 58] literal string: objfloat.c
0x10004AEF2	0x00000019	[ 58] literal string: mp_obj_is_float(self_in)
0x10004AF0B	0x00000003	[ 58] literal string: .0
0x10004AF0E	0x00000009	[ 59] literal string: objfun.c
0x10004AF17	0x00000013	[ 59] literal string: fun_builtin_1_call
0x10004AF2A	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
0x10004AF5A	0x00000013	[ 59] literal string: fun_builtin_2_call
0x10004AF6D	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
0x10004AF9D	0x00000013	[ 59] literal string: fun_builtin_3_call
0x10004AFB0	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
0x10004AFE0	0x00000015	[ 59] literal string: fun_builtin_var_call
0x10004AFF5	0x00000032	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
0x10004B027	0x00000019	[ 62] literal string: can't convert inf to int
0x10004B040	0x00000019	[ 62] literal string: can't convert NaN to int
0x10004B059	0x00000013	[ 62] literal string: mp_int_format_size
0x10004B06C	0x00000009	[ 62] literal string: objint.c
0x10004B075	0x00000018	[ 62] literal string: 2 <= base && base <= 16
0x10004B08D	0x00000015	[ 62] literal string: mp_obj_int_formatted
0x10004B0A2	0x0000002C	[ 62] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
0x10004B0CE	0x0000001A	[ 63] literal string: mp_obj_int_formatted_impl
0x10004B0E8	0x0000000D	[ 63] literal string: objint_mpz.c
0x10004B0F5	0x00000019	[ 63] literal string: mp_obj_int_to_bytes_impl
0x10004B10E	0x00000015	[ 63] literal string: mp_obj_int_binary_op
0x10004B123	0x0000002B	[ 63] literal string: mp_obj_is_exact_type(lhs_in, &mp_type_int)
0x10004B14E	0x0000001A	[ 63] literal string: op == MP_BINARY_OP_DIVMOD
0x10004B168	0x0000002D	[ 63] literal string: overflow converting long int to machine word
0x10004B195	0x00000019	[ 63] literal string: mp_obj_int_as_float_impl
0x10004B1AE	0x00000014	[ 64] literal string: pop from empty list
0x10004B1C2	0x00000002	[ 64] literal string: [
0x10004B1C4	0x0000000C	[ 64] literal string: list_subscr
0x10004B1D0	0x0000000A	[ 64] literal string: objlist.c
0x10004B1DA	0x0000000D	[ 64] literal string: len_adj <= 0
0x10004B1E7	0x00000016	[ 67] literal string: arg must be user-type
0x10004B1FD	0x00000003	[ 74] literal string: %q
0x10004B200	0x00000019	[ 75] literal string: slice step can't be zero
0x10004B219	0x00000007	[ 75] literal string: slice(
0x10004B220	0x00000004	[ 76] literal string: \%c
0x10004B224	0x00000003	[ 76] literal string: \\
0x10004B227	0x00000003	[ 76] literal string: \n
0x10004B22A	0x00000003	[ 76] literal string: \r
0x10004B22D	0x00000003	[ 76] literal string: \t
0x10004B230	0x00000007	[ 76] literal string: \x%02x
0x10004B237	0x00000010	[ 76] literal string: empty separator
0x10004B247	0x00000045	[ 76] literal string: join expects a list of str/bytes objects consistent with self object
0x10004B28C	0x0000000F	[ 76] literal string: rsplit(None,n)
0x10004B29B	0x00000014	[ 76] literal string: substring not found
0x10004B2AF	0x00000012	[ 76] literal string: start/end indices
0x10004B2C1	0x00000007	[ 76] literal string:  	\n
0x10004B2C8	0x0000000E	[ 76] literal string: str_uni_strip
0x10004B2D6	0x00000009	[ 76] literal string: objstr.c
0x10004B2DF	0x0000002A	[ 76] literal string: last_good_char_pos >= first_good_char_pos
0x10004B309	0x00000019	[ 76] literal string: first_good_char_pos == 0
0x10004B322	0x00000028	[ 76] literal string: single '}' encountered in format string
0x10004B34A	0x00000035	[ 76] literal string: end of format while looking for conversion specifier
0x10004B37F	0x00000020	[ 76] literal string: unknown conversion specifier %c
0x10004B39F	0x00000018	[ 76] literal string: unmatched '{' in format
0x10004B3B7	0x00000024	[ 76] literal string: expected ':' after format specifier
0x10004B3DB	0x0000004A	[ 76] literal string: can't switch from automatic field numbering to manual field specification
0x10004B425	0x00000019	[ 76] literal string: tuple index out of range
0x10004B43E	0x0000001D	[ 76] literal string: attributes not supported yet
0x10004B45B	0x0000004A	[ 76] literal string: can't switch from manual field specification to automatic field numbering
0x10004B4A5	0x00000019	[ 76] literal string: mp_obj_str_format_helper
0x10004B4BE	0x00000012	[ 76] literal string: conversion == 'r'
0x10004B4D0	0x00000019	[ 76] literal string: invalid format specifier
0x10004B4E9	0x0000002C	[ 76] literal string: sign not allowed in string format specifier
0x10004B515	0x00000033	[ 76] literal string: sign not allowed with integer format specifier 'c'
0x10004B548	0x00000031	[ 76] literal string: unknown format code '%c' for object of type '%s'
0x10004B579	0x00000035	[ 76] literal string: '=' alignment not allowed in string format specifier
0x10004B5AE	0x00000005	[ 76] literal string: <>=^
0x10004B5B3	0x00000010	[ 76] literal string: bcdeEfFgGnosxX%
0x10004B5C3	0x00000014	[ 76] literal string: format needs a dict
0x10004B5D7	0x00000016	[ 76] literal string: incomplete format key
0x10004B5ED	0x00000012	[ 76] literal string: incomplete format
0x10004B5FF	0x00000023	[ 76] literal string: format string needs more arguments
0x10004B622	0x00000015	[ 76] literal string: %c needs int or char
0x10004B637	0x0000000F	[ 76] literal string: integer needed
0x10004B646	0x00000035	[ 76] literal string: unsupported format character '%c' (0x%x) at index %d
0x10004B67B	0x0000002B	[ 76] literal string: format string didn't convert all arguments
0x10004B6A6	0x0000000C	[ 76] literal string: str_replace
0x10004B6B2	0x0000000D	[ 76] literal string: data != NULL
0x10004B6BF	0x00000019	[ 76] literal string: bytes value out of range
0x10004B6D8	0x0000001A	[ 76] literal string: wrong number of arguments
0x10004B6F2	0x0000002B	[ 76] literal string: can't convert '%q' object to %q implicitly
0x10004B71D	0x00000028	[ 77] literal string: string indices must be integers, not %s
0x10004B745	0x0000001A	[ 77] literal string: string index out of range
0x10004B75F	0x00000007	[ 77] literal string: \u%04x
0x10004B766	0x00000007	[ 77] literal string: \U%08x
0x10004B76D	0x0000000B	[ 77] literal string: str_subscr
0x10004B778	0x00000010	[ 77] literal string: objstrunicode.c
0x10004B788	0x00000015	[ 77] literal string: type == &mp_type_str
0x10004B79D	0x00000002	[ 78] literal string: (
0x10004B79F	0x00000002	[ 78] literal string: ,
0x10004B7A1	0x00000011	[ 78] literal string: mp_obj_tuple_get
0x10004B7B2	0x0000000B	[ 78] literal string: objtuple.c
0x10004B7BD	0x00000024	[ 78] literal string: mp_obj_is_tuple_compatible(self_in)
0x10004B7E1	0x00000014	[ 79] literal string: mp_obj_new_instance
0x10004B7F5	0x0000000A	[ 79] literal string: objtype.c
0x10004B7FF	0x00000015	[ 79] literal string: num_native_bases < 2
0x10004B814	0x00000019	[ 79] literal string: mp_obj_instance_make_new
0x10004B82D	0x0000001E	[ 79] literal string: mp_obj_is_instance_type(self)
0x10004B84B	0x00000028	[ 79] literal string: __init__() should return None, not '%s'
0x10004B873	0x00000028	[ 79] literal string: type '%q' isn't an acceptable base type
0x10004B89B	0x0000002E	[ 79] literal string: multiple bases have instance lay-out conflict
0x10004B8C9	0x0000001C	[ 79] literal string: instance_count_native_bases
0x10004B8E5	0x00000025	[ 79] literal string: mp_obj_is_type(*item, &mp_type_type)
0x10004B90A	0x00000014	[ 79] literal string: mp_obj_class_lookup
0x10004B91E	0x0000001F	[ 79] literal string: lookup->dest[0] == MP_OBJ_NULL
0x10004B93D	0x0000001F	[ 79] literal string: lookup->dest[1] == MP_OBJ_NULL
0x10004B95C	0x00000042	[ 79] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(type->locals_dict))
0x10004B99E	0x0000000D	[ 79] literal string: <class '%q'>
0x10004B9AB	0x0000001C	[ 79] literal string: type takes 1 or 3 arguments
0x10004B9C7	0x0000001C	[ 79] literal string: can't create '%q' instances
0x10004B9E3	0x0000000A	[ 79] literal string: type_attr
0x10004B9ED	0x00000027	[ 79] literal string: mp_obj_is_type(self_in, &mp_type_type)
0x10004BA14	0x00000042	[ 79] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(self->locals_dict))
0x10004BA56	0x00000035	[ 79] literal string: can't add special method to already-subclassed class
0x10004BA8B	0x00000012	[ 79] literal string: <%s object at %p>
0x10004BA9D	0x0000001A	[ 79] literal string: mp_obj_instance_load_attr
0x10004BAB7	0x00000032	[ 79] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
0x10004BAE9	0x00000015	[ 79] literal string: unreadable attribute
0x10004BAFE	0x0000001D	[ 79] literal string: static_class_method_make_new
0x10004BB1B	0x0000003E	[ 79] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
0x10004BB59	0x00000017	[ 82] literal string: object not in sequence
0x10004BB70	0x0000000D	[ 84] literal string: bad typecode
0x10004BB7D	0x00000003	[ 94] literal string: -X
0x10004BB80	0x0000000A	[ 94] literal string: --version
0x10004BB8A	0x00000003	[ 94] literal string: -v
0x10004BB8D	0x00000003	[ 94] literal string: -O
0x10004BB90	0x00000003	[ 94] literal string: -o
0x10004BB93	0x00000003	[ 94] literal string: -s
0x10004BB96	0x00000012	[ 94] literal string: -msmall-int-bits=
0x10004BBA8	0x00000008	[ 94] literal string: -march=
0x10004BBB0	0x00000004	[ 94] literal string: x86
0x10004BBB4	0x00000004	[ 94] literal string: x64
0x10004BBB8	0x00000006	[ 94] literal string: armv6
0x10004BBBE	0x00000007	[ 94] literal string: armv6m
0x10004BBC5	0x00000007	[ 94] literal string: armv7m
0x10004BBCC	0x00000008	[ 94] literal string: armv7em
0x10004BBD4	0x0000000A	[ 94] literal string: armv7emsp
0x10004BBDE	0x0000000A	[ 94] literal string: armv7emdp
0x10004BBE8	0x00000007	[ 94] literal string: xtensa
0x10004BBEF	0x0000000A	[ 94] literal string: xtensawin
0x10004BBF9	0x00000016	[ 94] literal string: multiple input files\n
0x10004BC0F	0x0000000F	[ 94] literal string: no input file\n
0x10004BC1E	0x00000018	[ 94] literal string: FATAL: uncaught NLR %p\n
0x10004BC36	0x0000000E	[ 94] literal string: emit=bytecode
0x10004BC44	0x0000000C	[ 94] literal string: emit=native
0x10004BC50	0x0000000B	[ 94] literal string: emit=viper
0x10004BC5B	0x0000000A	[ 94] literal string: heapsize=
0x10004BC65	0x00000277	[ 94] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
0x10004BEDC	0x0000003E	[ 94] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
0x10004BF1A	0x00000004	[ 94] literal string: mpy
0x10004BF1E	0x00000052	[ 94] literal string: MicroPython v1.19.1-410-g27f20eb2f-dirty on 2022-10-07; mpy-cross emitting mpy v6
0x10004BF70	0x0000003F	[ 94] literal string:   emit={bytecode,native,viper} -- set the default code emitter
0x10004BFB0	0x00000048	[  0] compact unwind info
0x10004C000	0x00000008	[  0] non-lazy-pointer-to-local: ___stack_chk_guard
0x10004C008	0x00000008	[  0] non-lazy-pointer-to-local: ___stderrp
0x10004C010	0x00000008	[  0] non-lazy-pointer-to-local: _mp_const_ellipsis_obj
0x10004C018	0x00000008	[  0] non-lazy-pointer-to-local: _mp_fun_table
0x10004C020	0x00000008	[  0] non-lazy-pointer-to-local: _mp_identity_getiter
0x10004C028	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_dict_make_new
0x10004C030	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_exception_make_new
0x10004C038	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_instance_make_new
0x10004C040	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_str_binary_op
0x10004C048	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_IndexError
0x10004C050	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_StopIteration
0x10004C058	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_bytearray
0x10004C060	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_bytes
0x10004C068	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_classmethod
0x10004C070	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_complex
0x10004C078	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_dict
0x10004C080	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_float
0x10004C088	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_int
0x10004C090	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_list
0x10004C098	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_object
0x10004C0A0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_property
0x10004C0A8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_slice
0x10004C0B0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_staticmethod
0x10004C0B8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_str
0x10004C0C0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_tuple
0x10004C0C8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_type
0x10004C0D0	0x00000008	[  0] non-lazy-pointer-to-local: dyld_stub_binder
0x10004C0E0	0x00000AE0	[  6] _mp_qstr_const_pool
0x10004CBC0	0x00000018	[ 13] _mp_constants_map
0x10004CBD8	0x00000030	[ 13] l_switch.table.mp_parse.31
0x10004CC10	0x00000060	[ 15] _emit_asm_table
0x10004CC70	0x00000060	[ 15] _emit_native_table
0x10004CCD0	0x000001D8	[ 15] _compile_function
0x10004CEA8	0x000001B8	[ 17] _emit_bc_method_table
0x10004D060	0x000001B8	[ 20] _emit_native_x64_method_table
0x10004D218	0x000001B8	[ 22] _emit_native_x86_method_table
0x10004D3D0	0x000001B8	[ 24] _emit_native_thumb_method_table
0x10004D588	0x00000038	[ 25] _emit_inline_thumb_method_table
0x10004D5C0	0x000001B8	[ 27] _emit_native_arm_method_table
0x10004D778	0x000001B8	[ 29] _emit_native_xtensa_method_table
0x10004D930	0x00000038	[ 30] _emit_inline_xtensa_method_table
0x10004D968	0x000001B8	[ 31] _emit_native_xtensawin_method_table
0x10004DB20	0x00000078	[ 37] _mp_type_checked_fun
0x10004DBA0	0x00000080	[ 47] _mp_obj_get_type.types
0x10004DC20	0x00000010	[ 48] _mp_obj_array_append_obj
0x10004DC30	0x00000010	[ 48] _mp_obj_array_extend_obj
0x10004DC40	0x00000078	[ 48] _mp_type_bytearray
0x10004DCB8	0x00000078	[ 48] _mp_type_array_it
0x10004DD30	0x00000078	[ 49] _mp_type_bool
0x10004DDA8	0x00000078	[ 53] _mp_type_complex
0x10004DE20	0x00000078	[ 54] _mp_type_dict
0x10004DE98	0x00000020	[ 54] _mp_const_empty_dict_obj
0x10004DEB8	0x00000078	[ 54] _mp_type_dict_view_it
0x10004DF30	0x000000E0	[ 54] _dict_locals_dict_table
0x10004E010	0x00000020	[ 54] _dict_locals_dict
0x10004E030	0x00000010	[ 54] _dict_fromkeys_obj
0x10004E040	0x00000018	[ 54] _dict_get_obj
0x10004E058	0x00000018	[ 54] _dict_pop_obj
0x10004E070	0x00000018	[ 54] _dict_setdefault_obj
0x10004E088	0x00000010	[ 54] _dict_clear_obj
0x10004E098	0x00000010	[ 54] _dict_copy_obj
0x10004E0A8	0x00000018	[ 54] _dict_fromkeys_fun_obj
0x10004E0C0	0x00000010	[ 54] _dict_items_obj
0x10004E0D0	0x00000078	[ 54] _mp_type_dict_view
0x10004E148	0x00000010	[ 54] _dict_keys_obj
0x10004E158	0x00000010	[ 54] _dict_popitem_obj
0x10004E168	0x00000018	[ 54] _dict_update_obj
0x10004E180	0x00000010	[ 54] _dict_values_obj
0x10004E190	0x00000078	[ 56] _mp_type_BaseException
0x10004E208	0x00000078	[ 56] _mp_type_Exception
0x10004E280	0x00000078	[ 56] _mp_type_StopIteration
0x10004E2F8	0x00000078	[ 56] _mp_type_ArithmeticError
0x10004E370	0x00000078	[ 56] _mp_type_OverflowError
0x10004E3E8	0x00000078	[ 56] _mp_type_ZeroDivisionError
0x10004E460	0x00000078	[ 56] _mp_type_AttributeError
0x10004E4D8	0x00000078	[ 56] _mp_type_LookupError
0x10004E550	0x00000078	[ 56] _mp_type_IndexError
0x10004E5C8	0x00000078	[ 56] _mp_type_KeyError
0x10004E640	0x00000078	[ 56] _mp_type_MemoryError
0x10004E6B8	0x00000078	[ 56] _mp_type_OSError
0x10004E730	0x00000078	[ 56] _mp_type_RuntimeError
0x10004E7A8	0x00000078	[ 56] _mp_type_NotImplementedError
0x10004E820	0x00000078	[ 56] _mp_type_SyntaxError
0x10004E898	0x00000078	[ 56] _mp_type_IndentationError
0x10004E910	0x00000078	[ 56] _mp_type_TypeError
0x10004E988	0x00000078	[ 56] _mp_type_ViperTypeError
0x10004EA00	0x00000078	[ 56] _mp_type_ValueError
0x10004EA78	0x00000078	[ 56] _mp_type_UnicodeError
0x10004EAF0	0x00000078	[ 58] _mp_type_float
0x10004EB68	0x00000078	[ 59] _mp_type_fun_builtin_1
0x10004EBE0	0x00000078	[ 59] _mp_type_fun_builtin_2
0x10004EC58	0x00000078	[ 59] _mp_type_fun_builtin_3
0x10004ECD0	0x00000078	[ 59] _mp_type_fun_builtin_var
0x10004ED48	0x00000078	[ 61] _mp_type_it
0x10004EDC0	0x00000080	[ 62] _mp_type_int
0x10004EE40	0x00000020	[ 62] _int_locals_dict_table
0x10004EE60	0x00000020	[ 62] _int_locals_dict
0x10004EE80	0x00000010	[ 62] _int_from_bytes_obj
0x10004EE90	0x00000018	[ 62] _int_to_bytes_obj
0x10004EEA8	0x00000018	[ 62] _int_from_bytes_fun_obj
0x10004EEC0	0x00000080	[ 64] _mp_type_list
0x10004EF40	0x000000B0	[ 64] _list_locals_dict_table
0x10004EFF0	0x00000020	[ 64] _list_locals_dict
0x10004F010	0x00000018	[ 64] _list_index_obj
0x10004F028	0x00000018	[ 64] _list_pop_obj
0x10004F040	0x00000010	[ 64] _list_append_obj
0x10004F050	0x00000010	[ 64] _list_clear_obj
0x10004F060	0x00000010	[ 64] _list_copy_obj
0x10004F070	0x00000010	[ 64] _list_count_obj
0x10004F080	0x00000010	[ 64] _list_extend_obj
0x10004F090	0x00000010	[ 64] _list_insert_obj
0x10004F0A0	0x00000010	[ 64] _list_remove_obj
0x10004F0B0	0x00000010	[ 64] _list_reverse_obj
0x10004F0C0	0x00000018	[ 64] _list_sort_obj
0x10004F0E0	0x00000080	[ 67] _mp_type_object
0x10004F160	0x00000020	[ 67] _object_locals_dict_table
0x10004F180	0x00000020	[ 67] _object_locals_dict
0x10004F1A0	0x00000010	[ 67] _object___new___obj
0x10004F1B0	0x00000010	[ 67] _object___init___obj
0x10004F1C0	0x00000010	[ 67] _object___new___fun_obj
0x10004F1D0	0x00000078	[ 68] _mp_type_polymorph_iter
0x10004F250	0x00000080	[ 69] _mp_type_property
0x10004F2D0	0x00000030	[ 69] _property_locals_dict_table
0x10004F300	0x00000020	[ 69] _property_locals_dict
0x10004F320	0x00000010	[ 69] _property_getter_obj
0x10004F330	0x00000010	[ 69] _property_setter_obj
0x10004F340	0x00000010	[ 69] _property_deleter_obj
0x10004F350	0x00000078	[ 70] _mp_type_NoneType
0x10004F3C8	0x00000078	[ 74] _mp_type_singleton
0x10004F440	0x00000010	[ 74] _mp_const_ellipsis_obj
0x10004F450	0x00000078	[ 75] _mp_type_slice
0x10004F4D0	0x00000020	[ 76] _mp_const_empty_bytes_obj
0x10004F4F0	0x00000010	[ 76] _str_join_obj
0x10004F500	0x00000018	[ 76] _str_split_obj
0x10004F518	0x00000018	[ 76] _str_rsplit_obj
0x10004F530	0x00000018	[ 76] _str_find_obj
0x10004F548	0x00000018	[ 76] _str_rfind_obj
0x10004F560	0x00000018	[ 76] _str_index_obj
0x10004F578	0x00000018	[ 76] _str_rindex_obj
0x10004F590	0x00000018	[ 76] _str_startswith_obj
0x10004F5A8	0x00000018	[ 76] _str_endswith_obj
0x10004F5C0	0x00000018	[ 76] _str_strip_obj
0x10004F5D8	0x00000018	[ 76] _str_lstrip_obj
0x10004F5F0	0x00000018	[ 76] _str_rstrip_obj
0x10004F608	0x00000018	[ 76] _str_format_obj
0x10004F620	0x00000018	[ 76] _str_replace_obj
0x10004F638	0x00000018	[ 76] _str_count_obj
0x10004F650	0x00000010	[ 76] _str_lower_obj
0x10004F660	0x00000010	[ 76] _str_upper_obj
0x10004F670	0x00000010	[ 76] _str_isspace_obj
0x10004F680	0x00000010	[ 76] _str_isalpha_obj
0x10004F690	0x00000010	[ 76] _str_isdigit_obj
0x10004F6A0	0x00000010	[ 76] _str_isupper_obj
0x10004F6B0	0x00000010	[ 76] _str_islower_obj
0x10004F6C0	0x00000018	[ 76] _bytes_decode_obj
0x10004F6D8	0x00000018	[ 76] _str_encode_obj
0x10004F6F0	0x000001A0	[ 76] _array_bytearray_str_bytes_locals_table
0x10004F890	0x00000020	[ 76] _mp_obj_str_locals_dict
0x10004F8B0	0x00000020	[ 76] _mp_obj_bytes_locals_dict
0x10004F8D0	0x00000020	[ 76] _mp_obj_bytearray_locals_dict
0x10004F8F0	0x00000078	[ 76] _mp_type_bytes
0x10004F968	0x00000078	[ 77] _mp_type_str
0x10004F9E0	0x00000010	[ 78] _mp_const_empty_tuple_obj
0x10004F9F0	0x00000080	[ 78] _mp_type_tuple
0x10004FA70	0x00000020	[ 78] _tuple_locals_dict_table
0x10004FA90	0x00000020	[ 78] _tuple_locals_dict
0x10004FAB0	0x00000018	[ 78] _tuple_index_obj
0x10004FAC8	0x00000010	[ 78] _tuple_count_obj
0x10004FAD8	0x00000018	[ 79] _native_base_init_wrapper_obj
0x10004FAF0	0x00000078	[ 79] _mp_type_type
0x10004FB68	0x00000078	[ 79] _mp_type_staticmethod
0x10004FBE0	0x00000078	[ 79] _mp_type_classmethod
0x10004FC58	0x00000010	[ 81] _mp_op_getitem_obj
0x10004FC68	0x00000010	[ 81] _mp_op_setitem_obj
0x10004FC78	0x00000010	[ 81] _mp_op_delitem_obj
0x10004FC90	0x00000010	[ 88] _mp_builtin_next_obj
0x10004FCA0	0x00000010	[ 94] _mp_stderr_print
0x100050000	0x00000008	[ 97] ___assert_rtn
0x100050008	0x00000008	[ 97] ___bzero
0x100050010	0x00000008	[ 97] ___error
0x100050018	0x00000008	[ 97] ___exp10
0x100050020	0x00000008	[ 97] ___sincos_stret
0x100050028	0x00000008	[ 97] ___stack_chk_fail
0x100050030	0x00000008	[ 97] _atan2
0x100050038	0x00000008	[ 97] _close
0x100050040	0x00000008	[ 97] _exit
0x100050048	0x00000008	[ 97] _exp
0x100050050	0x00000008	[ 97] _fmod
0x100050058	0x00000008	[ 97] _fprintf
0x100050060	0x00000008	[ 97] _log
0x100050068	0x00000008	[ 97] _malloc
0x100050070	0x00000008	[ 97] _memchr
0x100050078	0x00000008	[ 97] _memcmp
0x100050080	0x00000008	[ 97] _memcpy
0x100050088	0x00000008	[ 97] _memmove
0x100050090	0x00000008	[ 97] _memset
0x100050098	0x00000008	[ 97] _nan
0x1000500A0	0x00000008	[ 97] _open
0x1000500A8	0x00000008	[ 97] _pow
0x1000500B0	0x00000008	[ 97] _printf
0x1000500B8	0x00000008	[ 97] _puts
0x1000500C0	0x00000008	[ 97] _read
0x1000500C8	0x00000008	[ 97] _strchr
0x1000500D0	0x00000008	[ 97] _strcmp
0x1000500D8	0x00000008	[ 97] _strlen
0x1000500E0	0x00000008	[ 97] _strncmp
0x1000500E8	0x00000008	[ 97] _strtol
0x1000500F0	0x00000008	[ 97] _write
0x1000500F8	0x00000008	[  0] __dyld_private
0x100050100	0x00000008	[ 94] _heap_size
0x100050108	0x00000008	[  1] _mp_dynamic_compiler
0x100050110	0x00000320	[  1] _mp_state_ctx
0x100050430	0x00000008	[ 94] _mp_verbose_flag
0x100050438	0x00000004	[ 94] _emit_opt

# Dead Stripped Symbols:
#        	Size    	File  Name
<<dead>> 	0x00000020	[  5] _gc_lock
<<dead>> 	0x00000020	[  5] _gc_unlock
<<dead>> 	0x00000020	[  5] _gc_sweep_all
<<dead>> 	0x000001F0	[  5] _gc_info
<<dead>> 	0x00000090	[  5] _gc_nbytes
<<dead>> 	0x000001E0	[  5] _gc_dump_info
<<dead>> 	0x00000288	[  5] _gc_dump_alloc_table
<<dead>> 	0x00000023	[  5] literal string: GC: total: %u, used: %u, free: %u\n
<<dead>> 	0x00000045	[  5] literal string:  No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n
<<dead>> 	0x0000001B	[  5] literal string: GC memory layout; from %p:
<<dead>> 	0x0000001C	[  5] literal string: \n       (%u lines all free)
<<dead>> 	0x00000008	[  5] literal string: \n%05x: 
<<dead>> 	0x000000AE	[  6] _qstr_pool_info
<<dead>> 	0x00000002	[  6] literal string: \n
<<dead>> 	0x00000019	[  7] _vstr_init_fixed_buf
<<dead>> 	0x00000043	[  7] _vstr_new
<<dead>> 	0x0000002C	[  7] _vstr_free
<<dead>> 	0x0000000A	[  7] _vstr_hint_size
<<dead>> 	0x00000029	[  7] _vstr_add_len
<<dead>> 	0x00000016	[  7] _vstr_ins_byte
<<dead>> 	0x00000054	[  7] _vstr_ins_blank_bytes
<<dead>> 	0x00000016	[  7] _vstr_ins_char
<<dead>> 	0x0000000F	[  7] _vstr_cut_head_bytes
<<dead>> 	0x00000042	[  7] _vstr_cut_out_bytes
<<dead>> 	0x000000B2	[  7] _vstr_printf
<<dead>> 	0x00000028	[  7] _vstr_vprintf
<<dead>> 	0x00000006	[  8] _plat_print_strn
<<dead>> 	0x00000010	[  8] _mp_plat_print
<<dead>> 	0x00000026	[  9] _unichar_isident
<<dead>> 	0x0000001E	[  9] _unichar_isalnum
<<dead>> 	0x00000018	[ 10] _mpz_init_from_int
<<dead>> 	0x00000177	[ 10] _mpz_pow3_inpl
<<dead>> 	0x00000047	[ 10] _mpz_as_uint_checked
<<dead>> 	0x00000058	[ 11] _mp_reader_new_mem
<<dead>> 	0x00000022	[ 11] _mp_reader_mem_readbyte
<<dead>> 	0x00000026	[ 11] _mp_reader_mem_close
<<dead>> 	0x0000003B	[ 12] _mp_lexer_new_from_str_len
<<dead>> 	0x0000003B	[ 12] _mp_lexer_new_from_fd
<<dead>> 	0x00000005	[ 12] literal string: None
<<dead>> 	0x00000063	[ 15] _mp_compile
<<dead>> 	0x0000001C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
<<dead>> 	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
<<dead>> 	0x00000034	[ 15] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
<<dead>> 	0x0000000F	[ 15] literal string: invalid syntax
<<dead>> 	0x0000000B	[ 16] literal string: id != NULL
<<dead>> 	0x00000018	[ 19] _asm_x64_nop
<<dead>> 	0x00000045	[ 19] _asm_x64_push_r64
<<dead>> 	0x00000045	[ 19] _asm_x64_pop_r64
<<dead>> 	0x00000015	[ 20] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 20] literal string: emit->stack_size == 0
<<dead>> 	0x00000010	[ 21] literal string: num_locals >= 0
<<dead>> 	0x0000000F	[ 21] literal string: get_label_dest
<<dead>> 	0x00000020	[ 21] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 22] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 22] literal string: emitnative.c
<<dead>> 	0x00000028	[ 22] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 22] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 22] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 22] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 22] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 22] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 22] literal string: adjust_stack
<<dead>> 	0x00000033	[ 22] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 22] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 22] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 22] literal string: conversion to object
<<dead>> 	0x0000002C	[ 22] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 22] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 22] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 22] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 22] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 22] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 22] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 22] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 22] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 22] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 22] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 22] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 22] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 22] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 22] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 22] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 22] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 22] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 22] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 22] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 22] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 22] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 22] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 22] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 22] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 22] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 22] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 22] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 22] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 22] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 22] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 22] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 22] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 22] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 22] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 22] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 22] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 22] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 22] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 22] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 22] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 22] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 22] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 22] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 22] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 22] literal string: !star_flags
<<dead>> 	0x00000008	[ 22] literal string: casting
<<dead>> 	0x00000019	[ 22] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 22] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 22] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 22] literal string: n_args == 1
<<dead>> 	0x00000015	[ 22] literal string: must raise an object
<<dead>> 	0x0000000D	[ 22] literal string: native yield
<<dead>> 	0x00000010	[ 23] literal string: num_locals >= 0
<<dead>> 	0x0000000F	[ 23] literal string: get_label_dest
<<dead>> 	0x00000020	[ 23] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 24] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 24] literal string: emitnative.c
<<dead>> 	0x00000028	[ 24] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 24] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 24] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 24] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 24] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 24] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 24] literal string: adjust_stack
<<dead>> 	0x00000033	[ 24] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 24] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 24] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 24] literal string: conversion to object
<<dead>> 	0x0000002C	[ 24] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 24] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 24] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 24] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 24] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 24] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 24] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 24] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 24] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 24] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 24] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 24] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 24] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 24] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 24] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 24] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 24] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 24] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 24] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 24] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 24] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 24] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 24] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 24] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 24] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 24] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 24] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 24] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 24] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 24] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 24] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 24] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 24] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 24] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 24] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 24] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 24] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 24] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 24] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 24] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 24] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 24] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 24] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 24] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 24] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 24] literal string: !star_flags
<<dead>> 	0x00000008	[ 24] literal string: casting
<<dead>> 	0x00000019	[ 24] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 24] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 24] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 24] literal string: n_args == 1
<<dead>> 	0x00000015	[ 24] literal string: must raise an object
<<dead>> 	0x0000000D	[ 24] literal string: native yield
<<dead>> 	0x00000001	[ 25] literal string: 
<<dead>> 	0x00000027	[ 25] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
<<dead>> 	0x00000013	[ 25] literal string: asm_thumb_format_3
<<dead>> 	0x0000000B	[ 25] literal string: asmthumb.h
<<dead>> 	0x00000017	[ 25] literal string: rlo < ASM_THUMB_REG_R8
<<dead>> 	0x0000001C	[ 25] literal string: rlo_dest < ASM_THUMB_REG_R8
<<dead>> 	0x0000001B	[ 25] literal string: rlo_src < ASM_THUMB_REG_R8
<<dead>> 	0x0000001B	[ 26] _asm_arm_bkpt
<<dead>> 	0x00000029	[ 26] _asm_arm_push
<<dead>> 	0x00000029	[ 26] _asm_arm_pop
<<dead>> 	0x00000010	[ 26] literal string: num_locals >= 0
<<dead>> 	0x00000020	[ 26] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 27] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 27] literal string: emitnative.c
<<dead>> 	0x00000028	[ 27] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 27] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 27] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 27] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 27] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 27] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 27] literal string: adjust_stack
<<dead>> 	0x00000033	[ 27] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 27] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 27] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 27] literal string: conversion to object
<<dead>> 	0x0000002C	[ 27] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 27] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 27] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 27] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 27] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 27] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 27] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 27] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 27] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 27] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 27] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 27] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 27] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 27] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 27] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 27] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 27] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 27] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 27] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 27] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 27] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 27] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 27] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 27] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 27] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 27] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 27] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 27] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 27] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 27] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 27] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 27] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 27] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 27] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 27] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 27] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 27] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 27] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 27] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 27] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 27] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 27] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 27] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 27] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 27] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 27] literal string: !star_flags
<<dead>> 	0x00000008	[ 27] literal string: casting
<<dead>> 	0x00000019	[ 27] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 27] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 27] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 27] literal string: n_args == 1
<<dead>> 	0x00000015	[ 27] literal string: must raise an object
<<dead>> 	0x0000000D	[ 27] literal string: native yield
<<dead>> 	0x0000000F	[ 28] literal string: get_label_dest
<<dead>> 	0x00000020	[ 28] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 29] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 29] literal string: emitnative.c
<<dead>> 	0x00000028	[ 29] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 29] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 29] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 29] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 29] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 29] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 29] literal string: adjust_stack
<<dead>> 	0x00000033	[ 29] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 29] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 29] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 29] literal string: conversion to object
<<dead>> 	0x0000002C	[ 29] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 29] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 29] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 29] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 29] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 29] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 29] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 29] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 29] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 29] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 29] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 29] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 29] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 29] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 29] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 29] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 29] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 29] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 29] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 29] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 29] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 29] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 29] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 29] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 29] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 29] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 29] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 29] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 29] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 29] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 29] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 29] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 29] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 29] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 29] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 29] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 29] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 29] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 29] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 29] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 29] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 29] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 29] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 29] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 29] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 29] literal string: !star_flags
<<dead>> 	0x00000008	[ 29] literal string: casting
<<dead>> 	0x00000019	[ 29] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 29] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 29] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 29] literal string: n_args == 1
<<dead>> 	0x00000015	[ 29] literal string: must raise an object
<<dead>> 	0x0000000D	[ 29] literal string: native yield
<<dead>> 	0x00000021	[ 30] literal string: label_num < emit->max_num_labels
<<dead>> 	0x00000018	[ 30] literal string: '%s' expects a register
<<dead>> 	0x00000001	[ 30] literal string: 
<<dead>> 	0x00000015	[ 30] literal string: '%s' expects a label
<<dead>> 	0x00000017	[ 30] literal string: label '%q' not defined
<<dead>> 	0x00000018	[ 30] literal string: '%s' expects an integer
<<dead>> 	0x00000017	[ 31] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 31] literal string: emitnative.c
<<dead>> 	0x00000028	[ 31] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 31] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 31] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 31] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 31] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 31] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 31] literal string: adjust_stack
<<dead>> 	0x00000033	[ 31] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 31] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 31] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 31] literal string: conversion to object
<<dead>> 	0x0000002C	[ 31] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 31] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 31] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 31] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 31] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 31] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 31] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 31] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 31] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 31] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 31] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 31] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 31] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 31] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 31] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 31] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 31] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 31] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 31] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 31] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 31] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 31] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 31] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 31] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 31] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 31] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 31] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 31] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 31] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 31] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 31] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 31] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 31] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 31] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 31] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 31] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 31] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 31] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 31] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 31] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 31] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 31] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 31] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 31] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 31] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 31] literal string: !star_flags
<<dead>> 	0x00000008	[ 31] literal string: casting
<<dead>> 	0x00000019	[ 31] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 31] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 31] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 31] literal string: n_args == 1
<<dead>> 	0x00000015	[ 31] literal string: must raise an object
<<dead>> 	0x0000000D	[ 31] literal string: native yield
<<dead>> 	0x00000010	[ 32] 16-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000010	[ 34] 16-byte-literal
<<dead>> 	0x00000001	[ 34] literal string: 
<<dead>> 	0x0000015C	[ 35] _mp_make_function_from_raw_code
<<dead>> 	0x00000039	[ 35] _mp_make_closure_from_raw_code
<<dead>> 	0x0000001F	[ 35] literal string: mp_make_function_from_raw_code
<<dead>> 	0x0000000B	[ 35] literal string: rc != NULL
<<dead>> 	0x0000005E	[ 35] literal string: def_args == NULL || def_args[0] == MP_OBJ_NULL || mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000005D	[ 35] literal string: def_args == NULL || def_args[1] == MP_OBJ_NULL || mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x0000001D	[ 35] literal string: rc->kind == MP_CODE_BYTECODE
<<dead>> 	0x0000004B	[ 37] _mp_load_name
<<dead>> 	0x0000006B	[ 37] _mp_load_global
<<dead>> 	0x0000000D	[ 37] _mp_load_build_class
<<dead>> 	0x00000023	[ 37] _mp_store_name
<<dead>> 	0x00000020	[ 37] _mp_delete_name
<<dead>> 	0x00000023	[ 37] _mp_store_global
<<dead>> 	0x00000020	[ 37] _mp_delete_global
<<dead>> 	0x00000010	[ 37] _mp_call_function_0
<<dead>> 	0x00000048	[ 37] _mp_call_function_2
<<dead>> 	0x00000631	[ 37] _mp_call_method_n_kw_var
<<dead>> 	0x000000F3	[ 37] _mp_unpack_sequence
<<dead>> 	0x000001C6	[ 37] _mp_unpack_ex
<<dead>> 	0x00000053	[ 37] _mp_load_attr
<<dead>> 	0x0000007B	[ 37] _mp_load_method
<<dead>> 	0x0000006B	[ 37] _mp_load_method_protected
<<dead>> 	0x00000099	[ 37] _mp_store_attr
<<dead>> 	0x0000028F	[ 37] _mp_resume
<<dead>> 	0x00000052	[ 37] _mp_make_raise_obj
<<dead>> 	0x00000062	[ 37] _mp_import_name
<<dead>> 	0x0000015F	[ 37] _mp_import_from
<<dead>> 	0x000000A7	[ 37] _mp_import_all
<<dead>> 	0x000000C7	[ 37] _mp_parse_compile_execute
<<dead>> 	0x00000010	[ 37] _mp_module___main__
<<dead>> 	0x00000018	[ 37] literal string: name '%q' isn't defined
<<dead>> 	0x00000023	[ 37] literal string: need more than %d values to unpack
<<dead>> 	0x00000028	[ 37] literal string: too many values to unpack (expected %d)
<<dead>> 	0x00000027	[ 37] literal string: type object '%q' has no attribute '%q'
<<dead>> 	0x00000022	[ 37] literal string: '%s' object has no attribute '%q'
<<dead>> 	0x0000000A	[ 37] literal string: mp_resume
<<dead>> 	0x0000003B	[ 37] literal string: (send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL)
<<dead>> 	0x0000001B	[ 37] literal string: throw_value != MP_OBJ_NULL
<<dead>> 	0x0000001F	[ 37] literal string: generator raised StopIteration
<<dead>> 	0x0000002A	[ 37] literal string: exceptions must derive from BaseException
<<dead>> 	0x00000015	[ 37] literal string: can't import name %q
<<dead>> 	0x0000001E	[ 37] literal string: mp_call_prepare_args_n_kw_var
<<dead>> 	0x0000001F	[ 37] literal string: args2_len + len <= args2_alloc
<<dead>> 	0x00000018	[ 37] literal string: args2_len < args2_alloc
<<dead>> 	0x00000029	[ 37] literal string: args2_len + 2 * map->used <= args2_alloc
<<dead>> 	0x0000001D	[ 37] literal string: args2_len + 2 <= args2_alloc
<<dead>> 	0x00000006	[ 37] literal string: obj.h
<<dead>> 	0x0000001A	[ 37] literal string: mp_obj_new_exception_arg1
<<dead>> 	0x00000030	[ 37] literal string: exc_type->make_new == mp_obj_exception_make_new
<<dead>> 	0x00000051	[ 38] _mp_call_function_1_protected
<<dead>> 	0x0000005B	[ 38] _mp_call_function_2_protected
<<dead>> 	0x00000011	[ 39] _mp_sched_exception
<<dead>> 	0x00000032	[ 39] _mp_handle_pending
<<dead>> 	0x0000006E	[ 40] _mp_native_from_obj
<<dead>> 	0x00000052	[ 40] _mp_native_to_obj
<<dead>> 	0x0000007A	[ 41] _mp_pairheap_meld
<<dead>> 	0x00000087	[ 41] _mp_pairheap_pairing
<<dead>> 	0x000000DD	[ 41] _mp_pairheap_delete
<<dead>> 	0x00000054	[ 42] _ringbuf_get16
<<dead>> 	0x00000042	[ 42] _ringbuf_peek16
<<dead>> 	0x00000056	[ 42] _ringbuf_put16
<<dead>> 	0x00000010	[ 43] _mp_stack_set_top
<<dead>> 	0x00000017	[ 43] _mp_stack_usage
<<dead>> 	0x00000010	[ 44] _mp_arg_error_terse_mismatch
<<dead>> 	0x0000001C	[ 44] literal string: argument num/types mismatch
<<dead>> 	0x000000EE	[ 45] _mp_warning
<<dead>> 	0x00000015	[ 45] _mp_emitter_warning
<<dead>> 	0x00000008	[ 45] literal string: Warning
<<dead>> 	0x00000002	[ 45] literal string: \n
<<dead>> 	0x0000002C	[ 46] _mp_set_init
<<dead>> 	0x0000013C	[ 46] _mp_set_lookup
<<dead>> 	0x000000A1	[ 46] _mp_set_rehash
<<dead>> 	0x00000061	[ 46] _mp_set_remove_first
<<dead>> 	0x00000027	[ 46] _mp_set_clear
<<dead>> 	0x00000016	[ 47] _mp_obj_print
<<dead>> 	0x0000003A	[ 47] _mp_obj_is_callable
<<dead>> 	0x00000043	[ 47] _mp_obj_get_array_fixed_n
<<dead>> 	0x00000024	[ 47] _mp_obj_id
<<dead>> 	0x0000003A	[ 47] _mp_obj_len
<<dead>> 	0x00000009	[ 47] _mp_identity
<<dead>> 	0x00000008	[ 47] 8-byte-literal
<<dead>> 	0x00000010	[ 47] _mp_identity_obj
<<dead>> 	0x00000002	[ 47] literal string: \n
<<dead>> 	0x0000002D	[ 47] literal string: requested length %d but object has length %d
<<dead>> 	0x00000021	[ 47] literal string: object of type '%s' has no len()
<<dead>> 	0x00000005	[ 49] literal string: True
<<dead>> 	0x00000006	[ 49] literal string: False
<<dead>> 	0x0000002B	[ 50] _mp_obj_new_bound_meth
<<dead>> 	0x00000062	[ 50] _bound_meth_print
<<dead>> 	0x0000001E	[ 50] _bound_meth_call
<<dead>> 	0x00000078	[ 50] _mp_type_bound_meth
<<dead>> 	0x00000012	[ 50] literal string: <bound_method %p 
<<dead>> 	0x00000002	[ 50] literal string: .
<<dead>> 	0x00000002	[ 50] literal string: >
<<dead>> 	0x00000025	[ 51] _mp_obj_new_cell
<<dead>> 	0x00000059	[ 51] _cell_print
<<dead>> 	0x00000078	[ 51] _mp_type_cell
<<dead>> 	0x0000000A	[ 51] literal string: <cell %p 
<<dead>> 	0x00000006	[ 51] literal string: (nil)
<<dead>> 	0x00000002	[ 51] literal string: >
<<dead>> 	0x000000B2	[ 52] _closure_print
<<dead>> 	0x00000125	[ 52] _closure_call
<<dead>> 	0x0000005F	[ 52] _mp_obj_new_closure
<<dead>> 	0x00000078	[ 52] _mp_type_closure
<<dead>> 	0x0000000A	[ 52] literal string: <closure 
<<dead>> 	0x00000015	[ 52] literal string:  at %p, n_closed=%u 
<<dead>> 	0x00000006	[ 52] literal string: (nil)
<<dead>> 	0x00000002	[ 52] literal string:  
<<dead>> 	0x00000002	[ 52] literal string: >
<<dead>> 	0x00000008	[ 53] 8-byte-literal
<<dead>> 	0x00000010	[ 53] 16-byte-literal
<<dead>> 	0x00000010	[ 53] 16-byte-literal
<<dead>> 	0x00000035	[ 54] _mp_obj_new_dict
<<dead>> 	0x0000000E	[ 54] _mp_obj_dict_len
<<dead>> 	0x00000056	[ 54] _mp_obj_dict_delete
<<dead>> 	0x00000016	[ 54] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 54] literal string: obj.h
<<dead>> 	0x00000011	[ 54] literal string: pos < map->alloc
<<dead>> 	0x00000003	[ 54] literal string: , 
<<dead>> 	0x00000003	[ 54] literal string: : 
<<dead>> 	0x00000005	[ 54] literal string: next
<<dead>> 	0x00000064	[ 55] _enumerate_make_new
<<dead>> 	0x0000009F	[ 55] _enumerate_iternext
<<dead>> 	0x00000078	[ 55] _mp_type_enumerate
<<dead>> 	0x00000020	[ 55] _enumerate_make_new.allowed_args
<<dead>> 	0x00000013	[ 55] literal string: enumerate_iternext
<<dead>> 	0x0000000F	[ 55] literal string: objenumerate.c
<<dead>> 	0x0000002C	[ 55] literal string: mp_obj_is_type(self_in, &mp_type_enumerate)
<<dead>> 	0x0000003B	[ 56] _mp_obj_new_exception_args
<<dead>> 	0x00000013	[ 56] _mp_obj_exception_clear_traceback
<<dead>> 	0x00000003	[ 56] literal string: : 
<<dead>> 	0x00000001	[ 56] literal string: 
<<dead>> 	0x00000030	[ 56] literal string: exc_type->make_new == mp_obj_exception_make_new
<<dead>> 	0x0000001A	[ 56] literal string: mp_obj_new_exception_args
<<dead>> 	0x00000078	[ 56] _mp_type_SystemExit
<<dead>> 	0x00000078	[ 56] _mp_type_KeyboardInterrupt
<<dead>> 	0x00000078	[ 56] _mp_type_GeneratorExit
<<dead>> 	0x00000078	[ 56] _mp_type_StopAsyncIteration
<<dead>> 	0x00000078	[ 56] _mp_type_AssertionError
<<dead>> 	0x00000078	[ 56] _mp_type_EOFError
<<dead>> 	0x00000078	[ 56] _mp_type_ImportError
<<dead>> 	0x00000078	[ 56] _mp_type_NameError
<<dead>> 	0x00000054	[ 57] _filter_make_new
<<dead>> 	0x0000005D	[ 57] _filter_iternext
<<dead>> 	0x00000078	[ 57] _mp_type_filter
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000010	[ 58] _mp_const_float_e_obj
<<dead>> 	0x00000010	[ 58] _mp_const_float_pi_obj
<<dead>> 	0x0000000F	[ 58] literal string: divide by zero
<<dead>> 	0x00000053	[ 59] _fun_builtin_0_call
<<dead>> 	0x00000054	[ 59] _mp_obj_fun_get_name
<<dead>> 	0x00000030	[ 59] _fun_bc_print
<<dead>> 	0x00000197	[ 59] _fun_bc_call
<<dead>> 	0x00000143	[ 59] _mp_obj_new_fun_bc
<<dead>> 	0x00000015	[ 59] _mp_obj_new_fun_native
<<dead>> 	0x0000003B	[ 59] _mp_obj_new_fun_asm
<<dead>> 	0x00000036	[ 59] _fun_native_call
<<dead>> 	0x00000141	[ 59] _fun_asm_call
<<dead>> 	0x000000F7	[ 59] _convert_obj_for_inline_asm
<<dead>> 	0x00000078	[ 59] _mp_type_fun_builtin_0
<<dead>> 	0x00000078	[ 59] _mp_type_fun_native
<<dead>> 	0x00000078	[ 59] _mp_type_fun_bc
<<dead>> 	0x00000078	[ 59] _mp_type_fun_asm
<<dead>> 	0x00000012	[ 59] literal string: mp_obj_new_fun_bc
<<dead>> 	0x0000002C	[ 59] literal string: mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000002B	[ 59] literal string: mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x00000013	[ 59] literal string: fun_builtin_0_call
<<dead>> 	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_0)
<<dead>> 	0x00000016	[ 59] literal string: <function %q at 0x%p>
<<dead>> 	0x0000000C	[ 59] literal string: fun_bc_call
<<dead>> 	0x00000029	[ 59] literal string: vm_return_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000000D	[ 59] literal string: fun_asm_call
<<dead>> 	0x0000000C	[ 59] literal string: n_args == 4
<<dead>> 	0x000000CC	[ 60] _gen_wrap_call
<<dead>> 	0x000000DE	[ 60] _native_gen_wrap_call
<<dead>> 	0x0000016A	[ 60] _mp_obj_gen_resume
<<dead>> 	0x00000031	[ 60] _gen_instance_print
<<dead>> 	0x00000013	[ 60] _gen_instance_iternext
<<dead>> 	0x00000055	[ 60] _gen_resume_and_raise
<<dead>> 	0x0000006B	[ 60] _gen_instance_close
<<dead>> 	0x00000011	[ 60] _gen_instance_send
<<dead>> 	0x0000002D	[ 60] _gen_instance_throw
<<dead>> 	0x0000001F	[ 60] _gen_instance_pend_throw
<<dead>> 	0x00000020	[ 60] _mp_const_GeneratorExit_obj
<<dead>> 	0x00000078	[ 60] _mp_type_gen_wrap
<<dead>> 	0x00000078	[ 60] _mp_type_native_gen_wrap
<<dead>> 	0x00000080	[ 60] _mp_type_gen_instance
<<dead>> 	0x00000040	[ 60] _gen_instance_locals_dict_table
<<dead>> 	0x00000020	[ 60] _gen_instance_locals_dict
<<dead>> 	0x00000018	[ 60] _gen_instance_throw_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_close_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_send_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_pend_throw_obj
<<dead>> 	0x0000001C	[ 60] literal string: generator already executing
<<dead>> 	0x00000036	[ 60] literal string: can't send non-None value to a just-started generator
<<dead>> 	0x0000001F	[ 60] literal string: generator raised StopIteration
<<dead>> 	0x0000001E	[ 60] literal string: <generator object '%q' at %p>
<<dead>> 	0x00000020	[ 60] literal string: generator ignored GeneratorExit
<<dead>> 	0x00000049	[ 63] _mp_obj_int_get_uint_checked
<<dead>> 	0x0000002C	[ 63] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
<<dead>> 	0x0000000F	[ 63] literal string: divide by zero
<<dead>> 	0x00000015	[ 63] literal string: negative shift count
<<dead>> 	0x0000000A	[ 64] _mp_obj_list_set_len
<<dead>> 	0x0000002B	[ 64] _mp_obj_list_store
<<dead>> 	0x00000003	[ 64] literal string: , 
<<dead>> 	0x00000002	[ 64] literal string: ]
<<dead>> 	0x0000007F	[ 65] _map_make_new
<<dead>> 	0x00000076	[ 65] _map_iternext
<<dead>> 	0x00000078	[ 65] _mp_type_map
<<dead>> 	0x0000004E	[ 66] _module_print
<<dead>> 	0x0000009D	[ 66] _module_attr
<<dead>> 	0x0000007D	[ 66] _mp_obj_new_module
<<dead>> 	0x0000004D	[ 66] _mp_module_get_loaded_or_builtin
<<dead>> 	0x00000047	[ 66] _mp_module_generic_attr
<<dead>> 	0x00000080	[ 66] _mp_type_module
<<dead>> 	0x00000040	[ 66] _mp_builtin_module_table
<<dead>> 	0x00000018	[ 66] _mp_builtin_module_map
<<dead>> 	0x00000001	[ 66] literal string: 
<<dead>> 	0x0000000E	[ 66] literal string: <module '%s'>
<<dead>> 	0x00000005	[ 70] literal string: None
<<dead>> 	0x00000055	[ 71] _range_print
<<dead>> 	0x0000009A	[ 71] _range_make_new
<<dead>> 	0x00000059	[ 71] _range_unary_op
<<dead>> 	0x00000050	[ 71] _range_attr
<<dead>> 	0x000000DE	[ 71] _range_subscr
<<dead>> 	0x00000023	[ 71] _range_getiter
<<dead>> 	0x0000003C	[ 71] _range_it_iternext
<<dead>> 	0x00000078	[ 71] _mp_type_range
<<dead>> 	0x00000078	[ 71] _mp_type_range_it
<<dead>> 	0x0000000F	[ 71] literal string: range(%ld, %ld
<<dead>> 	0x00000002	[ 71] literal string: )
<<dead>> 	0x00000007	[ 71] literal string: , %ld)
<<dead>> 	0x0000000A	[ 71] literal string: zero step
<<dead>> 	0x000000AB	[ 72] _reversed_make_new
<<dead>> 	0x0000002F	[ 72] _reversed_iternext
<<dead>> 	0x00000078	[ 72] _mp_type_reversed
<<dead>> 	0x000000AB	[ 73] _set_print
<<dead>> 	0x00000093	[ 73] _set_make_new
<<dead>> 	0x0000002E	[ 73] _set_unary_op
<<dead>> 	0x00000280	[ 73] _set_binary_op
<<dead>> 	0x0000002A	[ 73] _set_getiter
<<dead>> 	0x0000006C	[ 73] _mp_obj_new_set
<<dead>> 	0x00000013	[ 73] _mp_obj_set_store
<<dead>> 	0x00000025	[ 73] _set_union
<<dead>> 	0x00000025	[ 73] _set_symmetric_difference
<<dead>> 	0x0000000C	[ 73] _set_intersect
<<dead>> 	0x0000000C	[ 73] _set_diff
<<dead>> 	0x0000003F	[ 73] _set_update
<<dead>> 	0x0000004F	[ 73] _set_symmetric_difference_update
<<dead>> 	0x000000FA	[ 73] _set_intersect_int
<<dead>> 	0x00000093	[ 73] _set_diff_int
<<dead>> 	0x0000004E	[ 73] _set_equal
<<dead>> 	0x0000000C	[ 73] _set_issubset
<<dead>> 	0x00000015	[ 73] _set_issuperset
<<dead>> 	0x0000004C	[ 73] _set_copy
<<dead>> 	0x0000004A	[ 73] _set_update_int
<<dead>> 	0x00000019	[ 73] _set_add
<<dead>> 	0x00000014	[ 73] _set_clear
<<dead>> 	0x00000147	[ 73] _set_issubset_internal
<<dead>> 	0x00000046	[ 73] _set_it_iternext
<<dead>> 	0x00000019	[ 73] _set_discard
<<dead>> 	0x00000015	[ 73] _set_diff_update
<<dead>> 	0x0000000F	[ 73] _set_intersect_update
<<dead>> 	0x00000058	[ 73] _set_isdisjoint
<<dead>> 	0x00000027	[ 73] _set_pop
<<dead>> 	0x00000037	[ 73] _set_remove
<<dead>> 	0x00000080	[ 73] _mp_type_set
<<dead>> 	0x00000120	[ 73] _set_locals_dict_table
<<dead>> 	0x00000020	[ 73] _set_locals_dict
<<dead>> 	0x00000018	[ 73] _set_diff_obj
<<dead>> 	0x00000018	[ 73] _set_diff_update_obj
<<dead>> 	0x00000018	[ 73] _set_update_obj
<<dead>> 	0x00000010	[ 73] _set_add_obj
<<dead>> 	0x00000010	[ 73] _set_clear_obj
<<dead>> 	0x00000010	[ 73] _set_copy_obj
<<dead>> 	0x00000010	[ 73] _set_discard_obj
<<dead>> 	0x00000010	[ 73] _set_intersect_obj
<<dead>> 	0x00000010	[ 73] _set_intersect_update_obj
<<dead>> 	0x00000010	[ 73] _set_isdisjoint_obj
<<dead>> 	0x00000010	[ 73] _set_issubset_obj
<<dead>> 	0x00000010	[ 73] _set_issuperset_obj
<<dead>> 	0x00000010	[ 73] _set_pop_obj
<<dead>> 	0x00000010	[ 73] _set_remove_obj
<<dead>> 	0x00000010	[ 73] _set_symmetric_difference_obj
<<dead>> 	0x00000010	[ 73] _set_symmetric_difference_update_obj
<<dead>> 	0x00000010	[ 73] _set_union_obj
<<dead>> 	0x00000006	[ 73] literal string: set()
<<dead>> 	0x00000002	[ 73] literal string: {
<<dead>> 	0x00000003	[ 73] literal string: , 
<<dead>> 	0x00000002	[ 73] literal string: }
<<dead>> 	0x0000000A	[ 73] literal string: set_equal
<<dead>> 	0x00000009	[ 73] literal string: objset.c
<<dead>> 	0x0000001E	[ 73] literal string: is_set_or_frozenset(other_in)
<<dead>> 	0x00000016	[ 73] literal string: pop from an empty set
<<dead>> 	0x0000003B	[ 75] _mp_obj_new_slice
<<dead>> 	0x00000003	[ 75] literal string: , 
<<dead>> 	0x00000002	[ 75] literal string: )
<<dead>> 	0x0000003D	[ 76] _mp_obj_new_str_from_vstr
<<dead>> 	0x00000048	[ 76] _mp_obj_str_intern
<<dead>> 	0x0000002C	[ 76] _mp_obj_str_intern_checked
<<dead>> 	0x00000046	[ 76] _mp_obj_str_get_str
<<dead>> 	0x00000003	[ 76] literal string: %c
<<dead>> 	0x00000001	[ 76] literal string: 
<<dead>> 	0x00000002	[ 76] literal string: b
<<dead>> 	0x00000031	[ 76] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000003	[ 77] literal string: %c
<<dead>> 	0x00000004	[ 77] literal string: \%c
<<dead>> 	0x00000003	[ 77] literal string: \\
<<dead>> 	0x00000003	[ 77] literal string: \n
<<dead>> 	0x00000003	[ 77] literal string: \r
<<dead>> 	0x00000003	[ 77] literal string: \t
<<dead>> 	0x00000007	[ 77] literal string: \x%02x
<<dead>> 	0x00000031	[ 77] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x0000003B	[ 78] _mp_obj_tuple_del
<<dead>> 	0x00000003	[ 78] literal string: , 
<<dead>> 	0x00000002	[ 78] literal string: )
<<dead>> 	0x00000031	[ 78] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000011	[ 78] literal string: mp_obj_tuple_del
<<dead>> 	0x00000028	[ 78] literal string: mp_obj_is_type(self_in, &mp_type_tuple)
<<dead>> 	0x00000069	[ 79] _mp_obj_instance_is_callable
<<dead>> 	0x00000057	[ 79] _super_print
<<dead>> 	0x00000050	[ 79] _super_make_new
<<dead>> 	0x000001BE	[ 79] _super_attr
<<dead>> 	0x0000002F	[ 79] _mp_load_super_method
<<dead>> 	0x00000028	[ 79] _mp_builtin_issubclass
<<dead>> 	0x0000001F	[ 79] _mp_builtin_isinstance
<<dead>> 	0x000000BE	[ 79] _mp_obj_is_subclass
<<dead>> 	0x00000010	[ 79] 16-byte-literal
<<dead>> 	0x00000010	[ 79] 16-byte-literal
<<dead>> 	0x0000001B	[ 79] literal string: '%s' object isn't callable
<<dead>> 	0x00000016	[ 79] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 79] literal string: obj.h
<<dead>> 	0x00000011	[ 79] literal string: pos < map->alloc
<<dead>> 	0x00000009	[ 79] literal string: <super: 
<<dead>> 	0x00000003	[ 79] literal string: , 
<<dead>> 	0x00000002	[ 79] literal string: >
<<dead>> 	0x0000000B	[ 79] literal string: super_attr
<<dead>> 	0x00000028	[ 79] literal string: mp_obj_is_type(self_in, &mp_type_super)
<<dead>> 	0x0000002A	[ 79] literal string: mp_obj_is_type(self->type, &mp_type_type)
<<dead>> 	0x00000028	[ 79] literal string: mp_obj_is_type(items[i], &mp_type_type)
<<dead>> 	0x00000023	[ 79] literal string: issubclass() arg 1 must be a class
<<dead>> 	0x00000039	[ 79] literal string: issubclass() arg 2 must be a class or a tuple of classes
<<dead>> 	0x00000078	[ 79] _mp_type_super
<<dead>> 	0x00000010	[ 79] _mp_builtin_issubclass_obj
<<dead>> 	0x00000010	[ 79] _mp_builtin_isinstance_obj
<<dead>> 	0x00000066	[ 80] _zip_make_new
<<dead>> 	0x00000061	[ 80] _zip_iternext
<<dead>> 	0x00000078	[ 80] _mp_type_zip
<<dead>> 	0x00000027	[ 81] _op_contains
<<dead>> 	0x00000010	[ 81] _mp_op_contains_obj
<<dead>> 	0x0000008D	[ 83] _mp_stream_rw
<<dead>> 	0x00000053	[ 83] _mp_get_stream_raise
<<dead>> 	0x0000000C	[ 83] _stream_read
<<dead>> 	0x0000000F	[ 83] _stream_read1
<<dead>> 	0x0000002D	[ 83] _mp_stream_write
<<dead>> 	0x0000000F	[ 83] _mp_stream_write_adaptor
<<dead>> 	0x00000094	[ 83] _stream_write_method
<<dead>> 	0x0000003F	[ 83] _stream_write1_method
<<dead>> 	0x000000B7	[ 83] _stream_readinto
<<dead>> 	0x000000D9	[ 83] _stream_unbuffered_readline
<<dead>> 	0x00000072	[ 83] _stream_unbuffered_readlines
<<dead>> 	0x00000034	[ 83] _mp_stream_unbuffered_iter
<<dead>> 	0x00000036	[ 83] _mp_stream_close
<<dead>> 	0x00000092	[ 83] _stream_seek
<<dead>> 	0x00000052	[ 83] _stream_tell
<<dead>> 	0x00000036	[ 83] _stream_flush
<<dead>> 	0x0000008F	[ 83] _stream_ioctl
<<dead>> 	0x0000026C	[ 83] _stream_read_generic
<<dead>> 	0x0000001F	[ 83] literal string: stream operation not supported
<<dead>> 	0x00000018	[ 83] _mp_stream_read_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_read1_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_write_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_write1_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_readinto_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_unbuffered_readline_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_unbuffered_readlines_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_close_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_seek_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_tell_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_flush_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_ioctl_obj
<<dead>> 	0x00000056	[ 84] _mp_binary_get_int
<<dead>> 	0x00000133	[ 84] _mp_binary_get_val
<<dead>> 	0x00000107	[ 84] _mp_binary_set_val
<<dead>> 	0x0000004B	[ 85] _mp_obj_is_package
<<dead>> 	0x000002DF	[ 85] _mp_builtin___import___default
<<dead>> 	0x00000186	[ 85] _evaluate_relative_import
<<dead>> 	0x00000054	[ 85] _stat_dir_or_file
<<dead>> 	0x00000033	[ 85] _do_load
<<dead>> 	0x00000018	[ 85] _mp_builtin___import___obj
<<dead>> 	0x00000019	[ 85] literal string: evaluate_relative_import
<<dead>> 	0x00000010	[ 85] literal string: builtinimport.c
<<dead>> 	0x00000027	[ 85] literal string: current_module_name_obj != MP_OBJ_NULL
<<dead>> 	0x0000001E	[ 85] literal string: can't perform relative import
<<dead>> 	0x00000015	[ 85] literal string: no module named '%q'
<<dead>> 	0x0000000D	[ 85] literal string: /__init__.py
<<dead>> 	0x00000004	[ 85] literal string: .py
<<dead>> 	0x0000000F	[ 86] _mp_builtin_eval
<<dead>> 	0x0000000F	[ 86] _mp_builtin_exec
<<dead>> 	0x000000B4	[ 86] _eval_exec_helper
<<dead>> 	0x00000018	[ 86] _mp_builtin_eval_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_exec_obj
<<dead>> 	0x000008B3	[ 87] _mimxrt_help_text
<<dead>> 	0x000000FC	[ 88] _mp_builtin___build_class__
<<dead>> 	0x00000012	[ 88] _mp_builtin_abs
<<dead>> 	0x00000041	[ 88] _mp_builtin_all
<<dead>> 	0x00000041	[ 88] _mp_builtin_any
<<dead>> 	0x0000004C	[ 88] _mp_builtin_bin
<<dead>> 	0x00000016	[ 88] _mp_builtin_callable
<<dead>> 	0x000000D2	[ 88] _mp_builtin_chr
<<dead>> 	0x0000011C	[ 88] _mp_builtin_dir
<<dead>> 	0x00000015	[ 88] _mp_builtin_divmod
<<dead>> 	0x00000012	[ 88] _mp_builtin_hash
<<dead>> 	0x00000017	[ 88] _mp_builtin_hex
<<dead>> 	0x0000000C	[ 88] _mp_builtin_iter
<<dead>> 	0x0000000F	[ 88] _mp_builtin_max
<<dead>> 	0x0000000C	[ 88] _mp_builtin_min
<<dead>> 	0x00000017	[ 88] _mp_builtin_oct
<<dead>> 	0x00000090	[ 88] _mp_builtin_ord
<<dead>> 	0x0000002B	[ 88] _mp_builtin_pow
<<dead>> 	0x000000C9	[ 88] _mp_builtin_print
<<dead>> 	0x0000003E	[ 88] _mp_builtin___repl_print__
<<dead>> 	0x0000004B	[ 88] _mp_builtin_repr
<<dead>> 	0x0000009E	[ 88] _mp_builtin_round
<<dead>> 	0x0000005A	[ 88] _mp_builtin_sum
<<dead>> 	0x00000057	[ 88] _mp_builtin_sorted
<<dead>> 	0x00000091	[ 88] _mp_builtin_getattr
<<dead>> 	0x0000002D	[ 88] _mp_builtin_setattr
<<dead>> 	0x0000002A	[ 88] _mp_builtin_delattr
<<dead>> 	0x00000069	[ 88] _mp_builtin_hasattr
<<dead>> 	0x00000011	[ 88] _mp_builtin_globals
<<dead>> 	0x00000011	[ 88] _mp_builtin_locals
<<dead>> 	0x0000014F	[ 88] _mp_builtin_min_max
<<dead>> 	0x00000018	[ 88] _mp_builtin___build_class___obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_abs_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_all_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_any_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_bin_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_callable_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_chr_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_dir_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_divmod_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_hash_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_hex_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_iter_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_max_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_min_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_oct_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_ord_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_pow_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_print_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin___repl_print___obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_repr_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_round_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_sum_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_sorted_obj
<<dead>> 	0x00000018	[ 88] _mp_builtin_getattr_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_setattr_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_delattr_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_hasattr_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_globals_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_locals_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_id_obj
<<dead>> 	0x00000010	[ 88] _mp_builtin_len_obj
<<dead>> 	0x000005B0	[ 88] _mp_module_builtins_globals_table
<<dead>> 	0x00000020	[ 88] _mp_module_builtins_globals
<<dead>> 	0x00000010	[ 88] _mp_module_builtins
<<dead>> 	0x0000001B	[ 88] literal string: mp_builtin___build_class__
<<dead>> 	0x0000000E	[ 88] literal string: modbuiltins.c
<<dead>> 	0x0000000C	[ 88] literal string: 2 <= n_args
<<dead>> 	0x00000021	[ 88] literal string: chr() arg not in range(0x110000)
<<dead>> 	0x00000016	[ 88] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 88] literal string: obj.h
<<dead>> 	0x00000011	[ 88] literal string: pos < map->alloc
<<dead>> 	0x00000019	[ 88] literal string: arg is an empty sequence
<<dead>> 	0x0000003A	[ 88] literal string: ord() expected a character, but string of length %d found
<<dead>> 	0x0000001A	[ 88] literal string: 3-arg pow() not supported
<<dead>> 	0x00000002	[ 88] literal string: \n
<<dead>> 	0x0000002B	[ 88] literal string: must use keyword argument for key function
<<dead>> 	0x00000020	[ 88] _mp_builtin_print.allowed_args
<<dead>> 	0x0000003C	[ 89] _mp_micropython_opt_level
<<dead>> 	0x00000010	[ 89] _mp_micropython_heap_lock
<<dead>> 	0x0000001C	[ 89] _mp_micropython_heap_unlock
<<dead>> 	0x00000010	[ 89] _mp_module_micropython
<<dead>> 	0x00000050	[ 89] _mp_module_micropython_globals_table
<<dead>> 	0x00000020	[ 89] _mp_module_micropython_globals
<<dead>> 	0x00000018	[ 89] _mp_micropython_opt_level_obj
<<dead>> 	0x00000010	[ 89] _mp_micropython_heap_lock_obj
<<dead>> 	0x00000010	[ 89] _mp_micropython_heap_unlock_obj
<<dead>> 	0x0000002A	[ 90] _struct_calcsize
<<dead>> 	0x000001DD	[ 90] _struct_unpack_from
<<dead>> 	0x00000085	[ 90] _struct_pack
<<dead>> 	0x000000B3	[ 90] _struct_pack_into
<<dead>> 	0x000000F0	[ 90] _calc_size_items
<<dead>> 	0x00000049	[ 90] _get_fmt_num
<<dead>> 	0x0000016D	[ 90] _struct_pack_into_internal
<<dead>> 	0x00000010	[ 90] _struct_calcsize_obj
<<dead>> 	0x00000018	[ 90] _struct_unpack_from_obj
<<dead>> 	0x00000018	[ 90] _struct_pack_obj
<<dead>> 	0x00000018	[ 90] _struct_pack_into_obj
<<dead>> 	0x00000018	[ 90] _mp_module_ustruct
<<dead>> 	0x00000060	[ 90] _mp_module_struct_globals_table
<<dead>> 	0x00000020	[ 90] _mp_module_struct_globals
<<dead>> 	0x00000011	[ 90] literal string: buffer too small
<<dead>> 	0x00001C28	[ 91] _mp_execute_bytecode
<<dead>> 	0x0000002C	[ 91] literal string: local variable referenced before assignment
<<dead>> 	0x00000014	[ 91] literal string: mp_execute_bytecode
<<dead>> 	0x00000005	[ 91] literal string: vm.c
<<dead>> 	0x00000024	[ 91] literal string: mp_obj_is_exception_instance(TOP())
<<dead>> 	0x00000014	[ 91] literal string: exc_sp >= exc_stack
<<dead>> 	0x00000029	[ 91] literal string: &sp[-1] == MP_TAGPTR_PTR(exc_sp->val_sp)
<<dead>> 	0x00000040	[ 91] literal string: sp[-1] == mp_const_none || mp_obj_is_exception_instance(sp[-1])
<<dead>> 	0x00000018	[ 91] literal string: exc_sp == exc_stack - 1
<<dead>> 	0x0000001F	[ 91] literal string: no active exception to reraise
<<dead>> 	0x00000021	[ 91] literal string: exception chaining not supported
<<dead>> 	0x00000023	[ 91] literal string: ret_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000004C	[ 91] literal string: !mp_obj_exception_match(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))
<<dead>> 	0x00000007	[ 91] literal string: opcode
<<dead>> 	0x00000028	[ 92] _mp_decode_uint
<<dead>> 	0x00000022	[ 92] _mp_decode_uint_value
<<dead>> 	0x00000012	[ 92] _mp_decode_uint_skip
<<dead>> 	0x0000001D	[ 92] _mp_setup_code_state
<<dead>> 	0x0000059D	[ 92] _mp_setup_code_state_helper
<<dead>> 	0x00000012	[ 92] _mp_setup_code_state_native
<<dead>> 	0x00000030	[ 92] _fun_pos_args_mismatch
<<dead>> 	0x0000002F	[ 92] literal string: function got multiple values for argument '%q'
<<dead>> 	0x00000021	[ 92] literal string: unexpected keyword argument '%q'
<<dead>> 	0x00000032	[ 92] literal string: function missing required positional argument #%d
<<dead>> 	0x00000030	[ 92] literal string: function missing required keyword argument '%q'
<<dead>> 	0x00000027	[ 92] literal string: function missing keyword-only argument
<<dead>> 	0x00000035	[ 92] literal string: %q() takes %d positional arguments but %d were given
<<dead>> 	0x00000008	[ 94] _mp_import_stat
<<dead>> 	0x00000000	[ 97] ___memcpy_chk
